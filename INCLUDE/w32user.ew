-- get handles to all dll routines that we need
--/topic Constant
--/const user32
--/desc Windows Library: User Interface

global constant
    -- link to the dlls
    user32      = registerw32Library("user32.dll"),    -- user interface

    xSetParent          = registerw32Function(user32, "SetParent", {C_ULONG, C_ULONG}, C_ULONG),
    xGetDoubleClickTime = registerw32Function(user32, "GetDoubleClickTime", {}, C_LONG),
-- creating windows
    xLoadIcon           = registerw32Function(user32, "LoadIconA", {C_POINTER, C_POINTER}, C_POINTER),
    xDestroyIcon        = registerw32Function(user32, "DestroyIcon", {C_POINTER}, C_UINT),
    xGetIconInfo           = registerw32Function(user32, "GetIconInfo", {C_POINTER, C_POINTER}, C_INT),
    xRegisterClassEx    = registerw32Function(user32, "RegisterClassExA", {C_POINTER}, C_POINTER),
    xUnregisterClass    = registerw32Function(user32, "UnregisterClassA", {C_POINTER, C_POINTER}, C_LONG),
    xCreateWindow       = registerw32Function(user32, "CreateWindowExA", {C_LONG,C_POINTER,C_POINTER,C_LONG,C_INT,C_INT,C_INT,C_INT,C_POINTER,C_POINTER,C_POINTER,C_POINTER}, C_UINT),
    xCreateMDIWindow    = registerw32Function(user32, "CreateMDIWindowA", {C_POINTER,C_POINTER,C_UINT,C_INT,C_INT,C_INT,C_INT,C_POINTER,C_POINTER,C_INT}, C_UINT),
    xGetClassName       = registerw32Function(user32, "GetClassNameA",{C_INT,C_INT,C_INT},C_INT),
    xShowWindow         = registerw32Function(user32, "ShowWindow", {C_POINTER, C_INT}, C_INT),
    xUpdateWindow       = registerw32Procedure(user32, "UpdateWindow", {C_POINTER}),
    xSetForegroundWindow = registerw32Function(user32, "SetForegroundWindow", {C_POINTER}, C_POINTER ),
    xGetForegroundWindow = registerw32Function(user32, "GetForegroundWindow", {}, C_INT ),
-- cursors
    xLoadCursor         = registerw32Function(user32, "LoadCursorA", {C_POINTER, C_POINTER}, C_POINTER),
    xLoadCursorFromFile = registerw32Function(user32, "LoadCursorFromFileA", {C_POINTER}, C_POINTER),
    xSetCursor          = registerw32Function(user32, "SetCursor", {C_POINTER}, C_LONG),
    xSetCursorPos       = registerw32Procedure(user32, "SetCursorPos",{C_LONG,C_LONG}),
    xmouse_event        = registerw32Procedure(user32, "mouse_event",{C_LONG,C_LONG,C_LONG,C_LONG,C_LONG}),
    xShowCursor         = registerw32Function(user32, "ShowCursor", {C_INT}, C_INT),
    xCreateCursor       = registerw32Function(user32, "CreateCursor", {C_POINTER,C_INT,C_INT,C_INT,C_INT,C_POINTER,C_POINTER}, C_POINTER),
    xDestroyCursor      = registerw32Function(user32, "DestroyCursor", {C_POINTER}, C_LONG),
-- class addresses
    xGetClassLong       = registerw32Function(user32, "GetClassLongA", {C_POINTER, C_INT}, C_POINTER),
    xSetClassLong       = registerw32Function(user32, "SetClassLongA", {C_POINTER, C_INT, C_LONG}, C_POINTER),
-- message passing
    xPeekMessage        = registerw32Function(user32, "PeekMessageA", {C_POINTER,C_POINTER,C_UINT,C_UINT, C_UINT}, C_INT),
    xGetMessage         = registerw32Function(user32, "GetMessageA", {C_POINTER,C_POINTER,C_UINT,C_UINT}, C_INT),
    xTranslateMessage   = registerw32Procedure(user32, "TranslateMessage", {C_INT}),
    xDispatchMessage    = registerw32Procedure(user32, "DispatchMessageA", {C_POINTER}),
    xGetQueueStatus     = registerw32Function(user32, "GetQueueStatus", {C_UINT}, C_UINT),
    xSendMessage        = registerw32Function(user32, "SendMessageA", {C_POINTER, C_UINT, C_LONG, C_LONG}, C_LONG),
    xGetClientRect      = registerw32Function(user32, "GetClientRect", {C_POINTER, C_POINTER}, C_INT),
    xDrawText           = registerw32Function(user32, "DrawTextA", {C_POINTER,C_POINTER,C_INT,C_POINTER,C_UINT}, C_LONG ),
    xDrawTextEx         = registerw32Function(user32, "DrawTextExA", {C_POINTER,C_POINTER,C_INT,C_POINTER,C_UINT, C_POINTER},C_LONG ),
    xDefWindowProc      = registerw32Function(user32, "DefWindowProcA", {C_POINTER,C_UINT,C_LONG,C_LONG}, C_LONG ),
    xDefFrameProc       = registerw32Function(user32, "DefFrameProcA", {C_POINTER,C_POINTER, C_UINT,C_LONG,C_LONG}, C_LONG ),
    xGetDC              = registerw32Function(user32, "GetDC", {C_POINTER}, C_UINT),
    xReleaseDC          = registerw32Function(user32, "ReleaseDC", {C_POINTER, C_POINTER}, C_INT),
-- update window support
    xBeginPaint         = registerw32Function(user32, "BeginPaint", {C_POINTER, C_POINTER}, C_INT),
    xEndPaint           = registerw32Procedure(user32, "EndPaint", {C_POINTER, C_POINTER}),
    xGetUpdateRect      = registerw32Function(user32, "GetUpdateRect", {C_POINTER, C_POINTER, C_LONG}, C_LONG),
    xGetUpdateRgn       = registerw32Function(user32, "GetUpdateRgn", {C_POINTER, C_POINTER, C_LONG}, C_LONG),
    xExcludeUpdateRgn   = registerw32Function(user32, "ExcludeUpdateRgn", {C_POINTER, C_POINTER}, C_LONG),
    xInvalidateRect     = registerw32Function(user32, "InvalidateRect", {C_POINTER, C_POINTER, C_LONG}, C_LONG),
    xValidateRect       = registerw32Function(user32, "ValidateRect", {C_POINTER, C_POINTER}, C_LONG),
    xInvalidateRgn      = registerw32Function(user32, "InvalidateRgn", {C_POINTER, C_POINTER, C_LONG}, C_LONG),
    xValidateRgn        = registerw32Function(user32, "ValidateRgn", {C_POINTER, C_POINTER}, C_LONG),
    xRedrawWindow       = registerw32Function(user32, "RedrawWindow", {C_POINTER, C_POINTER, C_POINTER, C_UINT}, C_LONG),
-- timers
    xSetTimer           = registerw32Procedure(user32, "SetTimer", {C_POINTER,C_UINT,C_UINT,C_POINTER} ),
    xKillTimer          = registerw32Procedure(user32, "KillTimer", {C_POINTER, C_UINT}),
    xSetWindowText      = registerw32Function(user32, "SetWindowTextA", {C_POINTER, C_POINTER}, C_INT),
    xGetWindowText      = registerw32Function(user32, "GetWindowTextA", {C_POINTER, C_POINTER, C_INT}, C_INT),
    xGetWindowTextLength= registerw32Function(user32, "GetWindowTextLengthA", {C_POINTER}, C_INT),
    xEnableWindow       = registerw32Procedure(user32, "EnableWindow", {C_POINTER, C_LONG}),
    xIsWindowVisible    = registerw32Function(user32, "IsWindowVisible", {C_POINTER}, C_INT),
    xIsWindowEnabled    = registerw32Function(user32, "IsWindowEnabled", {C_POINTER}, C_INT),
    xIsIconic           = registerw32Function(user32, "IsIconic", {C_POINTER}, C_INT),
    xIsZoomed           = registerw32Function(user32, "IsZoomed", {C_POINTER}, C_INT),
    xGetKeyState        = registerw32Function(user32, "GetKeyState", {C_INT}, C_INT),
    xSetFocus           = registerw32Procedure(user32, "SetFocus", {C_POINTER} ),
    xGetWindowLong      = registerw32Function(user32, "GetWindowLongA", {C_POINTER, C_INT}, C_LONG ),
    xSetWindowLong      = registerw32Function(user32, "SetWindowLongA", {C_POINTER, C_INT, C_LONG}, C_INT),
    xCallWindowProc     = registerw32Function(user32, "CallWindowProcA", {C_POINTER, C_POINTER, C_UINT, C_LONG, C_LONG}, C_LONG),
-- menus
    xLoadMenu           = registerw32Function(user32, "LoadMenuA", {C_POINTER, C_POINTER}, C_LONG),
    xLoadMenuIndirect   = registerw32Function(user32, "LoadMenuIndirectA", {C_POINTER}, C_POINTER),
    xGetMenu            = registerw32Function(user32, "GetMenu", {C_POINTER}, C_POINTER),
    xSetMenu            = registerw32Function(user32, "SetMenu", {C_POINTER, C_POINTER}, C_LONG),
    xHiliteMenuItem     = registerw32Function(user32, "HiliteMenuItem", {C_POINTER, C_POINTER, C_UINT, C_UINT}, C_LONG),
    xGetMenuString      = registerw32Function(user32, "GetMenuStringA", {C_POINTER, C_UINT, C_POINTER, C_INT, C_UINT}, C_LONG),
    xGetMenuState       = registerw32Function(user32, "GetMenuState", {C_POINTER, C_UINT, C_UINT}, C_LONG),
    xDrawMenuBar        = registerw32Function(user32, "DrawMenuBar", {C_POINTER}, C_LONG),
    xGetSystemMenu      = registerw32Function(user32, "GetSystemMenu", {C_POINTER, C_LONG}, C_POINTER),
    xCreateMenu         = registerw32Function(user32, "CreateMenu", {}, C_POINTER),
    xCreatePopupMenu    = registerw32Function(user32, "CreatePopupMenu", {}, C_POINTER),
    xDestroyMenu        = registerw32Function(user32, "DestroyMenu", {C_POINTER}, C_LONG),
    xCheckMenuItem      = registerw32Function(user32, "CheckMenuItem", {C_POINTER, C_UINT, C_UINT}, C_LONG),
    xEnableMenuItem     = registerw32Function(user32, "EnableMenuItem", {C_POINTER, C_UINT, C_UINT}, C_LONG),
    xGetSubMenu         = registerw32Function(user32, "GetSubMenu", {C_POINTER, C_INT}, C_POINTER),
    xGetMenuItemID      = registerw32Function(user32, "GetMenuItemID", {C_POINTER, C_INT}, C_UINT),
    xGetMenuItemCount   = registerw32Function(user32, "GetMenuItemCount", {C_POINTER}, C_INT),
    xInsertMenu         = registerw32Function(user32, "InsertMenuA", {C_POINTER, C_UINT, C_UINT, C_UINT, C_POINTER}, C_LONG),
    xAppendMenu         = registerw32Function(user32, "AppendMenuA", {C_POINTER, C_UINT, C_UINT, C_POINTER}, C_POINTER),
    xModifyMenu         = registerw32Function(user32, "ModifyMenuA", {C_POINTER, C_UINT, C_UINT, C_UINT, C_POINTER}, C_LONG),
    xRemoveMenu         = registerw32Function(user32, "RemoveMenu", {C_POINTER, C_UINT, C_UINT}, C_LONG),
    xDeleteMenu         = registerw32Function(user32, "DeleteMenu", {C_POINTER, C_UINT, C_UINT}, C_LONG),
    xSetMenuItemBitmaps = registerw32Function(user32, "SetMenuItemBitmaps", {C_LONG, C_UINT, C_UINT, C_POINTER, C_POINTER}, C_LONG),
    xGetMenuCheckMarkDimensions = registerw32Function(user32, "GetMenuCheckMarkDimensions", {}, C_LONG),
    xTrackPopupMenu     = registerw32Function(user32, "TrackPopupMenu", {C_POINTER, C_UINT, C_INT, C_INT, C_INT, C_POINTER, C_POINTER}, C_LONG),
    xCheckMenuRadioItem = registerw32Function(user32,"CheckMenuRadioItem",{C_LONG, C_UINT, C_UINT, C_UINT, C_UINT}, C_USHORT),
    xSetMenuItemInfo    = registerw32Function(user32, "SetMenuItemInfoA",{C_POINTER, C_UINT, C_UINT, C_POINTER}, C_UINT),
    xGetMenuItemInfo    = registerw32Function(user32, "GetMenuItemInfoA",{C_POINTER, C_UINT, C_UINT, C_POINTER}, C_UINT),
-- messages
    xPostMessage        = registerw32Function(user32, "PostMessageA", {C_POINTER, C_UINT, C_INT, C_LONG}, C_LONG),
    xPostQuitMessage    = registerw32Procedure(user32, "PostQuitMessage", {C_INT}),
    xMapWindowPoints    = registerw32Function(user32, "MapWindowPoints", {C_POINTER, C_POINTER, C_POINTER, C_INT}, C_INT),
    xGetCursorPos       = registerw32Function(user32, "GetCursorPos", {C_POINTER}, C_INT),
-- system colors
    xGetSysColor        = registerw32Function(user32, "GetSysColor", {C_INT}, C_LONG),
    xSetSysColors       = registerw32Function(user32, "SetSysColors", {C_INT, C_POINTER, C_LONG}, C_LONG),
    xLoadImage          = registerw32Function(user32, "LoadImageA",{C_POINTER, C_POINTER, C_UINT, C_INT, C_INT, C_UINT}, C_POINTER ),
-- scroll bars
    xSetScrollPos       = registerw32Function(user32, "SetScrollPos", {C_POINTER, C_INT, C_INT, C_LONG}, C_INT),
    xGetScrollPos       = registerw32Function(user32, "GetScrollPos", {C_POINTER, C_INT}, C_INT),
    xSetScrollRange     = registerw32Function(user32, "SetScrollRange", {C_POINTER, C_INT, C_INT, C_INT, C_LONG}, C_LONG),
    xGetScrollRange     = registerw32Function(user32, "GetScrollRange", {C_POINTER, C_INT, C_POINTER, C_POINTER}, C_LONG),
    xShowScrollBar      = registerw32Function(user32, "ShowScrollBar", {C_POINTER, C_INT, C_LONG}, C_LONG),
    xEnableScrollBar    = registerw32Function(user32, "EnableScrollBar", {C_POINTER, C_UINT, C_UINT}, C_LONG),
    xSetScrollInfo      = registerw32Function(user32, "SetScrollInfo", {C_POINTER, C_INT, C_POINTER, C_LONG}, C_INT),
    xGetScrollInfo      = registerw32Function(user32, "GetScrollInfo", {C_POINTER, C_INT, C_POINTER}, C_POINTER),
    xGetWindowRect      = registerw32Function(user32, "GetWindowRect", {C_POINTER, C_POINTER}, C_LONG),
    xClientToScreen     = registerw32Function(user32, "ClientToScreen", {C_POINTER, C_POINTER}, C_LONG),
    xScreenToClient     = registerw32Function(user32, "ScreenToClient", {C_POINTER, C_POINTER}, C_LONG),
    xCloseWindow        = registerw32Function(user32, "CloseWindow", {C_POINTER}, C_LONG),
    xMoveWindow         = registerw32Function(user32, "MoveWindow", {C_POINTER, C_INT, C_INT, C_INT, C_INT, C_LONG}, C_LONG),
    xSetWindowPos       = registerw32Function(user32, "SetWindowPos", {C_POINTER, C_POINTER, C_INT, C_INT, C_INT, C_INT, C_UINT}, C_LONG),
    xGetWindowPlacement = registerw32Function(user32, "GetWindowPlacement", {C_POINTER, C_POINTER}, C_LONG),
    xSetWindowPlacement = registerw32Function(user32, "SetWindowPlacement", {C_POINTER, C_POINTER}, C_LONG),
    xDestroyWindow      = registerw32Function(user32, "DestroyWindow", {C_POINTER}, C_LONG),
    xGetActiveWindow    = registerw32Function(user32, "GetActiveWindow", {}, C_POINTER ),
-- rectangles
    xDrawFocusRect      = registerw32Function(user32, "DrawFocusRect", {C_POINTER, C_POINTER}, C_LONG),
    xDrawFrameControl   = registerw32Function(user32, "DrawFrameControl", {C_POINTER, C_POINTER, C_UINT, C_UINT}, C_LONG),
-- carets
    xCreateCaret        = registerw32Function(user32, "CreateCaret", {C_POINTER, C_POINTER, C_LONG, C_LONG}, C_LONG ),
    xGetCaretBlinkTime  = registerw32Function(user32, "GetCaretBlinkTime", {}, C_LONG ),
    xSetCaretBlinkTime  = registerw32Function(user32, "SetCaretBlinkTime", {C_LONG}, C_LONG ),
    xDestroyCaret       = registerw32Function(user32, "DestroyCaret", {}, C_LONG ),
    xHideCaret          = registerw32Function(user32, "HideCaret", {C_POINTER}, C_LONG ),
    xShowCaret          = registerw32Function(user32, "ShowCaret", {C_POINTER}, C_LONG ),
    xSetCaretPos        = registerw32Function(user32, "SetCaretPos", {C_LONG, C_LONG}, C_LONG ),
    xGetCaretPos        = registerw32Function(user32, "GetCaretPos", {C_POINTER}, C_LONG ),
    xSetCapture         = registerw32Function(user32,"SetCapture",{C_UINT},C_INT),
    xReleaseCapture     = registerw32Procedure(user32,"ReleaseCapture",{}),
    xGetSystemMetrics   = registerw32Function(user32, "GetSystemMetrics", {C_INT},C_LONG),
    CopyImage           = registerw32Function( user32, "CopyImage", { C_LONG, C_UINT, C_INT, C_INT, C_UINT }, C_LONG ),
    RegisterWindowMessage = registerw32Function( user32, "RegisterWindowMessageA", { C_POINTER }, C_INT ),
    xFindWindow         = registerw32Function(user32, "FindWindowA", {C_POINTER,C_POINTER}, C_INT),
    ChildWindowFromPoint = registerw32Function( user32, "ChildWindowFromPoint",{ C_LONG, C_LONG }, C_LONG ),
    ChildWindowFromPointEx = registerw32Function( user32, "ChildWindowFromPointEx", { C_LONG, C_LONG, C_UINT }, C_LONG ),
    xGetWindowInfo      = registerw32Function( user32, "GetWindowInfo", {C_POINTER, C_POINTER}, C_LONG),
    xGetWindow          = registerw32Function( user32, "GetWindow", {C_LONG, C_LONG}, C_LONG),
    xGetFocus           = registerw32Function(user32, "GetFocus", {}, C_INT ),
    xSetWindowRgn       = registerw32Function(user32,"SetWindowRgn", {C_POINTER,C_POINTER, C_UINT},C_LONG),
    xLockWindowUpdate   = registerw32Function(user32,"LockWindowUpdate", {C_POINTER}, C_UINT),

-- Clipboard
    xChangeClipboardChain = registerw32Procedure(user32,"ChangeClipboardChain",{C_UINT,C_UINT}),
    xCloseClipboard     = registerw32Procedure(user32,"CloseClipboard",{}),
    xCountClipboardFormats = registerw32Function(user32,"CountClipboardFormats",{},C_INT),
    xEmptyClipboard     = registerw32Function(user32,"EmptyClipboard",{},C_INT),
    xEnumClipboardFormats = registerw32Function(user32,"EnumClipboardFormats",{C_UINT},C_UINT),
    xGetClipboardData   = registerw32Function(user32,"GetClipboardData",{C_UINT},C_UINT),
    xGetClipboardFormatName = registerw32Function(user32,"GetClipboardFormatNameA",{C_UINT,C_UINT,C_UINT},C_UINT),
    xGetClipboardOwner  = registerw32Function(user32,"GetClipboardOwner",{},C_UINT),
    xGetClipboardViewer = registerw32Function(user32,"GetClipboardViewer",{},C_UINT),
    xGetOpenClipboardWindow = registerw32Function(user32,"GetOpenClipboardWindow",{},C_UINT),
    xGetPriorityClipboardFormat = registerw32Function(user32,"GetPriorityClipboardFormat",{C_UINT,C_UINT},C_UINT),
    xIsClipboardFormatAvailable = registerw32Function(user32,"IsClipboardFormatAvailable",{C_UINT},C_INT),
    xOpenClipboard      = registerw32Function(user32,"OpenClipboard",{C_UINT},C_INT),
    xRegisterClipboardFormat = registerw32Function(user32,"RegisterClipboardFormatA",{C_UINT},C_UINT),
    xSetClipboardData   = registerw32Function(user32,"SetClipboardData",{C_UINT,C_UINT},C_UINT),
    xSetClipboardViewer = registerw32Function(user32,"SetClipboardViewer",{C_UINT},C_UINT),
    xBeep               = registerw32Function(user32, "MessageBeep", {C_INT},C_INT),
    xGetDialogBaseUnits = registerw32Function(user32, "GetDialogBaseUnits", {},C_INT),
    xSystemParametersInfo = registerw32Function(user32, "SystemParametersInfoA", {C_INT, C_POINTER,C_POINTER,C_INT},C_INT),

    QS_KEY              = #0001,
    QS_MOUSEMOVE        = #0002,
    QS_MOUSEBUTTON      = #0004,
    QS_POSTMESSAGE      = #0008,
    QS_TIMER            = #0010,
    QS_PAINT            = #0020,
    QS_SENDMESSAGE      = #0040,
    QS_HOTKEY           = #0080,
    QS_ALLPOSTMESSAGE   = #0100,
    QS_MOUSE            = QS_MOUSEMOVE + QS_MOUSEBUTTON,
    QS_INPUT            = QS_MOUSE + QS_KEY,
    QS_ALLEVENTS        = QS_INPUT + QS_POSTMESSAGE + QS_TIMER + QS_PAINT + QS_HOTKEY,
    QS_ALLINPUT         = QS_ALLEVENTS + QS_SENDMESSAGE

global constant
    SPI_GETBEEP                 = 1,
    SPI_SETBEEP                 = 2,
    SPI_GETMOUSE                = 3,
    SPI_SETMOUSE                = 4,
    SPI_GETBORDER               = 5,
    SPI_SETBORDER               = 6,
    SPI_GETKEYBOARDSPEED       = 10,
    SPI_SETKEYBOARDSPEED       = 11,
    SPI_LANGDRIVER             = 12,
    SPI_ICONHORIZONTALSPACING  = 13,
    SPI_GETSCREENSAVETIMEOUT   = 14,
    SPI_SETSCREENSAVETIMEOUT   = 15,
    SPI_GETSCREENSAVEACTIVE    = 16,
    SPI_SETSCREENSAVEACTIVE    = 17,
    SPI_GETGRIDGRANULARITY     = 18,
    SPI_SETGRIDGRANULARITY     = 19,
    SPI_SETDESKWALLPAPER       = 20,
    SPI_SETDESKPATTERN         = 21,
    SPI_GETKEYBOARDDELAY       = 22,
    SPI_SETKEYBOARDDELAY       = 23,
    SPI_ICONVERTICALSPACING    = 24,
    SPI_GETICONTITLEWRAP       = 25,
    SPI_SETICONTITLEWRAP       = 26,
    SPI_GETMENUDROPALIGNMENT   = 27,
    SPI_SETMENUDROPALIGNMENT   = 28,
    SPI_SETDOUBLECLKWIDTH      = 29,
    SPI_SETDOUBLECLKHEIGHT     = 30,
    SPI_GETICONTITLELOGFONT    = 31,
    SPI_SETDOUBLECLICKTIME     = 32,
    SPI_SETMOUSEBUTTONSWAP     = 33,
    SPI_SETICONTITLELOGFONT    = 34,
    SPI_GETFASTTASKSWITCH      = 35,
    SPI_SETFASTTASKSWITCH      = 36,
    SPI_SETDRAGFULLWINDOWS     = 37,
    SPI_GETDRAGFULLWINDOWS     = 38,
    SPI_GETNONCLIENTMETRICS    = 41,
    SPI_SETNONCLIENTMETRICS    = 42,
    SPI_GETMINIMIZEDMETRICS    = 43,
    SPI_SETMINIMIZEDMETRICS    = 44,
    SPI_GETICONMETRICS         = 45,
    SPI_SETICONMETRICS         = 46,
    SPI_SETWORKAREA            = 47,
    SPI_GETWORKAREA            = 48,
    SPI_SETPENWINDOWS          = 49,
    SPI_GETHIGHCONTRAST        = 66,
    SPI_SETHIGHCONTRAST        = 67,
    SPI_GETKEYBOARDPREF        = 68,
    SPI_SETKEYBOARDPREF        = 69,
    SPI_GETSCREENREADER        = 70,
    SPI_SETSCREENREADER        = 71,
    SPI_GETANIMATION           = 72,
    SPI_SETANIMATION           = 73,
    SPI_GETFONTSMOOTHING       = 74,
    SPI_SETFONTSMOOTHING       = 75,
    SPI_SETDRAGWIDTH           = 76,
    SPI_SETDRAGHEIGHT          = 77,
    SPI_SETHANDHELD            = 78,
    SPI_GETLOWPOWERTIMEOUT     = 79,
    SPI_GETPOWEROFFTIMEOUT     = 80,
    SPI_SETLOWPOWERTIMEOUT     = 81,
    SPI_SETPOWEROFFTIMEOUT     = 82,
    SPI_GETLOWPOWERACTIVE      = 83,
    SPI_GETPOWEROFFACTIVE      = 84,
    SPI_SETLOWPOWERACTIVE      = 85,
    SPI_SETPOWEROFFACTIVE      = 86,
    SPI_SETCURSORS             = 87,
    SPI_SETICONS               = 88,
    SPI_GETDEFAULTINPUTLANG    = 89,
    SPI_SETDEFAULTINPUTLANG    = 90,
    SPI_SETLANGTOGGLE          = 91,
    SPI_GETWINDOWSEXTENSION    = 92,
    SPI_SETMOUSETRAILS         = 93,
    SPI_GETMOUSETRAILS         = 94,
    SPI_SETSCREENSAVERRUNNING  = 97,
    SPI_SCREENSAVERRUNNING     = SPI_SETSCREENSAVERRUNNING,
    SPI_GETFILTERKEYS          = 50,
    SPI_SETFILTERKEYS          = 51,
    SPI_GETTOGGLEKEYS          = 52,
    SPI_SETTOGGLEKEYS          = 53,
    SPI_GETMOUSEKEYS           = 54,
    SPI_SETMOUSEKEYS           = 55,
    SPI_GETSHOWSOUNDS          = 56,
    SPI_SETSHOWSOUNDS          = 57,
    SPI_GETSTICKYKEYS          = 58,
    SPI_SETSTICKYKEYS          = 59,
    SPI_GETACCESSTIMEOUT       = 60,
    SPI_SETACCESSTIMEOUT       = 61,
    SPI_GETSERIALKEYS          = 62,
    SPI_SETSERIALKEYS          = 63,
    SPI_GETSOUNDSENTRY         = 64,
    SPI_SETSOUNDSENTRY         = 65,
    SPI_GETSNAPTODEFBUTTON     = 95,
    SPI_SETSNAPTODEFBUTTON     = 96,
    SPI_GETMOUSEHOVERWIDTH     = 98,
    SPI_SETMOUSEHOVERWIDTH     = 99,
    SPI_GETMOUSEHOVERHEIGHT   = 100,
    SPI_SETMOUSEHOVERHEIGHT   = 101,
    SPI_GETMOUSEHOVERTIME     = 102,
    SPI_SETMOUSEHOVERTIME     = 103,
    SPI_GETWHEELSCROLLLINES   = 104,
    SPI_SETWHEELSCROLLLINES   = 105,
    SPI_GETMENUSHOWDELAY      = 106,
    SPI_SETMENUSHOWDELAY      = 107,
    SPI_GETSHOWIMEUI          = 110,
    SPI_SETSHOWIMEUI          = 111,
    SPI_GETMOUSESPEED         = 112,
    SPI_SETMOUSESPEED         = 113,
    SPI_GETSCREENSAVERRUNNING = 114,
    SPI_GETDESKWALLPAPER      = 115,
    SPI_GETACTIVEWINDOWTRACKING         = #1000,
    SPI_SETACTIVEWINDOWTRACKING         = #1001,
    SPI_GETMENUANIMATION                = #1002,
    SPI_SETMENUANIMATION                = #1003,
    SPI_GETCOMBOBOXANIMATION            = #1004,
    SPI_SETCOMBOBOXANIMATION            = #1005,
    SPI_GETLISTBOXSMOOTHSCROLLING       = #1006,
    SPI_SETLISTBOXSMOOTHSCROLLING       = #1007,
    SPI_GETGRADIENTCAPTIONS             = #1008,
    SPI_SETGRADIENTCAPTIONS             = #1009,
    SPI_GETKEYBOARDCUES                 = #100A,
    SPI_SETKEYBOARDCUES                 = #100B,
    SPI_GETMENUUNDERLINES               = SPI_GETKEYBOARDCUES,
    SPI_SETMENUUNDERLINES               = SPI_SETKEYBOARDCUES,
    SPI_GETACTIVEWNDTRKZORDER           = #100C,
    SPI_SETACTIVEWNDTRKZORDER           = #100D,
    SPI_GETHOTTRACKING                  = #100E,
    SPI_SETHOTTRACKING                  = #100F,
    SPI_GETMENUFADE                     = #1012,
    SPI_SETMENUFADE                     = #1013,
    SPI_GETSELECTIONFADE                = #1014,
    SPI_SETSELECTIONFADE                = #1015,
    SPI_GETTOOLTIPANIMATION             = #1016,
    SPI_SETTOOLTIPANIMATION             = #1017,
    SPI_GETTOOLTIPFADE                  = #1018,
    SPI_SETTOOLTIPFADE                  = #1019,
    SPI_GETCURSORSHADOW                 = #101A,
    SPI_SETCURSORSHADOW                 = #101B,
    SPI_GETUIEFFECTS                    = #103E,
    SPI_SETUIEFFECTS                    = #103F,
    SPI_GETFOREGROUNDLOCKTIMEOUT        = #2000,
    SPI_SETFOREGROUNDLOCKTIMEOUT        = #2001,
    SPI_GETACTIVEWNDTRKTIMEOUT          = #2002,
    SPI_SETACTIVEWNDTRKTIMEOUT          = #2003,
    SPI_GETFOREGROUNDFLASHCOUNT         = #2004,
    SPI_SETFOREGROUNDFLASHCOUNT         = #2005,
    SPI_GETCARETWIDTH                   = #2006,
    SPI_SETCARETWIDTH                   = #2007,

    MDIS_ALLCHILDSTYLES                 = #0001
