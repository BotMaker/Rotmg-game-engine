--/topic Constant
--/const gdi32
--/desc Windows Library: Graphic Device Interface (drawing, text, etc)

global constant
    gdi32       = registerw32Library("gdi32.dll"),     -- graphic device interface

    xGetStockObject     = registerw32Function(gdi32, "GetStockObject", {C_INT}, C_POINTER),
-- device context
    xSelectObject       = registerw32Function(gdi32, "SelectObject", {C_POINTER, C_POINTER}, C_POINTER),
    xCreateDC           = registerw32Function(gdi32, "CreateDCA", repeat( C_POINTER, 4 ), C_POINTER),
    xMoveToEx           = registerw32Function(gdi32, "MoveToEx", {C_POINTER, C_INT, C_INT, C_POINTER}, C_LONG),
-- graphics
    xCreatePen          = registerw32Function(gdi32, "CreatePen", {C_INT, C_INT, C_LONG}, C_POINTER),
    xCreateSolidBrush   = registerw32Function(gdi32, "CreateSolidBrush", {C_POINTER}, C_POINTER),
    xLineTo             = registerw32Function(gdi32, "LineTo", {C_POINTER, C_INT, C_INT}, C_LONG),
    xGetPixel           = registerw32Function(gdi32, "GetPixel", {C_POINTER, C_INT, C_INT}, C_LONG),
    xSetPixel           = registerw32Function(gdi32, "SetPixel", {C_POINTER, C_INT, C_INT, C_LONG}, C_LONG),
    xRectangle          = registerw32Function(gdi32, "Rectangle", {C_POINTER, C_INT, C_INT, C_INT, C_LONG}, C_LONG),
    xRoundRect          = registerw32Function(gdi32, "RoundRect", {C_POINTER, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT}, C_LONG),
    xEllipse            = registerw32Function(gdi32, "Ellipse", {C_POINTER, C_INT, C_INT, C_INT, C_INT}, C_LONG),
    xArc                = registerw32Function(gdi32, "Arc", {C_POINTER, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT}, C_LONG),
    xChord              = registerw32Function(gdi32, "Chord", {C_POINTER, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT}, C_LONG),
    xPie                = registerw32Function(gdi32, "Pie", {C_POINTER, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT}, C_LONG),
    xPolygon            = registerw32Function(gdi32, "Polygon", {C_POINTER, C_POINTER, C_INT}, C_LONG),
-- text
    xTextOut            = registerw32Procedure(gdi32, "TextOutA", {C_POINTER, C_INT, C_INT, C_POINTER, C_INT}),
-- used by EZ_FONT
    xSaveDC             = registerw32Function(gdi32, "SaveDC", {C_POINTER}, C_INT),
    xSetGraphicsMode    = registerw32Function(gdi32, "SetGraphicsMode", {C_POINTER, C_INT}, C_INT),
    xModifyWorldTransform = registerw32Function(gdi32, "ModifyWorldTransform", {C_POINTER, C_POINTER, C_LONG}, C_LONG),
    xSetViewportOrgEx   = registerw32Function(gdi32, "SetViewportOrgEx", {C_POINTER, C_INT, C_INT, C_POINTER}, C_LONG),
    xSetWindowOrgEx     = registerw32Function(gdi32, "SetWindowOrgEx", {C_POINTER, C_INT, C_INT, C_POINTER}, C_LONG),
    xSetViewportExtEx   = registerw32Function(gdi32, "SetViewportExtEx", {C_LONG,C_INT,C_INT,C_INT},C_INT),
    xSetWindowExtEx     = registerw32Function(gdi32, "SetWindowExtEx",{C_LONG,C_INT,C_INT,C_POINTER},C_INT),
    xGetDeviceCaps      = registerw32Function(gdi32, "GetDeviceCaps", {C_POINTER, C_INT}, C_INT),
    xDPtoLP             = registerw32Function(gdi32, "DPtoLP", {C_POINTER, C_POINTER, C_INT}, C_LONG),
    xCreateFontIndirect = registerw32Function(gdi32, "CreateFontIndirectA", {C_POINTER}, C_POINTER),
    xGetTextMetrics     = registerw32Function(gdi32, "GetTextMetricsA", {C_POINTER, C_POINTER}, C_LONG),
    xDeleteObject       = registerw32Function(gdi32, "DeleteObject", {C_POINTER}, C_LONG),
    xRestoreDC          = registerw32Function(gdi32, "RestoreDC", {C_POINTER, C_INT}, C_LONG),
    xGetTextExtentPoint = registerw32Function(gdi32, "GetTextExtentPoint32A", {C_POINTER, C_POINTER, C_INT, C_POINTER}, C_LONG),
-- graphic modes
    xSetMapMode         = registerw32Function(gdi32, "SetMapMode", {C_POINTER, C_INT}, C_INT),
    xGetMapMode         = registerw32Function(gdi32, "GetMapMode", {C_POINTER}, C_INT),
    xGetObject          = registerw32Function(gdi32, "GetObjectA", {C_POINTER, C_INT, C_POINTER}, C_POINTER),
    xGetObjectType      = registerw32Function(gdi32, "GetObjectType", {C_POINTER}, C_INT),
    xCreatePalette      = registerw32Function(gdi32, "CreatePalette", {C_POINTER}, C_POINTER),
-- bitmap graphics
    xGetWindowExtEx     = registerw32Function(gdi32, "GetWindowExtEx", {C_POINTER, C_POINTER}, C_POINTER),
    xCreateCompatibleBitmap = registerw32Function(gdi32, "CreateCompatibleBitmap", {C_POINTER, C_INT, C_INT}, C_POINTER),
    xSetBitmapBits      = registerw32Function(gdi32, "SetBitmapBits", {C_POINTER, C_LONG, C_POINTER}, C_LONG),
    xSelectPalette      = registerw32Function(gdi32, "SelectPalette", {C_POINTER, C_POINTER, C_LONG}, C_POINTER),
    xRealizePalette     = registerw32Function(gdi32, "RealizePalette", {C_POINTER}, C_UINT),
    xSetDIBitsToDevice  = registerw32Function(gdi32, "SetDIBitsToDevice", {C_POINTER, C_INT, C_INT, C_LONG, C_LONG, C_INT, C_INT, C_UINT, C_UINT, C_POINTER, C_POINTER, C_UINT}, C_INT),
    xStretchDIBits      = registerw32Function(gdi32, "StretchDIBits", {C_POINTER,C_INT,C_INT,C_INT,C_INT,C_INT,C_INT,C_INT,C_INT,C_POINTER,C_POINTER,C_UINT,C_LONG},C_INT),
    xBitBlt             = registerw32Function(gdi32, "BitBlt", {C_POINTER,C_INT,C_INT,C_INT,C_INT,C_POINTER,C_INT,C_INT,C_LONG},C_LONG),
    xSetROP2            = registerw32Function(gdi32, "SetROP2", {C_POINTER, C_LONG}, C_LONG ),
    xCreateCompatibleDC = registerw32Function(gdi32, "CreateCompatibleDC", {C_POINTER}, C_POINTER),
    xDeleteDC           = registerw32Function(gdi32, "DeleteDC", {C_POINTER}, C_POINTER),
    xCreateBitmap       = registerw32Function(gdi32, "CreateBitmap", {C_INT, C_INT, C_UINT, C_UINT, C_POINTER}, C_POINTER),
    xCreateBitmapIndirect = registerw32Function(gdi32, "CreateBitmapIndirect", {C_POINTER}, C_POINTER),
    xCreateDIBitmap     = registerw32Function(gdi32, "CreateDIBitmap", {C_POINTER, C_POINTER, C_LONG, C_LONG, C_POINTER, C_LONG}, C_POINTER ),
    xStretchBlt         = registerw32Function(gdi32, "StretchBlt",{ C_LONG,C_UINT,C_UINT,C_UINT,C_UINT,C_LONG,C_UINT,C_UINT,C_UINT,C_UINT,C_LONG},C_POINTER),
    xExtFloodFill       = registerw32Function(gdi32, "ExtFloodFill",{ C_POINTER,C_INT,C_INT,C_UINT,C_UINT},C_UINT),

-- extending the text attributes
    xSetTextColor       = registerw32Function(gdi32, "SetTextColor", {C_POINTER, C_LONG}, C_LONG),
    xSetTextAlign       = registerw32Function(gdi32, "SetTextAlign", {C_POINTER, C_UINT}, C_UINT),
    xSetTextJustification = registerw32Function(gdi32, "SetTextJustification", {C_POINTER, C_INT, C_INT}, C_LONG),
    xSetBkColor         = registerw32Function(gdi32, "SetBkColor", {C_POINTER, C_LONG}, C_LONG),
    xSetBkMode          = registerw32Function(gdi32, "SetBkMode", {C_POINTER, C_INT}, C_INT),
    xGetBkColor         = registerw32Function(gdi32, "GetBkColor", {C_POINTER}, C_LONG),
    xStartDoc           = registerw32Function(gdi32, "StartDocA", {C_LONG, C_POINTER}, C_LONG),
    xStartPage          = registerw32Function(gdi32, "StartPage", {C_LONG}, C_LONG),
    xEndPage            = registerw32Function(gdi32, "EndPage", {C_LONG}, C_LONG),
    xEndDoc             = registerw32Function(gdi32, "EndDoc", {C_LONG}, C_LONG),
    xAbortDoc           = registerw32Function(gdi32, "AbortDoc", {C_LONG}, C_LONG),
-- position of windows
    xGetViewportOrgEx   = registerw32Function(gdi32, "GetViewportOrgEx", {C_POINTER, C_POINTER}, C_LONG),
    xGetDIBits          = registerw32Function( gdi32, "GetDIBits",{ C_LONG, C_LONG, C_UINT, C_UINT, C_LONG, C_LONG, C_UINT }, C_LONG ),
    xCreateRectRgn      = registerw32Function(gdi32, "CreateRectRgn", {C_LONG, C_LONG,C_LONG,C_LONG},C_POINTER),

    OBJ_PEN            = 1,
    OBJ_BRUSH          = 2,
    OBJ_DC             = 3,
    OBJ_METADC         = 4,
    OBJ_PAL            = 5,
    OBJ_FONT           = 6,
    OBJ_BITMAP         = 7,
    OBJ_REGION         = 8,
    OBJ_METAFILE       = 9,
    OBJ_MEMDC          = 10,
    OBJ_EXTPEN         = 11,
    OBJ_ENHMETADC      = 12,
    OBJ_ENHMETAFILE    = 13,
    OBJ_COLORSPACE     = 14,

    FLOODFILLBORDER    = 0,
    FLOODFILLSURFACE   = 1,

    MM_TEXT            = 1,
    MM_LOMETRIC        = 2,
    MM_HIMETRIC        = 3,
    MM_LOENGLISH       = 4,
    MM_HIENGLISH       = 5,
    MM_TWIPS           = 6,
    MM_ISOTROPIC       = 7,
    MM_ANISOTROPIC     = 8,
    MM_MIN             = MM_TEXT,
    MM_MAX             = MM_ANISOTROPIC,
    MM_MAX_FIXEDSCALE  = MM_TWIPS

--/topic Graphics
--/func floodFill( atom pControl, integer pXStart, integer pYStart, object pColor, integer pFillType)
--/desc Performs a 'flood fill' operation.
--/ret ATOM: 0 if failed, !0 if success
--
--This routine will fill an area of adjacent pixels with the same color. It works by searching for
-- a specific color, the Search Color, and changing pixels to the Flood Color as it goes. There
-- are two types of searching. One searches for a border and all pixels inside the border are
-- changed to the flood color. The other type searches for a specific color and only changes
-- adjacent pixels with that color to the flood color.
--
--/i pControl is either a valid control ID, or a Device Context returned by /getDC. If /i pControl is
-- a control Id, then the default flood color is the current pen color ( /setPenColor ) otherwise you need to
-- create your own brush before calling this ( /createBrush ).
--
--/i pXStart and /i pYStart are the pixel coordinates of the flood starting position.
--
--/i pFillType is one of either /b FLOODFILLBORDER or /b FLOODFILLSURFACE. A border fill changes each pixel
-- until the border is encountered. A surface fill changes each adjacent pixel that is the same color as
-- the /i pColor value.
--
--/i pColor is used to supply the search color or both colors. To supply just the search color then
-- /i pColor is a single value. To supply both search and flood colors, then /i pColor is
-- a two-element sequence in the form { SearchColor, FloodColor }. /n
-- Either color can be a single atom color value, a 3-element {R,G,B} value or the name of one of
-- the predefined color names, eg. /i <"Black">, /i <"BrightCyan">, etc...
--
-- The Search Color's usage depends on the  flood type. If doing a border fill, then
-- the search color is the border's color. If a surface fill, this is the color of the pixels to change from. /n
-- There is a special value for Search Color. If you supply a value of -1, then Search Color is taken from the
-- pixel currently at /i "pXStart, pYStart". This means that for a border fill, nothing happens. For a
-- surface fill, the pixel at the start position and all adjacent pixels will be changed to the flood
-- color. /n
-- /b Note that if no Flood Color is supplied the current pen color is used when /i pControl
-- is a control ID, or the current brush if /i pControl is a device context. /n
-- If the Flood Color is supplied, and it has the value -1, then the current pen color for the control
-- is used.
--
--Examples:
--/code
--      -- Using the current pen, set all pixels inside the black border.
--      VOID = floodFill( myPixmap, x, y, Black, FLOODFILLBORDER)
--      -- Set the start pixel and all adjacent pixels of the same color to Pink
--      VOID = floodFill( myPixmap, x, y, {-1, Pink}, FLOODFILLSURFACE)
--/endcode
global function floodFill( atom pHDC, integer pXStart, integer pYStart, object pColor, integer pFillType)
    atom lRC
    integer lID
    object lSearchColor
    object lFloodColor
    integer lRelease
    integer lBrush

    if call_func(r_validId,{pHDC}) then
        lID = pHDC
        pHDC = call_func(r_getDC,{lID})
        lRelease = 1
        lBrush = 1
    else
        lID = call_func(r_getIdFromDC, {pHDC})
        lRelease = 0
        lBrush = 0
    end if

    if sequence(pColor) then
        if length(pColor) = 2 then
            lSearchColor = pColor[1]
            lFloodColor = pColor[2]
        else
            lSearchColor = pColor
            lFloodColor = {}
        end if
    else
        lSearchColor = pColor
        lFloodColor = {}
    end if

    if equal(lSearchColor, -1) then
        lSearchColor = call_func(r_getPixel,{lID, pXStart, pYStart})
    else
        lSearchColor = call_func(r_colorValue,{lSearchColor})
    end if

    if equal(lFloodColor, -1) then
        lBrush = 1
    elsif not equal(lFloodColor, {}) then
        call_proc(r_setPenColor,{ lID, lFloodColor })
    end if

    if lBrush != 0 then
        call_proc(r_createBrush,{ lID, w32True, pHDC })
    end if

    lRC = w32Func(xExtFloodFill, {pHDC, pXStart, pYStart, lSearchColor, pFillType})

    if lRelease != 0 then
        call_proc(r_releaseDC,{lID})
    end if

    return lRC
end function