--
-- Copyright 1992-1997 Silicon Graphics, Inc.
-- All Rights Reserved.
--
-- This is UNPUBLISHED PROPRIETARY SOURCE CODE of Silicon Graphics, Inc.;
-- the contents of this file may not be disclosed to third parties, copied or
-- duplicated in any form, in whole or in part, without the prior written
-- permission of Silicon Graphics, Inc.
--
-- RESTRICTED RIGHTS LEGEND:
-- Use, duplication or disclosure by the Government is subject to restrictions
-- as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
-- and Computer Software clause at DFARS 252.227-7013, and/or in similar or
-- successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
-- rights reserved under the Copyright Laws of the United States.
--
--
--
-- Euphoria version by Mic, 000304
--
-- updated 000315
-- updated 030122
-- updated 030124
-- updated 030130
-- updated 030204
-- updated 031022


include machine.e
include dll.e
include get.e
include msgbox.e
include ewin32api.ew


----------------------------------------------------- GL types -----------------------------------------------------------

global constant GLenum		= C_UINT,
		GLbitfield	= C_UINT,
		GLuint		= C_UINT,
		GLboolean	= C_INT,
		GLint 		= C_INT,
		GLsizei		= C_INT,
		GLshort		= C_SHORT,
		GLushort	= C_USHORT,
		GLfloat 	= C_FLOAT,
		GLclampf	= C_FLOAT,
		GLdouble	= C_DOUBLE
		
		
--------------------------------------------- Define OpenGL constants ----------------------------------------------------

-- Extensions 
global constant GL_VERSION_1_1 = 1 
global constant GL_EXT_abgr = 1 
global constant GL_EXT_bgra = 1 
global constant GL_EXT_packed_pixels = 1 
global constant GL_EXT_paletted_texture = 1 
global constant GL_EXT_vertex_array = 1 
global constant GL_SGI_compiled_vertex_array = 1 
global constant GL_SGI_cull_vertex = 1 
global constant GL_SGI_index_array_formats = 1 
global constant GL_SGI_index_func = 1 
global constant GL_SGI_index_material = 1 
global constant GL_SGI_index_texture = 1 
global constant GL_WIN_swap_hint = 1 

-- AttribMask 
global constant GL_CURRENT_BIT = #00000001 
global constant GL_POINT_BIT = #00000002 
global constant GL_LINE_BIT = #00000004 
global constant GL_POLYGON_BIT = #00000008 
global constant GL_POLYGON_STIPPLE_BIT = #00000010 
global constant GL_PIXEL_MODE_BIT = #00000020 
global constant GL_LIGHTING_BIT = #00000040 
global constant GL_FOG_BIT = #00000080 
global constant GL_DEPTH_BUFFER_BIT = #00000100 
global constant GL_ACCUM_BUFFER_BIT = #00000200 
global constant GL_STENCIL_BUFFER_BIT = #00000400 
global constant GL_VIEWPORT_BIT = #00000800 
global constant GL_TRANSFORM_BIT = #00001000 
global constant GL_ENABLE_BIT = #00002000 
global constant GL_COLOR_BUFFER_BIT = #00004000 
global constant GL_HINT_BIT = #00008000 
global constant GL_EVAL_BIT = #00010000 
global constant GL_LIST_BIT = #00020000 
global constant GL_TEXTURE_BIT = #00040000 
global constant GL_SCISSOR_BIT = #00080000 
global constant GL_ALL_ATTRIB_BITS = #000FFFFF 

-- ClearBufferMask 
--      GL_COLOR_BUFFER_BIT 
--      GL_ACCUM_BUFFER_BIT 
--      GL_STENCIL_BUFFER_BIT 
--      GL_DEPTH_BUFFER_BIT 

-- ClientAttribMask 
global constant GL_CLIENT_PIXEL_STORE_BIT = #00000001 
global constant GL_CLIENT_VERTEX_ARRAY_BIT = #00000002 
global constant GL_CLIENT_ALL_ATTRIB_BITS = #FFFFFFFF 

-- Boolean 
global constant GL_FALSE = 0 
global constant GL_TRUE = 1 

-- BeginMode 
global constant GL_POINTS = #0000 
global constant GL_LINES = #0001 
global constant GL_LINE_LOOP = #0002 
global constant GL_LINE_STRIP = #0003 
global constant GL_TRIANGLES = #0004 
global constant GL_TRIANGLE_STRIP = #0005 
global constant GL_TRIANGLE_FAN = #0006 
global constant GL_QUADS = #0007 
global constant GL_QUAD_STRIP = #0008 
global constant GL_POLYGON = #0009 

-- AccumOp 
global constant GL_ACCUM = #0100 
global constant GL_LOAD = #0101 
global constant GL_RETURN = #0102 
global constant GL_MULT = #0103 
global constant GL_ADD = #0104 

-- AlphaFunction 
global constant GL_NEVER = #0200 
global constant GL_LESS = #0201 
global constant GL_EQUAL = #0202 
global constant GL_LEQUAL = #0203 
global constant GL_GREATER = #0204 
global constant GL_NOTEQUAL = #0205 
global constant GL_GEQUAL = #0206 
global constant GL_ALWAYS = #0207 

-- BlendingFactorDest 
global constant GL_ZERO = 0 
global constant GL_ONE = 1 
global constant GL_SRC_COLOR = #0300 
global constant GL_ONE_MINUS_SRC_COLOR = #0301 
global constant GL_SRC_ALPHA = #0302 
global constant GL_ONE_MINUS_SRC_ALPHA = #0303 
global constant GL_DST_ALPHA = #0304 
global constant GL_ONE_MINUS_DST_ALPHA = #0305 

-- BlendingFactorSrc 
global constant GL_DST_COLOR = #0306 
global constant GL_ONE_MINUS_DST_COLOR = #0307 
global constant GL_SRC_ALPHA_SATURATE = #0308 

-- DrawBufferMode 
global constant GL_NONE = 0 
global constant GL_FRONT_LEFT = #0400 
global constant GL_FRONT_RIGHT = #0401 
global constant GL_BACK_LEFT = #0402 
global constant GL_BACK_RIGHT = #0403 
global constant GL_FRONT = #0404 
global constant GL_BACK = #0405 
global constant GL_LEFT = #0406 
global constant GL_RIGHT = #0407 
global constant GL_FRONT_AND_BACK = #0408 
global constant GL_AUX0 = #0409 
global constant GL_AUX1 = #040A 
global constant GL_AUX2 = #040B 
global constant GL_AUX3 = #040C 



-- ErrorCode 
global constant GL_NO_ERROR = 0 
global constant GL_INVALID_ENUM = #0500 
global constant GL_INVALID_VALUE = #0501 
global constant GL_INVALID_OPERATION = #0502 
global constant GL_STACK_OVERFLOW = #0503 
global constant GL_STACK_UNDERFLOW = #0504 
global constant GL_OUT_OF_MEMORY = #0505 


-- FeedbackType 
global constant GL_2D = #0600 
global constant GL_3D = #0601 
global constant GL_3D_COLOR = #0602 
global constant GL_3D_COLOR_TEXTURE = #0603 
global constant GL_4D_COLOR_TEXTURE = #0604 

-- FeedBackToken 
global constant GL_PASS_THROUGH_TOKEN = #0700 
global constant GL_POINT_TOKEN = #0701 
global constant GL_LINE_TOKEN = #0702 
global constant GL_POLYGON_TOKEN = #0703 
global constant GL_BITMAP_TOKEN = #0704 
global constant GL_DRAW_PIXEL_TOKEN = #0705 
global constant GL_COPY_PIXEL_TOKEN = #0706 
global constant GL_LINE_RESET_TOKEN = #0707 

-- FogMode 
--      GL_LINEAR 
global constant GL_EXP = #0800 
global constant GL_EXP2 = #0801 

-- FogParameter 
--      GL_FOG_COLOR 
--      GL_FOG_DENSITY 
--      GL_FOG_END 
--      GL_FOG_INDEX 
--      GL_FOG_MODE 
--      GL_FOG_START 

-- FrontFaceDirection 
global constant GL_CW = #0900 
global constant GL_CCW = #0901 


-- GetMapQuery 
global constant GL_COEFF = #0A00 
global constant GL_ORDER = #0A01 
global constant GL_DOMAIN = #0A02 

-- GetPixelMap 
global constant GL_PIXEL_MAP_I_TO_I = #0C70 
global constant GL_PIXEL_MAP_S_TO_S = #0C71 
global constant GL_PIXEL_MAP_I_TO_R = #0C72 
global constant GL_PIXEL_MAP_I_TO_G = #0C73 
global constant GL_PIXEL_MAP_I_TO_B = #0C74 
global constant GL_PIXEL_MAP_I_TO_A = #0C75 
global constant GL_PIXEL_MAP_R_TO_R = #0C76 
global constant GL_PIXEL_MAP_G_TO_G = #0C77 
global constant GL_PIXEL_MAP_B_TO_B = #0C78 
global constant GL_PIXEL_MAP_A_TO_A = #0C79 

-- GetPointervPName 
global constant GL_VERTEX_ARRAY_POINTER = #808E 
global constant GL_NORMAL_ARRAY_POINTER = #808F 
global constant GL_COLOR_ARRAY_POINTER = #8090 
global constant GL_INDEX_ARRAY_POINTER = #8091 
global constant GL_TEXTURE_COORD_ARRAY_POINTER = #8092 
global constant GL_EDGE_FLAG_ARRAY_POINTER = #8093 

-- GetPName 
global constant GL_CURRENT_COLOR = #0B00 
global constant GL_CURRENT_INDEX = #0B01 
global constant GL_CURRENT_NORMAL = #0B02 
global constant GL_CURRENT_TEXTURE_COORDS = #0B03 
global constant GL_CURRENT_RASTER_COLOR = #0B04 
global constant GL_CURRENT_RASTER_INDEX = #0B05 
global constant GL_CURRENT_RASTER_TEXTURE_COORDS = #0B06 
global constant GL_CURRENT_RASTER_POSITION = #0B07 
global constant GL_CURRENT_RASTER_POSITION_VALID = #0B08 
global constant GL_CURRENT_RASTER_DISTANCE = #0B09 
global constant GL_POINT_SMOOTH = #0B10 
global constant GL_POINT_SIZE = #0B11 
global constant GL_POINT_SIZE_RANGE = #0B12 
global constant GL_POINT_SIZE_GRANULARITY = #0B13 
global constant GL_LINE_SMOOTH = #0B20 
global constant GL_LINE_WIDTH = #0B21 
global constant GL_LINE_WIDTH_RANGE = #0B22 
global constant GL_LINE_WIDTH_GRANULARITY = #0B23 
global constant GL_LINE_STIPPLE = #0B24 
global constant GL_LINE_STIPPLE_PATTERN = #0B25 
global constant GL_LINE_STIPPLE_REPEAT = #0B26 
global constant GL_LIST_MODE = #0B30 
global constant GL_MAX_LIST_NESTING = #0B31 
global constant GL_LIST_BASE = #0B32 
global constant GL_LIST_INDEX = #0B33 
global constant GL_POLYGON_MODE = #0B40 
global constant GL_POLYGON_SMOOTH = #0B41 
global constant GL_POLYGON_STIPPLE = #0B42 
global constant GL_EDGE_FLAG = #0B43 
global constant GL_CULL_FACE = #0B44 
global constant GL_CULL_FACE_MODE = #0B45 
global constant GL_FRONT_FACE = #0B46 
global constant GL_LIGHTING = #0B50 
global constant GL_LIGHT_MODEL_LOCAL_VIEWER = #0B51 
global constant GL_LIGHT_MODEL_TWO_SIDE = #0B52 
global constant GL_LIGHT_MODEL_AMBIENT = #0B53 
global constant GL_SHADE_MODEL = #0B54 
global constant GL_COLOR_MATERIAL_FACE = #0B55 
global constant GL_COLOR_MATERIAL_PARAMETER = #0B56 
global constant GL_COLOR_MATERIAL = #0B57 
global constant GL_FOG = #0B60 
global constant GL_FOG_INDEX = #0B61 
global constant GL_FOG_DENSITY = #0B62 
global constant GL_FOG_START = #0B63 
global constant GL_FOG_END = #0B64 
global constant GL_FOG_MODE = #0B65 
global constant GL_FOG_COLOR = #0B66 
global constant GL_DEPTH_RANGE = #0B70 
global constant GL_DEPTH_TEST = #0B71 
global constant GL_DEPTH_WRITEMASK = #0B72 
global constant GL_DEPTH_CLEAR_VALUE = #0B73 
global constant GL_DEPTH_FUNC = #0B74 
global constant GL_ACCUM_CLEAR_VALUE = #0B80 
global constant GL_STENCIL_TEST = #0B90 
global constant GL_STENCIL_CLEAR_VALUE = #0B91 
global constant GL_STENCIL_FUNC = #0B92 
global constant GL_STENCIL_VALUE_MASK = #0B93 
global constant GL_STENCIL_FAIL = #0B94 
global constant GL_STENCIL_PASS_DEPTH_FAIL = #0B95 
global constant GL_STENCIL_PASS_DEPTH_PASS = #0B96 
global constant GL_STENCIL_REF = #0B97 
global constant GL_STENCIL_WRITEMASK = #0B98 
global constant GL_MATRIX_MODE = #0BA0 
global constant GL_NORMALIZE = #0BA1 
global constant GL_VIEWPORT = #0BA2 
global constant GL_MODELVIEW_STACK_DEPTH = #0BA3 
global constant GL_PROJECTION_STACK_DEPTH = #0BA4 
global constant GL_TEXTURE_STACK_DEPTH = #0BA5 
global constant GL_MODELVIEW_MATRIX = #0BA6 
global constant GL_PROJECTION_MATRIX = #0BA7 
global constant GL_TEXTURE_MATRIX = #0BA8 
global constant GL_ATTRIB_STACK_DEPTH = #0BB0 
global constant GL_CLIENT_ATTRIB_STACK_DEPTH = #0BB1 
global constant GL_ALPHA_TEST = #0BC0 
global constant GL_ALPHA_TEST_FUNC = #0BC1 
global constant GL_ALPHA_TEST_REF = #0BC2 
global constant GL_DITHER = #0BD0 
global constant GL_BLEND_DST = #0BE0 
global constant GL_BLEND_SRC = #0BE1 
global constant GL_BLEND = #0BE2 
global constant GL_LOGIC_OP_MODE = #0BF0 
global constant GL_INDEX_LOGIC_OP = #0BF1 
global constant GL_LOGIC_OP = GL_INDEX_LOGIC_OP 
global constant GL_COLOR_LOGIC_OP = #0BF2 
global constant GL_AUX_BUFFERS = #0C00 
global constant GL_DRAW_BUFFER = #0C01 
global constant GL_READ_BUFFER = #0C02 
global constant GL_SCISSOR_BOX = #0C10 
global constant GL_SCISSOR_TEST = #0C11 
global constant GL_INDEX_CLEAR_VALUE = #0C20 
global constant GL_INDEX_WRITEMASK = #0C21 
global constant GL_COLOR_CLEAR_VALUE = #0C22 
global constant GL_COLOR_WRITEMASK = #0C23 
global constant GL_INDEX_MODE = #0C30 
global constant GL_RGBA_MODE = #0C31 
global constant GL_DOUBLEBUFFER = #0C32 
global constant GL_STEREO = #0C33 
global constant GL_RENDER_MODE = #0C40 
global constant GL_PERSPECTIVE_CORRECTION_HINT = #0C50 
global constant GL_POINT_SMOOTH_HINT = #0C51 
global constant GL_LINE_SMOOTH_HINT = #0C52 
global constant GL_POLYGON_SMOOTH_HINT = #0C53 
global constant GL_FOG_HINT = #0C54 
global constant GL_TEXTURE_GEN_S = #0C60 
global constant GL_TEXTURE_GEN_T = #0C61 
global constant GL_TEXTURE_GEN_R = #0C62 
global constant GL_TEXTURE_GEN_Q = #0C63 
global constant GL_PIXEL_MAP_I_TO_I_SIZE = #0CB0 
global constant GL_PIXEL_MAP_S_TO_S_SIZE = #0CB1 
global constant GL_PIXEL_MAP_I_TO_R_SIZE = #0CB2 
global constant GL_PIXEL_MAP_I_TO_G_SIZE = #0CB3 
global constant GL_PIXEL_MAP_I_TO_B_SIZE = #0CB4 
global constant GL_PIXEL_MAP_I_TO_A_SIZE = #0CB5 
global constant GL_PIXEL_MAP_R_TO_R_SIZE = #0CB6 
global constant GL_PIXEL_MAP_G_TO_G_SIZE = #0CB7 
global constant GL_PIXEL_MAP_B_TO_B_SIZE = #0CB8 
global constant GL_PIXEL_MAP_A_TO_A_SIZE = #0CB9 
global constant GL_UNPACK_SWAP_BYTES = #0CF0 
global constant GL_UNPACK_LSB_FIRST = #0CF1 
global constant GL_UNPACK_ROW_LENGTH = #0CF2 
global constant GL_UNPACK_SKIP_ROWS = #0CF3 
global constant GL_UNPACK_SKIP_PIXELS = #0CF4 
global constant GL_UNPACK_ALIGNMENT = #0CF5 
global constant GL_PACK_SWAP_BYTES = #0D00 
global constant GL_PACK_LSB_FIRST = #0D01 
global constant GL_PACK_ROW_LENGTH = #0D02 
global constant GL_PACK_SKIP_ROWS = #0D03 
global constant GL_PACK_SKIP_PIXELS = #0D04 
global constant GL_PACK_ALIGNMENT = #0D05 
global constant GL_MAP_COLOR = #0D10 
global constant GL_MAP_STENCIL = #0D11 
global constant GL_INDEX_SHIFT = #0D12 
global constant GL_INDEX_OFFSET = #0D13 
global constant GL_RED_SCALE = #0D14 
global constant GL_RED_BIAS = #0D15 
global constant GL_ZOOM_X = #0D16 
global constant GL_ZOOM_Y = #0D17 
global constant GL_GREEN_SCALE = #0D18 
global constant GL_GREEN_BIAS = #0D19 
global constant GL_BLUE_SCALE = #0D1A 
global constant GL_BLUE_BIAS = #0D1B 
global constant GL_ALPHA_SCALE = #0D1C 
global constant GL_ALPHA_BIAS = #0D1D 
global constant GL_DEPTH_SCALE = #0D1E 
global constant GL_DEPTH_BIAS = #0D1F 
global constant GL_MAX_EVAL_ORDER = #0D30 
global constant GL_MAX_LIGHTS = #0D31 
global constant GL_MAX_CLIP_PLANES = #0D32 
global constant GL_MAX_TEXTURE_SIZE = #0D33 
global constant GL_MAX_PIXEL_MAP_TABLE = #0D34 
global constant GL_MAX_ATTRIB_STACK_DEPTH = #0D35 
global constant GL_MAX_MODELVIEW_STACK_DEPTH = #0D36 
global constant GL_MAX_NAME_STACK_DEPTH = #0D37 
global constant GL_MAX_PROJECTION_STACK_DEPTH = #0D38 
global constant GL_MAX_TEXTURE_STACK_DEPTH = #0D39 
global constant GL_MAX_VIEWPORT_DIMS = #0D3A 
global constant GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = #0D3B 
global constant GL_SUBPIXEL_BITS = #0D50 
global constant GL_INDEX_BITS = #0D51 
global constant GL_RED_BITS = #0D52 
global constant GL_GREEN_BITS = #0D53 
global constant GL_BLUE_BITS = #0D54 
global constant GL_ALPHA_BITS = #0D55 
global constant GL_DEPTH_BITS = #0D56 
global constant GL_STENCIL_BITS = #0D57 
global constant GL_ACCUM_RED_BITS = #0D58 
global constant GL_ACCUM_GREEN_BITS = #0D59 
global constant GL_ACCUM_BLUE_BITS = #0D5A 
global constant GL_ACCUM_ALPHA_BITS = #0D5B 
global constant GL_NAME_STACK_DEPTH = #0D70 
global constant GL_AUTO_NORMAL = #0D80 
global constant GL_MAP1_COLOR_4 = #0D90 
global constant GL_MAP1_INDEX = #0D91 
global constant GL_MAP1_NORMAL = #0D92 
global constant GL_MAP1_TEXTURE_COORD_1 = #0D93 
global constant GL_MAP1_TEXTURE_COORD_2 = #0D94 
global constant GL_MAP1_TEXTURE_COORD_3 = #0D95 
global constant GL_MAP1_TEXTURE_COORD_4 = #0D96 
global constant GL_MAP1_VERTEX_3 = #0D97 
global constant GL_MAP1_VERTEX_4 = #0D98 
global constant GL_MAP2_COLOR_4 = #0DB0 
global constant GL_MAP2_INDEX = #0DB1 
global constant GL_MAP2_NORMAL = #0DB2 
global constant GL_MAP2_TEXTURE_COORD_1 = #0DB3 
global constant GL_MAP2_TEXTURE_COORD_2 = #0DB4 
global constant GL_MAP2_TEXTURE_COORD_3 = #0DB5 
global constant GL_MAP2_TEXTURE_COORD_4 = #0DB6 
global constant GL_MAP2_VERTEX_3 = #0DB7 
global constant GL_MAP2_VERTEX_4 = #0DB8 
global constant GL_MAP1_GRID_DOMAIN = #0DD0 
global constant GL_MAP1_GRID_SEGMENTS = #0DD1 
global constant GL_MAP2_GRID_DOMAIN = #0DD2 
global constant GL_MAP2_GRID_SEGMENTS = #0DD3 
global constant GL_TEXTURE_1D = #0DE0 
global constant GL_TEXTURE_2D = #0DE1 
global constant GL_FEEDBACK_BUFFER_POINTER = #0DF0 
global constant GL_FEEDBACK_BUFFER_SIZE = #0DF1 
global constant GL_FEEDBACK_BUFFER_TYPE = #0DF2 
global constant GL_SELECTION_BUFFER_POINTER = #0DF3 
global constant GL_SELECTION_BUFFER_SIZE = #0DF4 
global constant GL_POLYGON_OFFSET_UNITS = #2A00 
global constant GL_POLYGON_OFFSET_POINT = #2A01 
global constant GL_POLYGON_OFFSET_LINE = #2A02 
global constant GL_POLYGON_OFFSET_FILL = #8037 
global constant GL_POLYGON_OFFSET_FACTOR = #8038 
global constant GL_TEXTURE_BINDING_1D = #8068 
global constant GL_TEXTURE_BINDING_2D = #8069 
global constant GL_VERTEX_ARRAY = #8074 
global constant GL_NORMAL_ARRAY = #8075 
global constant GL_COLOR_ARRAY = #8076 
global constant GL_INDEX_ARRAY = #8077 
global constant GL_TEXTURE_COORD_ARRAY = #8078 
global constant GL_EDGE_FLAG_ARRAY = #8079 
global constant GL_VERTEX_ARRAY_SIZE = #807A 
global constant GL_VERTEX_ARRAY_TYPE = #807B 
global constant GL_VERTEX_ARRAY_STRIDE = #807C 
global constant GL_NORMAL_ARRAY_TYPE = #807E 
global constant GL_NORMAL_ARRAY_STRIDE = #807F 
global constant GL_COLOR_ARRAY_SIZE = #8081 
global constant GL_COLOR_ARRAY_TYPE = #8082 
global constant GL_COLOR_ARRAY_STRIDE = #8083 
global constant GL_INDEX_ARRAY_TYPE = #8085 
global constant GL_INDEX_ARRAY_STRIDE = #8086 
global constant GL_TEXTURE_COORD_ARRAY_SIZE = #8088 
global constant GL_TEXTURE_COORD_ARRAY_TYPE = #8089 
global constant GL_TEXTURE_COORD_ARRAY_STRIDE = #808A 
global constant GL_EDGE_FLAG_ARRAY_STRIDE = #808C 
--      GL_VERTEX_ARRAY_COUNT_EXT 
--      GL_NORMAL_ARRAY_COUNT_EXT 
--      GL_COLOR_ARRAY_COUNT_EXT 
--      GL_INDEX_ARRAY_COUNT_EXT 
--      GL_TEXTURE_COORD_ARRAY_COUNT_EXT 
--      GL_EDGE_FLAG_ARRAY_COUNT_EXT 
--      GL_ARRAY_ELEMENT_LOCK_COUNT_SGI 
--      GL_ARRAY_ELEMENT_LOCK_FIRST_SGI 
--      GL_INDEX_TEST_SGI 
--      GL_INDEX_TEST_FUNC_SGI 
--      GL_INDEX_TEST_REF_SGI 
--      GL_INDEX_MATERIAL_SGI 
--      GL_INDEX_MATERIAL_FACE_SGI 
--      GL_INDEX_MATERIAL_PARAMETER_SGI 

-- GetTextureParameter 
--      GL_TEXTURE_MAG_FILTER 
--      GL_TEXTURE_MIN_FILTER 
--      GL_TEXTURE_WRAP_S 
--      GL_TEXTURE_WRAP_T 
global constant GL_TEXTURE_WIDTH = #1000 
global constant GL_TEXTURE_HEIGHT = #1001 
global constant GL_TEXTURE_INTERNAL_FORMAT = #1003 
global constant GL_TEXTURE_COMPONENTS = GL_TEXTURE_INTERNAL_FORMAT 
global constant GL_TEXTURE_BORDER_COLOR = #1004 
global constant GL_TEXTURE_BORDER = #1005 
global constant GL_TEXTURE_RED_SIZE = #805C 
global constant GL_TEXTURE_GREEN_SIZE = #805D 
global constant GL_TEXTURE_BLUE_SIZE = #805E 
global constant GL_TEXTURE_ALPHA_SIZE = #805F 
global constant GL_TEXTURE_LUMINANCE_SIZE = #8060 
global constant GL_TEXTURE_INTENSITY_SIZE = #8061 
global constant GL_TEXTURE_PRIORITY = #8066 
global constant GL_TEXTURE_RESIDENT = #8067 

-- HintMode 
global constant GL_DONT_CARE = #1100 
global constant GL_FASTEST = #1101 
global constant GL_NICEST = #1102 


-- LightParameter 
global constant GL_AMBIENT = #1200 
global constant GL_DIFFUSE = #1201 
global constant GL_SPECULAR = #1202 
global constant GL_POSITION = #1203 
global constant GL_SPOT_DIRECTION = #1204 
global constant GL_SPOT_EXPONENT = #1205 
global constant GL_SPOT_CUTOFF = #1206 
global constant GL_CONSTANT_ATTENUATION = #1207 
global constant GL_LINEAR_ATTENUATION = #1208 
global constant GL_QUADRATIC_ATTENUATION = #1209 

-- ListMode 
global constant GL_COMPILE = #1300 
global constant GL_COMPILE_AND_EXECUTE = #1301 

-- DataType 
global constant GL_BYTE = #1400 
global constant GL_UNSIGNED_BYTE = #1401 
global constant GL_SHORT = #1402 
global constant GL_UNSIGNED_SHORT = #1403 
global constant GL_INT = #1404 
global constant GL_UNSIGNED_INT = #1405 
global constant GL_FLOAT = #1406 
global constant GL_2_BYTES = #1407 
global constant GL_3_BYTES = #1408 
global constant GL_4_BYTES = #1409 
global constant GL_DOUBLE = #140A 
global constant GL_DOUBLE_EXT = #140A 


-- LogicOp 
global constant GL_CLEAR = #1500 
global constant GL_AND = #1501 
global constant GL_AND_REVERSE = #1502 
global constant GL_COPY = #1503 
global constant GL_AND_INVERTED = #1504 
global constant GL_NOOP = #1505 
global constant GL_XOR = #1506 
global constant GL_OR = #1507 
global constant GL_NOR = #1508 
global constant GL_EQUIV = #1509 
global constant GL_INVERT = #150A 
global constant GL_OR_REVERSE = #150B 
global constant GL_COPY_INVERTED = #150C 
global constant GL_OR_INVERTED = #150D 
global constant GL_NAND = #150E 
global constant GL_SET = #150F 


-- MaterialParameter 
global constant GL_EMISSION = #1600 
global constant GL_SHININESS = #1601 
global constant GL_AMBIENT_AND_DIFFUSE = #1602 
global constant GL_COLOR_INDEXES = #1603 

-- MatrixMode 
global constant GL_MODELVIEW = #1700 
global constant GL_PROJECTION = #1701 
global constant GL_TEXTURE = #1702 


-- PixelCopyType 
global constant GL_COLOR = #1800 
global constant GL_DEPTH = #1801 
global constant GL_STENCIL = #1802 

-- PixelFormat 
global constant GL_COLOR_INDEX = #1900 
global constant GL_STENCIL_INDEX = #1901 
global constant GL_DEPTH_COMPONENT = #1902 
global constant GL_RED = #1903 
global constant GL_GREEN = #1904 
global constant GL_BLUE = #1905 
global constant GL_ALPHA = #1906 
global constant GL_RGB = #1907 
global constant GL_RGBA = #1908 
global constant GL_LUMINANCE = #1909 
global constant GL_LUMINANCE_ALPHA = #190A 

-- PixelType 
global constant GL_BITMAP = #1A00 

-- PolygonMode 
global constant GL_POINT = #1B00 
global constant GL_LINE = #1B01 
global constant GL_FILL = #1B02 

-- RenderingMode 
global constant GL_RENDER = #1C00 
global constant GL_FEEDBACK = #1C01 
global constant GL_SELECT = #1C02 

-- ShadingModel 
global constant GL_FLAT = #1D00 
global constant GL_SMOOTH = #1D01 


-- StencilOp 
global constant GL_KEEP = #1E00 
global constant GL_REPLACE = #1E01 
global constant GL_INCR = #1E02 
global constant GL_DECR = #1E03 

-- StringName 
global constant GL_VENDOR = #1F00 
global constant GL_RENDERER = #1F01 
global constant GL_VERSION = #1F02 
global constant GL_EXTENSIONS = #1F03 

-- TextureCoordName 
global constant GL_S = #2000 
global constant GL_T = #2001 
global constant GL_R = #2002 
global constant GL_Q = #2003 

-- TextureEnvMode 
global constant GL_MODULATE = #2100 
global constant GL_DECAL = #2101 


-- TextureEnvParameter 
global constant GL_TEXTURE_ENV_MODE = #2200 
global constant GL_TEXTURE_ENV_COLOR = #2201 

-- TextureEnvTarget 
global constant GL_TEXTURE_ENV = #2300 

-- TextureGenMode 
global constant GL_EYE_LINEAR = #2400 
global constant GL_OBJECT_LINEAR = #2401 
global constant GL_SPHERE_MAP = #2402 

-- TextureGenParameter 
global constant GL_TEXTURE_GEN_MODE = #2500 
global constant GL_OBJECT_PLANE = #2501 
global constant GL_EYE_PLANE = #2502 

-- TextureMagFilter 
global constant GL_NEAREST = #2600 
global constant GL_LINEAR = #2601 

-- TextureMinFilter 
--      GL_NEAREST 
--      GL_LINEAR 
global constant GL_NEAREST_MIPMAP_NEAREST = #2700 
global constant GL_LINEAR_MIPMAP_NEAREST = #2701 
global constant GL_NEAREST_MIPMAP_LINEAR = #2702 
global constant GL_LINEAR_MIPMAP_LINEAR = #2703 

-- TextureParameterName 
global constant GL_TEXTURE_MAG_FILTER = #2800 
global constant GL_TEXTURE_MIN_FILTER = #2801 
global constant GL_TEXTURE_WRAP_S = #2802 
global constant GL_TEXTURE_WRAP_T = #2803 


-- TextureTarget 
global constant GL_PROXY_TEXTURE_1D = #8063 
global constant GL_PROXY_TEXTURE_2D = #8064 

-- TextureWrapMode 
global constant GL_CLAMP = #2900 
global constant GL_REPEAT = #2901 

-- PixelInternalFormat 
global constant GL_R3_G3_B2 = #2A10 
global constant GL_ALPHA4 = #803B 
global constant GL_ALPHA8 = #803C 
global constant GL_ALPHA12 = #803D 
global constant GL_ALPHA16 = #803E 
global constant GL_LUMINANCE4 = #803F 
global constant GL_LUMINANCE8 = #8040 
global constant GL_LUMINANCE12 = #8041 
global constant GL_LUMINANCE16 = #8042 
global constant GL_LUMINANCE4_ALPHA4 = #8043 
global constant GL_LUMINANCE6_ALPHA2 = #8044 
global constant GL_LUMINANCE8_ALPHA8 = #8045 
global constant GL_LUMINANCE12_ALPHA4 = #8046 
global constant GL_LUMINANCE12_ALPHA12 = #8047 
global constant GL_LUMINANCE16_ALPHA16 = #8048 
global constant GL_INTENSITY = #8049 
global constant GL_INTENSITY4 = #804A 
global constant GL_INTENSITY8 = #804B 
global constant GL_INTENSITY12 = #804C 
global constant GL_INTENSITY16 = #804D 
global constant GL_RGB4 = #804F 
global constant GL_RGB5 = #8050 
global constant GL_RGB8 = #8051 
global constant GL_RGB10 = #8052 
global constant GL_RGB12 = #8053 
global constant GL_RGB16 = #8054 
global constant GL_RGBA2 = #8055 
global constant GL_RGBA4 = #8056 
global constant GL_RGB5_A1 = #8057 
global constant GL_RGBA8 = #8058 
global constant GL_RGB10_A2 = #8059 
global constant GL_RGBA12 = #805A 
global constant GL_RGBA16 = #805B 

-- InterleavedArrayFormat 
global constant GL_V2F = #2A20 
global constant GL_V3F = #2A21 
global constant GL_C4UB_V2F = #2A22 
global constant GL_C4UB_V3F = #2A23 
global constant GL_C3F_V3F = #2A24 
global constant GL_N3F_V3F = #2A25 
global constant GL_C4F_N3F_V3F = #2A26 
global constant GL_T2F_V3F = #2A27 
global constant GL_T4F_V4F = #2A28 
global constant GL_T2F_C4UB_V3F = #2A29 
global constant GL_T2F_C3F_V3F = #2A2A 
global constant GL_T2F_N3F_V3F = #2A2B 
global constant GL_T2F_C4F_N3F_V3F = #2A2C 
global constant GL_T4F_C4F_N3F_V4F = #2A2D 

-- VertexPointerType 

-- ClipPlaneName 
global constant GL_CLIP_PLANE0 = #3000 
global constant GL_CLIP_PLANE1 = #3001 
global constant GL_CLIP_PLANE2 = #3002 
global constant GL_CLIP_PLANE3 = #3003 
global constant GL_CLIP_PLANE4 = #3004 
global constant GL_CLIP_PLANE5 = #3005 

-- LightName 
global constant GL_LIGHT0 = #4000 
global constant GL_LIGHT1 = #4001 
global constant GL_LIGHT2 = #4002 
global constant GL_LIGHT3 = #4003 
global constant GL_LIGHT4 = #4004 
global constant GL_LIGHT5 = #4005 
global constant GL_LIGHT6 = #4006 
global constant GL_LIGHT7 = #4007 



--------------------------------------------------------------------------------------------------------------------------



------------------------------------ Link functions from OpenGl32.dll ----------------------------------------------------

atom opengl32

opengl32 = open_dll("opengl32.dll")
if opengl32 = NULL then
	if message_box("Missing a required dll file: opengl32.dll","Error",or_bits(MB_OK,MB_ICONERROR)) then end if
 	abort(1)
end if


global integer wglCopyContext,wglCreateContext,wglCreateLayerContext,
               wglDeleteContext,wglGetCurrentContext,wglGetCurrentDC,
               wglGetProcAddress,wglMakeCurrent,wglShareLists,
               wglSwapBuffers,wglSwapLayerBuffers,wglUseFontOutlines,
               wglUseFontBitmaps,

               glAccum,glAlphaFunc,glAreTexturesResident,glArrayElement, 
               glBegin,glBindTexture,glBitmap,glBlendFunc, 
               glCallList,glCallLists,glClear,glClearAccum, 
               glClearColor,glClearDepth,glClearIndex,glClearStencil, 
               glClipPlane,glColor3b,glColor3bv,glColor3d, 
               glColor3dv,glColor3f,glColor3fv,glColor3i, 
               glColor3iv,glColor3s,glColor3sv,glColor3ub, 
               glColor3ubv,glColor3ui,glColor3uiv,glColor3us,glColor3usv, 
               glColor4b,glColor4bv,glColor4d,glColor4dv,
               glColor4f,glColor4fv,glColor4i,glColor4iv,
               glColor4s,glColor4sv,glColor4ub,glColor4ubv,
               glColor4ui,glColor4uiv,glColor4us,glColor4usv,
               glColorMask,glColorMaterial,glColorPointer,glCopyPixels, 
               glCopyTexImage1D,glCopyTexImage2D,glCopyTexSubImage1D,glCopyTexSubImage2D, 
               glCullFace,glDeleteLists,glDeleteTextures,glDepthFunc, 
               glDepthMask,glDepthRange,glDisable,glDisableClientState, 
               glDrawArrays,glDrawBuffer,glDrawElements,glDrawPixels, 
               glEdgeFlag,glEdgeFlagPointer,glEdgeFlagv,glEnable, 
               glEnableClientState,glEnd,glEndList,glEvalCoord1d, 
               glEvalCoord1dv,glEvalCoord1f,glEvalCoord1fv,glEvalCoord2d, 
               glEvalCoord2dv,glEvalCoord2f,glEvalCoord2fv,glEvalMesh1, 
               glEvalMesh2,glEvalPoint1,glEvalPoint2,
               glFeedbackBuffer,glFinish,glFlush,glFogf,
               glFogfv,glFogi,glFogiv,glFrontFace, 
               glFrustum,glGenLists,glGenTextures,glGetBooleanv, 
               glGetClipPlane,glGetDoublev,glGetError,glGetFloatv, 
               glGetIntegerv,glGetLightfv,glGetLightiv,glGetMapdv,
               glGetMapfv,glGetMapiv,glGetMaterialfv,glGetMaterialiv, 
               glGetPixelMapfv,glGetPixelMapuiv,glGetPixelMapusv,glGetPointerv, 
               glGetPolygonStipple,glGetString,glGetTexEnvfv,glGetTexEnviv,
               glGetTexGendv,glGetTexGenfv,glGetTexGeniv,glGetTexImage, 
               glGetTexLevelParameterfv,glGetTexLevelParameteriv,glGetTexParameterfv, 
               glGetTexParameteriv,glHint,glIndexMask,glIndexPointer, 
               glIndexd,glIndexdv,glIndexf,glIndexfv,glIndexi, 
               glIndexiv,glIndexs,glIndexsv,glIndexub,glIndexubv, 
               glInitNames,glInterleavedArrays,glIsEnabled,glIsList, 
               glIsTexture,glLightModelf,glLightModelfv,glLightModeli,
               glLightModeliv,glLightf,glLightfv,glLighti,glLightiv, 
               glLineStipple,glLineWidth,glListBase,glLoadIdentity,
               glLoadMatrixd,glLoadMatrixf,glLoadName,glLogicOp, 
               glMap1d,glMap1f,glMap2d,glMap2f,glMapGrid1d, 
               glMapGrid1f,glMapGrid2d,glMapGrid2f,glMaterialf,
               glMaterialfv,glMateriali,glMaterialiv,glMatrixMode, 
               glMultMatrixd,glMultMatrixf,glNewList,
               glPixelStorei,glRasterPos2f,glRasterPos2i,

               glNormal3b,glNormal3bv,glNormal3d,glNormal3dv, 
               glNormal3f,glNormal3fv,glNormal3i,glNormal3iv, 
               glNormal3s,glNormal3sv,glNormalPointer,
 
               glOrtho, 
	       glPointSize,
               glPolygonMode,glPopMatrix,glPushMatrix,

               glReadBuffer,glReadPixels,
               glRectd,glRectdv,glRectf,glRectfv, 
               glRecti,glRectiv,glRects,glRectsv, 
               glRenderMode,glRotated,glRotatef,glScaled, 
               glScalef, 

               glScissor,glShadeModel,glSelectBuffer,
               glStencilFunc,glStencilMask,glStencilOp,
               glTranslated,glTranslatef, 

               glTexCoord1d,glTexCoord1dv,glTexCoord1f,glTexCoord1fv,
               glTexCoord1i,glTexCoord1iv,glTexCoord1s,glTexCoord1sv,
               glTexCoord2d,glTexCoord2dv,glTexCoord2f,glTexCoord2fv,
               glTexCoord2i,glTexCoord2iv,glTexCoord2s,glTexCoord2sv,
               glTexCoord3d,glTexCoord3dv,glTexCoord3f,glTexCoord3fv,
               glTexCoord3i,glTexCoord3iv,glTexCoord3s,glTexCoord3sv,
               glTexCoord4d,glTexCoord4dv,glTexCoord4f,glTexCoord4fv,
               glTexCoord4i,glTexCoord4iv,glTexCoord4s,glTexCoord4sv,
               glTexCoordPointer,glTexEnvf,glTexEnvfv,glTexEnvi,glTexEnviv,
               glTexGend,glTexGendv,glTexGenf,glTexGenfv,glTexGeni,
               glTexGeniv,glTexImage1D,glTexImage2D,glTexParameterf,
               glTexParameterfv,glTexParameteri,glTexParameteriv,
               glTexSubImage1D,glTexSubImage2D,

               glVertex2d,glVertex2dv,glVertex2f,glVertex2fv, 
               glVertex2i,glVertex2iv,glVertex2s,glVertex2sv, 
               glVertex3d,glVertex3dv,glVertex3f,glVertex3fv, 
               glVertex3i,glVertex3iv,glVertex3s,glVertex3sv, 
               glVertex4d,glVertex4dv,glVertex4f,glVertex4fv, 
               glVertex4i,glVertex4iv,glVertex4s,glVertex4sv,
               glViewport 


glGetDoublev = link_c_proc(opengl32,"glGetDoublev",{ GLenum, C_POINTER})
glMultMatrixd = link_c_proc(opengl32,"glMultMatrixd",{C_POINTER})

glLoadMatrixd= link_c_proc(opengl32,"glLoadMatrixd",{C_POINTER})

glAlphaFunc = link_c_proc(opengl32,"glAlphaFunc",{GLenum,GLclampf})

glColor4ub = link_c_proc(opengl32,"glColor4ub",{C_UCHAR,C_UCHAR,C_UCHAR,C_UCHAR})
glColor4ubv= link_c_proc(opengl32,"glColor4ubv",{C_POINTER})

glAccum		= link_c_proc(opengl32,"glAccum",{ GLenum,GLfloat })
glBegin		= link_c_proc(opengl32,"glBegin",{ C_UINT })
glBindTexture	= link_c_proc(opengl32,"glBindTexture",{ C_INT,C_UINT })
glBitmap	= link_c_proc(opengl32,"glBitmap",{ C_INT,C_INT,C_FLOAT,C_FLOAT,C_FLOAT,C_FLOAT,C_POINTER })
glBlendFunc	= link_c_proc(opengl32,"glBlendFunc",{C_INT,C_INT})
glCallList	= link_c_proc(opengl32,"glCallList",{ C_UINT })
glCallLists	= link_c_proc(opengl32,"glCallLists",{C_INT,C_INT,C_POINTER})
glClear		= link_c_proc(opengl32,"glClear",{ C_UINT })
glClearAccum	= link_c_proc(opengl32,"glClearAccum",{ GLfloat,GLfloat,GLfloat,GLfloat })
glClearColor	= link_c_proc(opengl32,"glClearColor",{ GLclampf,GLclampf,GLclampf,GLclampf })
glClearDepth	= link_c_proc(opengl32,"glClearDepth",{ C_DOUBLE })
glColor3b	= link_c_proc(opengl32,"glColor3b",{ C_CHAR,C_CHAR,C_CHAR })
glColor3ub	= link_c_proc(opengl32,"glColor3b",{ C_UCHAR,C_UCHAR,C_UCHAR })
glColor3d	= link_c_proc(opengl32,"glColor3d",{ C_DOUBLE,C_DOUBLE,C_DOUBLE })
glColor3f	= link_c_proc(opengl32,"glColor3f",{ C_FLOAT,C_FLOAT,C_FLOAT })
glColor3i	= link_c_proc(opengl32,"glColor3i",{ C_INT,C_INT,C_INT })
glColor4b	= link_c_proc(opengl32,"glColor4b",{ C_CHAR,C_CHAR,C_CHAR,C_CHAR })
glColor4d	= link_c_proc(opengl32,"glColor4d",{ C_DOUBLE,C_DOUBLE,C_DOUBLE,C_DOUBLE })
glColor4f	= link_c_proc(opengl32,"glColor4f",{ C_FLOAT,C_FLOAT,C_FLOAT,C_FLOAT })
glColor4i	= link_c_proc(opengl32,"glColor4i",{ C_INT,C_INT,C_INT,C_INT })
glCopyTexImage2D= link_c_proc(opengl32,"glCopyTexImage2D",{C_INT,C_INT,C_INT,C_INT,C_INT,C_INT,C_INT,C_INT})
glCullFace	= link_c_proc(opengl32,"glCullFace",{C_INT})
glDeleteLists	= link_c_proc(opengl32,"glDeleteLists",{ C_INT,C_INT })
glDeleteTextures= link_c_proc(opengl32,"glDeleteTextures",{C_INT,C_POINTER})
glDepthFunc	= link_c_proc(opengl32,"glDepthFunc",{ C_INT })
glDepthMask	= link_c_proc(opengl32,"glDepthMask",{C_INT})
glDisable	= link_c_proc(opengl32,"glDisable",{ C_UINT })
glEnable	= link_c_proc(opengl32,"glEnable",{ C_UINT })
glEnd		= link_c_proc(opengl32,"glEnd",{  })
glEndList	= link_c_proc(opengl32,"glEndList",{  })
glEvalMesh2	= link_c_proc(opengl32,"glEvalMesh2",repeat(C_INT,5))
glFinish	= link_c_proc(opengl32,"glFinish",{  })
glFlush		= link_c_proc(opengl32,"glFlush",{  })
glFogf		= link_c_proc(opengl32,"glFogf",{ GLenum,GLfloat })
glFogfv		= link_c_proc(opengl32,"glFogfv",{ C_INT,C_POINTER })
glFogi		= link_c_proc(opengl32,"glFogi",{ C_INT,C_INT })
glFogiv		= link_c_proc(opengl32,"glFogiv",{ C_INT,C_POINTER })
glFrontFace	= link_c_proc(opengl32,"glFrontFace",{ C_INT })
glFrustum	= link_c_proc(opengl32,"glFrustum",repeat(C_DOUBLE,6))
glGenLists	= link_c_func(opengl32,"glGenLists",{ C_INT },C_INT)
glGenTextures	= link_c_proc(opengl32,"glGenTextures",{ C_INT,C_POINTER })
glGetFloatv	= link_c_proc(opengl32,"glGetFloatv",{C_INT,C_POINTER})
glGetString	= link_c_func(opengl32,"glGetString",{GLenum},C_POINTER)
glHint		= link_c_proc(opengl32,"glHint",{ C_INT,C_INT })
glIndexi	= link_c_proc(opengl32,"glIndexi",{ C_INT })
glLightf	= link_c_proc(opengl32,"glLightf",{ GLenum,GLenum,GLfloat })
glLightfv	= link_c_proc(opengl32,"glLightfv",{ C_INT,C_INT,C_POINTER })
glLightModelf	= link_c_proc(opengl32,"glLightModelf",{ C_INT,C_FLOAT })
glLightModelfv	= link_c_proc(opengl32,"glLightModelfv",{ C_INT,C_POINTER })
glLineWidth	= link_c_proc(opengl32,"glLineWidth",{C_FLOAT})
glListBase	= link_c_proc(opengl32,"glListBase",{ C_UINT })
glLoadIdentity	= link_c_proc(opengl32,"glLoadIdentity",{ }) 
glMap2f		= link_c_proc(opengl32,"glMap2f",{ GLenum,GLfloat,GLfloat,GLint,GLint,GLfloat,GLfloat,GLint,GLint,C_POINTER })
glMapGrid2f	= link_c_proc(opengl32,"glMapGrid2f",{ C_INT,C_FLOAT,C_FLOAT,C_INT,C_FLOAT,C_INT }) 
glMaterialf	= link_c_proc(opengl32,"glMaterialf",{ C_UINT,C_UINT,C_FLOAT }) 
glMaterialfv	= link_c_proc(opengl32,"glMaterialfv",{ C_INT,C_INT,C_POINTER })	
glMateriali	= link_c_proc(opengl32,"glMateriali",{ C_UINT,C_UINT,C_INT }) 
glMatrixMode	= link_c_proc(opengl32,"glMatrixMode",{ C_UINT })
glNewList	= link_c_proc(opengl32,"glNewList",{ C_UINT,C_INT })
glNormal3b	= link_c_proc(opengl32,"glNormal3b",{ C_CHAR,C_CHAR,C_CHAR })
glNormal3d	= link_c_proc(opengl32,"glNormal3d",{ C_DOUBLE,C_DOUBLE,C_DOUBLE })
glNormal3f	= link_c_proc(opengl32,"glNormal3f",{ C_FLOAT,C_FLOAT,C_FLOAT })
glNormal3fv	= link_c_proc(opengl32,"glNormal3fv",{ C_POINTER })
glNormal3i	= link_c_proc(opengl32,"glNormal3i",{ C_INT,C_INT,C_INT })
glOrtho		= link_c_proc(opengl32,"glOrtho",repeat(C_DOUBLE,6))
glPixelStorei	= link_c_proc(opengl32,"glPixelStorei",{ C_INT,C_INT })
glPointSize	= link_c_proc(opengl32,"glPointSize",{GLfloat})			-- Fixed: was GL_FLOAT /2003-10-09
glPolygonMode	= link_c_proc(opengl32,"glPolygonMode",{ C_INT,C_INT })
glPopMatrix	= link_c_proc(opengl32,"glPopMatrix",{ })
glPushMatrix	= link_c_proc(opengl32,"glPushMatrix",{ })
glRasterPos2f	= link_c_proc(opengl32,"glRasterPos2f",{ C_FLOAT,C_FLOAT })
glRasterPos2i	= link_c_proc(opengl32,"glRasterPos2i",{ C_INT,C_INT })
glReadBuffer	= link_c_proc(opengl32,"glReadBuffer",{ C_INT })
glReadPixels	= link_c_proc(opengl32,"glReadPixels",repeat(C_INT,6) & C_POINTER)
glRectd		= link_c_proc(opengl32,"glRectd",repeat(C_DOUBLE,4))
glRectdv	= link_c_proc(opengl32,"glRectdv",{ C_POINTER })
glRectf		= link_c_proc(opengl32,"glRectf",{ C_FLOAT,C_FLOAT,C_FLOAT,C_FLOAT })
glRectfv	= link_c_proc(opengl32,"glRectfv",{ C_POINTER })
glRecti		= link_c_proc(opengl32,"glRecti",repeat(C_INT,4))
glRectiv	= link_c_proc(opengl32,"glRectiv",{ C_POINTER })
glRects		= link_c_proc(opengl32,"glRects",repeat(C_SHORT,4))
glRectsv	= link_c_proc(opengl32,"glRectsv",{ C_POINTER })
glRenderMode	= link_c_func(opengl32,"glRenderMode",{ C_INT },C_INT)
glRotated	= link_c_proc(opengl32,"glRotated",{ C_DOUBLE,C_DOUBLE,C_DOUBLE,C_DOUBLE })
glRotatef	= link_c_proc(opengl32,"glRotatef",{ C_FLOAT,C_FLOAT,C_FLOAT,C_FLOAT })
glScalef	= link_c_proc(opengl32,"glScalef",{ C_FLOAT,C_FLOAT,C_FLOAT })
glScissor	= link_c_proc(opengl32,"glScissor",repeat(C_INT,4))
glSelectBuffer	= link_c_proc(opengl32,"glSelectBuffer",{ C_INT,C_POINTER })
glShadeModel	= link_c_proc(opengl32,"glShadeModel",{ C_UINT })
glStencilFunc	= link_c_proc(opengl32,"glStencilFunc",{ C_INT,C_INT,C_UINT })
glStencilMask	= link_c_proc(opengl32,"glStencilMask",{ C_UINT })
glStencilOp	= link_c_proc(opengl32,"glStencilOp",{ C_INT,C_INT,C_INT })
glTexCoord1d	= link_c_proc(opengl32,"glTexCoord1d",{ C_DOUBLE })
glTexCoord1dv	= link_c_proc(opengl32,"glTexCoord1dv",{ C_POINTER })
glTexCoord1f	= link_c_proc(opengl32,"glTexCoord2f",{ C_FLOAT })
glTexCoord1fv	= link_c_proc(opengl32,"glTexCoord1fv",{ C_POINTER })
glTexCoord1i	= link_c_proc(opengl32,"glTexCoord1i",{ C_INT })
glTexCoord1iv	= link_c_proc(opengl32,"glTexCoord1iv",{ C_POINTER })
glTexCoord1s	= link_c_proc(opengl32,"glTexCoord1s",{ C_SHORT })
glTexCoord1sv	= link_c_proc(opengl32,"glTexCoord1sv",{ C_POINTER })
glTexCoord2d	= link_c_proc(opengl32,"glTexCoord2d",{ C_DOUBLE,C_DOUBLE })
glTexCoord2dv	= link_c_proc(opengl32,"glTexCoord2dv",{ C_POINTER })
glTexCoord2f	= link_c_proc(opengl32,"glTexCoord2f",{ C_FLOAT,C_FLOAT })
glTexCoord2fv	= link_c_proc(opengl32,"glTexCoord2fv",{ C_POINTER })
glTexCoord2i	= link_c_proc(opengl32,"glTexCoord2i",{ C_INT,C_INT })
glTexCoord2iv	= link_c_proc(opengl32,"glTexCoord2iv",{ C_POINTER })
glTexCoord2s	= link_c_proc(opengl32,"glTexCoord2s",{ C_SHORT,C_SHORT })
glTexCoord2sv	= link_c_proc(opengl32,"glTexCoord2sv",{ C_POINTER })
glTexCoord3d	= link_c_proc(opengl32,"glTexCoord3d",{ C_DOUBLE,C_DOUBLE,C_DOUBLE })
glTexCoord3dv	= link_c_proc(opengl32,"glTexCoord3dv",{ C_POINTER })
glTexCoord3f	= link_c_proc(opengl32,"glTexCoord3f",{ C_FLOAT,C_FLOAT,C_FLOAT })
glTexCoord3fv	= link_c_proc(opengl32,"glTexCoord3fv",{ C_POINTER })
glTexCoord3i	= link_c_proc(opengl32,"glTexCoord3i",{ C_INT,C_INT,C_INT })
glTexCoord3iv	= link_c_proc(opengl32,"glTexCoord3iv",{ C_POINTER })
glTexCoord3s	= link_c_proc(opengl32,"glTexCoord3s",{ C_SHORT,C_SHORT,C_SHORT })
glTexCoord3sv	= link_c_proc(opengl32,"glTexCoord3sv",{ C_POINTER })
glTexCoord4d	= link_c_proc(opengl32,"glTexCoord4d",repeat(C_DOUBLE,4))
glTexCoord4dv	= link_c_proc(opengl32,"glTexCoord4dv",{ C_POINTER })
glTexCoord4f	= link_c_proc(opengl32,"glTexCoord4i",repeat(C_FLOAT,4))
glTexCoord4fv	= link_c_proc(opengl32,"glTexCoord4fv",{ C_POINTER })
glTexCoord4i	= link_c_proc(opengl32,"glTexCoord4i",repeat(C_INT,4))
glTexCoord4iv	= link_c_proc(opengl32,"glTexCoord4iv",{ C_POINTER })
glTexCoord4s	= link_c_proc(opengl32,"glTexCoord4s",repeat(C_SHORT,4))
glTexCoord4sv	= link_c_proc(opengl32,"glTexCoord4sv",{ C_POINTER })
glTexEnvf	= link_c_proc(opengl32,"glTexEnvf",{ C_INT,C_INT,GLfloat })
glTexEnvi	= link_c_proc(opengl32,"glTexEnvi",{ C_INT,C_INT,C_INT })
glTexGeni	= link_c_proc(opengl32,"glTexGeni",{C_INT,C_INT,C_INT})
glTexImage1D	= link_c_proc(opengl32,"glTexImage1D",repeat(C_INT,7) & C_POINTER)
glTexImage2D	= link_c_proc(opengl32,"glTexImage2D",repeat(C_INT,8) & C_POINTER)
glTexParameterf	= link_c_proc(opengl32,"glTexParameterf",{ C_INT,C_INT,C_FLOAT })
glTexParameterfv= link_c_proc(opengl32,"glTexParameterfv",{ C_INT,C_INT,C_POINTER })
glTexParameteri	= link_c_proc(opengl32,"glTexParameteri",{ C_INT,C_INT,C_INT })
glTexParameteriv= link_c_proc(opengl32,"glTexParameteriv",{ C_INT,C_INT,C_POINTER })
glTranslated	= link_c_proc(opengl32,"glTranslated",{ C_DOUBLE,C_DOUBLE,C_DOUBLE })
glTranslatef	= link_c_proc(opengl32,"glTranslatef",{ C_FLOAT,C_FLOAT,C_FLOAT })
glVertex2d	= link_c_proc(opengl32,"glVertex2d",{ C_DOUBLE,C_DOUBLE })
glVertex2dv	= link_c_proc(opengl32,"glVertex2dv",{ C_POINTER })
glVertex2f	= link_c_proc(opengl32,"glVertex2f",{ C_FLOAT,C_FLOAT })
glVertex2fv	= link_c_proc(opengl32,"glVertex2fv",{ C_POINTER })
glVertex2i	= link_c_proc(opengl32,"glVertex2i",{ C_INT,C_INT })
glVertex2iv	= link_c_proc(opengl32,"glVertex2iv",{ C_POINTER })
glVertex2s	= link_c_proc(opengl32,"glVertex2s",{ C_SHORT,C_SHORT })
glVertex2sv	= link_c_proc(opengl32,"glVertex2sv",{ C_POINTER })
glVertex3d	= link_c_proc(opengl32,"glVertex3d",{ C_DOUBLE,C_DOUBLE,C_DOUBLE })
glVertex3dv	= link_c_proc(opengl32,"glVertex3dv",{ C_POINTER })
glVertex3f	= link_c_proc(opengl32,"glVertex3f",{ C_FLOAT,C_FLOAT,C_FLOAT })
glVertex3fv	= link_c_proc(opengl32,"glVertex3fv",{ C_POINTER })
glVertex3i	= link_c_proc(opengl32,"glVertex3i",{ C_INT,C_INT,C_INT })
glVertex3iv	= link_c_proc(opengl32,"glVertex3iv",{ C_POINTER })
glVertex3s	= link_c_proc(opengl32,"glVertex3s",{ C_SHORT,C_SHORT,C_SHORT })
glVertex3sv	= link_c_proc(opengl32,"glVertex3sv",{ C_POINTER })
glVertex4d	= link_c_proc(opengl32,"glVertex4d",{ C_DOUBLE,C_DOUBLE,C_DOUBLE,C_DOUBLE })
glVertex4dv	= link_c_proc(opengl32,"glVertex4dv",{ C_POINTER })
glVertex4f	= link_c_proc(opengl32,"glVertex4f",{ C_FLOAT,C_FLOAT,C_FLOAT,C_FLOAT })
glVertex4fv	= link_c_proc(opengl32,"glVertex4fv",{ C_POINTER })
glVertex4i	= link_c_proc(opengl32,"glVertex4i",{ C_INT,C_INT,C_INT,C_INT })
glVertex4iv	= link_c_proc(opengl32,"glVertex4iv",{ C_POINTER })
glVertex4s	= link_c_proc(opengl32,"glVertex4s",{ C_SHORT,C_SHORT,C_SHORT,C_SHORT })
glVertex4sv	= link_c_proc(opengl32,"glVertex4sv",{ C_POINTER })
glViewport	= link_c_proc(opengl32,"glViewport",{ C_INT,C_INT,C_INT,C_INT })

-- "Wiggle" functions               
wglCopyContext 	= link_c_func(opengl32, "wglCopyContext", {C_UINT, C_UINT, C_UINT}, C_INT)
wglCreateContext= link_c_func(opengl32,"wglCreateContext",{ C_INT },C_INT)
wglCreateLayerContext 	= link_c_func(opengl32, "wglCreateLayerContext", {C_UINT, C_INT}, C_UINT)
wglDeleteContext= link_c_func(opengl32,"wglDeleteContext",{ C_INT },C_INT)
wglGetCurrentContext 	= link_c_func(opengl32, "wglGetCurrentContext", {}, C_UINT)
wglGetCurrentDC = link_c_func(opengl32, "wglGetCurrentDC", {}, C_UINT)
wglGetProcAddress= link_c_func(opengl32, "wglGetProcAddress", {C_POINTER}, C_POINTER)
wglMakeCurrent	= link_c_proc(opengl32,"wglMakeCurrent",{ C_INT,C_INT })
wglShareLists 	= link_c_func(opengl32, "wglShareLists", {C_UINT, C_UINT}, C_INT)
wglUseFontOutlines = link_c_func(opengl32,"wglUseFontOutlinesA",{ C_UINT,C_INT,C_INT,C_INT,C_FLOAT,C_FLOAT,C_INT,C_POINTER },C_INT)
wglUseFontBitmaps = link_c_func(opengl32,"wglUseFontBitmapsA",{ C_UINT,C_UINT,C_UINT,C_UINT },C_INT)




constant gl_vector_buffer = allocate(512)

procedure gl_pokef32(atom dest,sequence data)
	for i = 1 to length(data) do
		poke(dest,atom_to_float32(data[i]))
		dest += 4
	end for
end procedure



global procedure gl_getDoublev(atom pname,atom params)
	c_proc(glGetDoublev,{pname,params})
end procedure


global procedure gl_color3b(integer r, integer g,integer b)
	c_proc(glColor3b,{r,g,b})
end procedure


global procedure gl_color4ub(integer r, integer g,integer b, integer a)
	c_proc(glColor4ub,{r,g,b,a})
end procedure

global procedure gl_color4ubv(atom v)
	c_proc(glColor4ubv,{v})
end procedure




global procedure gl_multMatrixd (atom m)
	c_proc(glMultMatrixd,{m})
end procedure


global procedure gl_loadMatrixd (atom m)
	c_proc(glLoadMatrixd,{m})
end procedure

global procedure gl_alphaFunc (atom fun,atom ref)
	c_proc(glAlphaFunc,{fun,ref})
end procedure






global procedure gl_accum(integer op,atom val)
	c_proc(glAccum,{op,val})
end procedure

global procedure gl_begin(integer what)
 	c_proc(glBegin,{ what })
end procedure

global procedure gl_bindTexture(integer target,atom tex)
	c_proc(glBindTexture,{target,tex})
end procedure

global procedure gl_bitmap(integer width,integer height,atom xorig,atom yorig,atom xmove,atom ymove,atom bitmap)
	c_proc(glBitmap,{width,height,xorig,yorig,xmove,ymove,bitmap})
end procedure

global procedure gl_blendFunc(integer sfactor, integer dfactor)
	c_proc(glBlendFunc,{sfactor,dfactor})
end procedure

global procedure gl_callList(integer list)
	c_proc(glCallList,{list})
end procedure

global procedure gl_callLists(integer n,integer typ,atom lists)
	c_proc(glCallLists,{n,typ,lists})
end procedure

global procedure gl_clear(integer mask)
	c_proc(glClear,{mask})
end procedure

global procedure gl_clearAccum(atom r,atom g,atom b,atom a)
 	c_proc(glClearAccum,{r,g,b,a})
end procedure

global procedure gl_clearColor(atom r,atom g,atom b,atom a)
 	c_proc(glClearColor,{r,g,b,a})
end procedure

global procedure gl_clearDepth(atom a)
	c_proc(glClearDepth,{a})
end procedure

global procedure gl_color3ub(sequence col)
 	c_proc(glColor3ub,col)
end procedure

global procedure gl_color3f(sequence col)
 	c_proc(glColor3f,col)
end procedure

global procedure gl_color4f(sequence col)
 	c_proc(glColor4f,col)
end procedure

global procedure gl_copyTexImage2D(integer target, integer level, integer internalformat,
				   integer x, integer y, integer width, integer height,
				   integer border)
	c_proc(glCopyTexImage2D,{target,level,internalformat,x,y,width,height,border})
end procedure

global procedure gl_cullFace(integer mode)
	c_proc(glCullFace,{mode})
end procedure

global procedure gl_deleteLists(atom list,integer range)
	c_proc(glDeleteLists,{list,range})
end procedure

global procedure gl_deleteTextures(integer num,sequence textures)
	poke4(gl_vector_buffer,textures)
	c_proc(glDeleteTextures,{num,gl_vector_buffer})
end procedure

global procedure gl_depthFunc(integer pname)
	c_proc(glDepthFunc,{pname})
end procedure

global procedure gl_depthMask(integer i)
	c_proc(glDepthMask,{i})
end procedure

global procedure gl_disable(integer what)
 	c_proc(glDisable,{ what })
end procedure

global procedure gl_enable(integer what)
 	c_proc(glEnable,{ what })
end procedure

global procedure gl_end()
 	c_proc(glEnd,{ })
end procedure

global procedure gl_endList()
	c_proc(glEndList,{})
end procedure

global procedure gl_finish()
 	c_proc(glFinish,{ })
end procedure

global procedure gl_flush()
 	c_proc(glFlush,{ })
end procedure


global procedure gl_fogf(integer pname,atom param)
	c_proc(glFogf,{pname,param})
end procedure


global procedure gl_fogfv(integer pname,sequence params)
	gl_pokef32(gl_vector_buffer,params)
	c_proc(glFogfv,{pname,gl_vector_buffer})
end procedure


global procedure gl_fogi(integer pname,integer param)
	c_proc(glFogf,{pname,param})
end procedure


global procedure gl_frustum(atom left,atom right,atom top,atom bottom,atom zNear,atom zFar)
	c_proc(glFrustum,{left,right,top,bottom,zNear,zFar})
end procedure


global function gl_genLists(integer range)
	return c_func(glGenLists,{range})
end function


global procedure gl_genTextures(integer n,atom textures)
	c_proc(glGenTextures,{n,textures})
end procedure


global procedure gl_getFloatv(integer pname,atom data)
	c_proc(glGetFloatv,{pname,data})
end procedure


global function gl_getString(integer name)
	atom a
	integer i,l
	sequence s
	
	a = c_func(glGetString,{name})
	if a<=0 or a=GL_INVALID_ENUM or a=GL_INVALID_OPERATION then
		return {}
	end if
	i = 1
	l = 0
	s = {}
	
	while i and l<512 do
		i = peek(a+l)
		l += 1
		if i then
			s &= i
		end if
	end while
	
	return s
end function

global procedure gl_hint(integer target,integer mode)
	c_proc(glHint,{target,mode})
end procedure

global procedure gl_indexi(integer idx)
	c_proc(glIndexi,{idx})
end procedure

global procedure gl_lightf(integer light,integer pname,atom val)
	c_proc(glLightf,{light,pname,val})
end procedure

global procedure gl_lightfv(integer light,integer pname,sequence vals)
	gl_pokef32(gl_vector_buffer,vals)
	c_proc(glLightfv,{light,pname,gl_vector_buffer})
end procedure

global procedure gl_lightModelf(integer i,atom val)
	c_proc(glLightModelf,{i,val})
end procedure

global procedure gl_lightModelfv(integer i,sequence vals)
	gl_pokef32(gl_vector_buffer,vals)
	c_proc(glLightModelfv,{i,gl_vector_buffer})
end procedure

global procedure gl_lineWidth(atom lv)
	c_proc(glLineWidth,{lv})
end procedure

global procedure gl_listBase(atom base)
	c_proc(glListBase,{base})
end procedure

global procedure gl_loadIdentity()
	c_proc(glLoadIdentity,{})
end procedure

global procedure gl_materialf(integer face,integer pname,atom val)
	c_proc(glMaterialf,{face,pname,val})
end procedure

global procedure gl_materialfv(integer face,integer pname,sequence vals)
	gl_pokef32(gl_vector_buffer,vals)
	c_proc(glMaterialfv,{face,pname,gl_vector_buffer})
end procedure

global procedure gl_matrixMode(integer mode)
	c_proc(glMatrixMode,{mode})
end procedure

global procedure gl_newList(integer list,integer mode)
	c_proc(glNewList,{list,mode})
end procedure


global procedure gl_normal3f(sequence normal)
	c_proc(glNormal3f,normal)
end procedure


global procedure gl_ortho(atom left,atom right,atom top,atom bottom,atom zNear,atom zFar)
	c_proc(glOrtho,{left,right,top,bottom,zNear,zFar})
end procedure


global procedure gl_pixelStorei(integer pname,integer param)
	c_proc(glPixelStorei,{pname,param})
end procedure

global procedure gl_pointSize(atom size)
	c_proc(glPointSize,{size})
end procedure

global procedure gl_polygonMode(integer face,integer mode)
	c_proc(glPolygonMode,{face,mode})
end procedure

global procedure gl_popMatrix()
 	c_proc(glPopMatrix,{ })
end procedure

global procedure gl_pushMatrix()
 	c_proc(glPushMatrix,{ })
end procedure

global procedure gl_rasterPos2f(sequence pos)
	c_proc(glRasterPos2f,pos)
end procedure

global procedure gl_rasterPos2i(sequence pos)
	c_proc(glRasterPos2i,pos)
end procedure

global procedure gl_rectf(sequence rect)
	c_proc(glRectf,rect)
end procedure

global procedure gl_rotatef(atom angle,sequence axes)
	c_proc(glRotatef,angle&axes)
end procedure

global procedure gl_scalef(sequence scale)
	c_proc(glScalef,scale)
end procedure

global procedure gl_shadeModel(integer model)
	c_proc(glShadeModel,{model})
end procedure

global procedure gl_texCoord1f(atom s)
	c_proc(glTexCoord1f,{s})
end procedure

global procedure gl_texCoord2f(sequence c)
	c_proc(glTexCoord2f,c)
end procedure

global procedure gl_texCoord2fv(sequence c)
	gl_pokef32(gl_vector_buffer,c)
	c_proc(glTexCoord2fv,{gl_vector_buffer})
end procedure

global procedure gl_texCoord4f(sequence c)
	c_proc(glTexCoord4f,c)
end procedure

global procedure gl_texImage1D(integer target, integer level, integer components, integer width,
				integer border, integer format, integer typ, atom pixels)
	c_proc(glTexImage1D,{target,level,components,width,border,format,typ,pixels})
end procedure

global procedure gl_texImage2D(integer target, integer level, integer components, integer width, integer height,
				integer border, integer format, integer typ, atom pixels)
	c_proc(glTexImage2D,{target,level,components,width,height,border,format,typ,pixels})
end procedure

global procedure gl_texParameterf(integer target,integer pname,atom param)
	c_proc(glTexParameterf,{target,pname,param})
end procedure

global procedure gl_texParameteri(integer target,integer pname,integer param)
	c_proc(glTexParameteri,{target,pname,param})
end procedure

global procedure gl_texEnvf(integer target,integer pname,atom param)
	c_proc(glTexEnvf,{target,pname,param})
end procedure

global procedure gl_texEnvi(integer i,integer j,integer k)
	c_proc(glTexEnvi,{i,j,k})
end procedure

global procedure gl_texGeni(integer coord,integer pname,integer param)
	c_proc(glTexGeni,{coord,pname,param})
end procedure

global procedure gl_translatef(sequence t)
	c_proc(glTranslatef,t)
end procedure

global procedure gl_vertex2d(sequence vertex)
 	c_proc(glVertex2d,vertex)
end procedure

global procedure gl_vertex2f(sequence vertex)
 	c_proc(glVertex2f,vertex)
end procedure

global procedure gl_vertex2i(sequence vertex)
 	c_proc(glVertex2i,vertex)
end procedure

global procedure gl_vertex2s(sequence vertex)
 	c_proc(glVertex2s,vertex)
end procedure

global procedure gl_vertex3d(sequence vertex)
 	c_proc(glVertex3d,vertex)
end procedure

global procedure gl_vertex3f(sequence vertex)
 	c_proc(glVertex3f,vertex)
end procedure

global procedure gl_vertex3i(sequence vertex)
 	c_proc(glVertex3i,vertex)
end procedure

global procedure gl_vertex3s(sequence vertex)
 	c_proc(glVertex3s,vertex)
end procedure

global procedure gl_vertex4f(sequence vertex)
 	c_proc(glVertex4f,vertex)
end procedure

global procedure gl_viewport(integer x,integer y,integer w,integer h)
 	c_proc(glViewport,{x,y,w,h})
end procedure


function peek_string(atom ptr)
	sequence s
	integer c
	
	s = {}
	while 1 do
		c = peek(ptr)
		if c=0 then
			exit
		elsif c=' ' then
			ptr += 1
			exit
		end if
		s &= c
		ptr += 1
	end while
	return {ptr,s}
end function


global function gl_getVersion()
	atom lpString
	sequence v
	
	lpString = c_func(glGetString, {GL_VERSION})
	
	v = peek_string(lpString)
	v = value(v[2])
	if v[1]=GET_SUCCESS then
		return v[2]
	else
		return 0
	end if
end function




-- Code used for calling gl/wgl extension functions
constant call_by_ptr_code = allocate(34)
constant call_by_ptr_params = allocate(136)
constant call_by_ptr_retval = call_by_ptr_params+128
poke(call_by_ptr_code, {
    #60,                    -- pusha
    #B9,#00,#00,#00,#00,    -- mov ecx,num_params (2)
    #BB,#00,#00,#00,#00,    -- mov ebx,param_list (7)
    #83,#EB,#04,            -- sub ebx,4
    #FF,#34,#8B,            -- @push_args: push dword ptr [ebx+ecx*4]
    #49,                    -- dec ecx
    #75,#FA,                -- jnz @push_args
    #BB,#00,#00,#00,#00,    -- mov ebx,func_addr (21)
    #FF,#D3,                -- call near ebx
    #A3,#00,#00,#00,#00,    -- mov [return_value],eax (28)
    #61,                    -- popa
    #C3})                   -- ret
constant
	call_by_ptr__num_params = call_by_ptr_code+2,
	call_by_ptr__param_list = call_by_ptr_code+7,
	call_by_ptr__func_addr = call_by_ptr_code+21,
	call_by_ptr__retval = call_by_ptr_code+28
poke4(call_by_ptr__param_list, call_by_ptr_params)
poke4(call_by_ptr__retval, call_by_ptr_retval)


--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------- GL extensions --------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------

--
--** License Applicability. Except to the extent portions of this file are
--** made subject to an alternative license as permitted in the SGI Free
--** Software License B, Version 1.1 (the "License"), the contents of this
--** file are subject only to the provisions of the License. You may not use
--** this file except in compliance with the License. You may obtain a copy
--** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
--** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
--** 
--** http://oss.sgi.com/projects/FreeB
--** 
--** Note that, as provided in the License, the Software is distributed on an
--** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
--** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
--** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
--** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
--** 
--** Original Code. The Original Code is: OpenGL Sample Implementation,
--** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
--** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
--** Copyright in any portions created by third parties is as indicated
--** elsewhere herein. All Rights Reserved.
--** 
--** Additional Notice Provisions: This software was created using the
--** OpenGL(R) version 1.2.1 Sample Implementation published by SGI, but has
--** not been independently verified as being compliant with the OpenGL(R)
--** version 1.2.1 Specification.




global constant GL_GLEXT_VERSION	= 16

global constant GL_UNSIGNED_BYTE_3_3_2	= #8032
global constant GL_UNSIGNED_SHORT_4_4_4_4	= #8033
global constant GL_UNSIGNED_SHORT_5_5_5_1	= #8034
global constant GL_UNSIGNED_INT_8_8_8_8	= #8035
global constant GL_UNSIGNED_INT_10_10_10_2	= #8036
global constant GL_RESCALE_NORMAL	= #803A
global constant GL_UNSIGNED_BYTE_2_3_3_REV	= #8362
global constant GL_UNSIGNED_SHORT_5_6_5	= #8363
global constant GL_UNSIGNED_SHORT_5_6_5_REV	= #8364
global constant GL_UNSIGNED_SHORT_4_4_4_4_REV	= #8365
global constant GL_UNSIGNED_SHORT_1_5_5_5_REV	= #8366
global constant GL_UNSIGNED_INT_8_8_8_8_REV	= #8367
global constant GL_UNSIGNED_INT_2_10_10_10_REV	= #8368
global constant GL_BGR	= #80E0
global constant GL_BGRA	= #80E1
global constant GL_MAX_ELEMENTS_VERTICES	= #80E8
global constant GL_MAX_ELEMENTS_INDICES	= #80E9
global constant GL_CLAMP_TO_EDGE	= #812F
global constant GL_TEXTURE_MIN_LOD	= #813A
global constant GL_TEXTURE_MAX_LOD	= #813B
global constant GL_TEXTURE_BASE_LEVEL	= #813C
global constant GL_TEXTURE_MAX_LEVEL	= #813D
global constant GL_LIGHT_MODEL_COLOR_CONTROL	= #81F8
global constant GL_SINGLE_COLOR	= #81F9
global constant GL_SEPARATE_SPECULAR_COLOR	= #81FA
global constant GL_SMOOTH_POINT_SIZE_RANGE	= #0B12
global constant GL_SMOOTH_POINT_SIZE_GRANULARITY	= #0B13
global constant GL_SMOOTH_LINE_WIDTH_RANGE	= #0B22
global constant GL_SMOOTH_LINE_WIDTH_GRANULARITY	= #0B23
global constant GL_ALIASED_POINT_SIZE_RANGE	= #846D
global constant GL_ALIASED_LINE_WIDTH_RANGE	= #846E

global constant GL_CONSTANT_COLOR	= #8001
global constant GL_ONE_MINUS_CONSTANT_COLOR	= #8002
global constant GL_CONSTANT_ALPHA	= #8003
global constant GL_ONE_MINUS_CONSTANT_ALPHA	= #8004
global constant GL_BLEND_COLOR	= #8005
global constant GL_FUNC_ADD	= #8006
global constant GL_MIN	= #8007
global constant GL_MAX	= #8008
global constant GL_BLEND_EQUATION	= #8009
global constant GL_FUNC_SUBTRACT	= #800A
global constant GL_FUNC_REVERSE_SUBTRACT	= #800B
global constant GL_CONVOLUTION_1D	= #8010
global constant GL_CONVOLUTION_2D	= #8011
global constant GL_SEPARABLE_2D	= #8012
global constant GL_CONVOLUTION_BORDER_MODE	= #8013
global constant GL_CONVOLUTION_FILTER_SCALE	= #8014
global constant GL_CONVOLUTION_FILTER_BIAS	= #8015
global constant GL_REDUCE	= #8016
global constant GL_CONVOLUTION_FORMAT	= #8017
global constant GL_CONVOLUTION_WIDTH	= #8018
global constant GL_CONVOLUTION_HEIGHT	= #8019
global constant GL_MAX_CONVOLUTION_WIDTH	= #801A
global constant GL_MAX_CONVOLUTION_HEIGHT	= #801B
global constant GL_POST_CONVOLUTION_RED_SCALE	= #801C
global constant GL_POST_CONVOLUTION_GREEN_SCALE	= #801D
global constant GL_POST_CONVOLUTION_BLUE_SCALE	= #801E
global constant GL_POST_CONVOLUTION_ALPHA_SCALE	= #801F
global constant GL_POST_CONVOLUTION_RED_BIAS	= #8020
global constant GL_POST_CONVOLUTION_GREEN_BIAS	= #8021
global constant GL_POST_CONVOLUTION_BLUE_BIAS	= #8022
global constant GL_POST_CONVOLUTION_ALPHA_BIAS	= #8023
global constant GL_HISTOGRAM	= #8024
global constant GL_PROXY_HISTOGRAM	= #8025
global constant GL_HISTOGRAM_WIDTH	= #8026
global constant GL_HISTOGRAM_FORMAT	= #8027
global constant GL_HISTOGRAM_RED_SIZE	= #8028
global constant GL_HISTOGRAM_GREEN_SIZE	= #8029
global constant GL_HISTOGRAM_BLUE_SIZE	= #802A
global constant GL_HISTOGRAM_ALPHA_SIZE	= #802B
global constant GL_HISTOGRAM_LUMINANCE_SIZE	= #802C
global constant GL_HISTOGRAM_SINK	= #802D
global constant GL_MINMAX	= #802E
global constant GL_MINMAX_FORMAT	= #802F
global constant GL_MINMAX_SINK	= #8030
global constant GL_TABLE_TOO_LARGE	= #8031
global constant GL_COLOR_MATRIX	= #80B1
global constant GL_COLOR_MATRIX_STACK_DEPTH	= #80B2
global constant GL_MAX_COLOR_MATRIX_STACK_DEPTH	= #80B3
global constant GL_POST_COLOR_MATRIX_RED_SCALE	= #80B4
global constant GL_POST_COLOR_MATRIX_GREEN_SCALE	= #80B5
global constant GL_POST_COLOR_MATRIX_BLUE_SCALE	= #80B6
global constant GL_POST_COLOR_MATRIX_ALPHA_SCALE	= #80B7
global constant GL_POST_COLOR_MATRIX_RED_BIAS	= #80B8
global constant GL_POST_COLOR_MATRIX_GREEN_BIAS	= #80B9
global constant GL_POST_COLOR_MATRIX_BLUE_BIAS	= #80BA
global constant GL_POST_COLOR_MATIX_ALPHA_BIAS	= #80BB
global constant GL_COLOR_TABLE	= #80D0
global constant GL_POST_CONVOLUTION_COLOR_TABLE	= #80D1
global constant GL_POST_COLOR_MATRIX_COLOR_TABLE	= #80D2
global constant GL_PROXY_COLOR_TABLE	= #80D3
global constant GL_PROXY_POST_CONVOLUTION_COLOR_TABLE	= #80D4
global constant GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE	= #80D5
global constant GL_COLOR_TABLE_SCALE	= #80D6
global constant GL_COLOR_TABLE_BIAS	= #80D7
global constant GL_COLOR_TABLE_FORMAT	= #80D8
global constant GL_COLOR_TABLE_WIDTH	= #80D9
global constant GL_COLOR_TABLE_RED_SIZE	= #80DA
global constant GL_COLOR_TABLE_GREEN_SIZE	= #80DB
global constant GL_COLOR_TABLE_BLUE_SIZE	= #80DC
global constant GL_COLOR_TABLE_ALPHA_SIZE	= #80DD
global constant GL_COLOR_TABLE_LUMINANCE_SIZE	= #80DE
global constant GL_COLOR_TABLE_INTENSITY_SIZE	= #80DF
global constant GL_IGNORE_BORDER	= #8150
global constant GL_CONSTANT_BORDER	= #8151
global constant GL_WRAP_BORDER	= #8152
global constant GL_REPLICATE_BORDER	= #8153
global constant GL_CONVOLUTION_BORDER_COLOR	= #8154

global constant GL_TEXTURE0	= #84C0
global constant GL_TEXTURE1	= #84C1
global constant GL_TEXTURE2	= #84C2
global constant GL_TEXTURE3	= #84C3
global constant GL_TEXTURE4	= #84C4
global constant GL_TEXTURE5	= #84C5
global constant GL_TEXTURE6	= #84C6
global constant GL_TEXTURE7	= #84C7
global constant GL_TEXTURE8	= #84C8
global constant GL_TEXTURE9	= #84C9
global constant GL_TEXTURE10	= #84CA
global constant GL_TEXTURE11	= #84CB
global constant GL_TEXTURE12	= #84CC
global constant GL_TEXTURE13	= #84CD
global constant GL_TEXTURE14	= #84CE
global constant GL_TEXTURE15	= #84CF
global constant GL_TEXTURE16	= #84D0
global constant GL_TEXTURE17	= #84D1
global constant GL_TEXTURE18	= #84D2
global constant GL_TEXTURE19	= #84D3
global constant GL_TEXTURE20	= #84D4
global constant GL_TEXTURE21	= #84D5
global constant GL_TEXTURE22	= #84D6
global constant GL_TEXTURE23	= #84D7
global constant GL_TEXTURE24	= #84D8
global constant GL_TEXTURE25	= #84D9
global constant GL_TEXTURE26	= #84DA
global constant GL_TEXTURE27	= #84DB
global constant GL_TEXTURE28	= #84DC
global constant GL_TEXTURE29	= #84DD
global constant GL_TEXTURE30	= #84DE
global constant GL_TEXTURE31	= #84DF
global constant GL_ACTIVE_TEXTURE	= #84E0
global constant GL_CLIENT_ACTIVE_TEXTURE	= #84E1
global constant GL_MAX_TEXTURE_UNITS	= #84E2
global constant GL_TRANSPOSE_MODELVIEW_MATRIX	= #84E3
global constant GL_TRANSPOSE_PROJECTION_MATRIX	= #84E4
global constant GL_TRANSPOSE_TEXTURE_MATRIX	= #84E5
global constant GL_TRANSPOSE_COLOR_MATRIX	= #84E6
global constant GL_MULTISAMPLE	= #809D
global constant GL_SAMPLE_ALPHA_TO_COVERAGE	= #809E
global constant GL_SAMPLE_ALPHA_TO_ONE	= #809F
global constant GL_SAMPLE_COVERAGE	= #80A0
global constant GL_SAMPLE_BUFFERS	= #80A8
global constant GL_SAMPLES	= #80A9
global constant GL_SAMPLE_COVERAGE_VALUE	= #80AA
global constant GL_SAMPLE_COVERAGE_INVERT	= #80AB
global constant GL_MULTISAMPLE_BIT	= #20000000
global constant GL_NORMAL_MAP	= #8511
global constant GL_REFLECTION_MAP	= #8512
global constant GL_TEXTURE_CUBE_MAP	= #8513
global constant GL_TEXTURE_BINDING_CUBE_MAP	= #8514
global constant GL_TEXTURE_CUBE_MAP_POSITIVE_X	= #8515
global constant GL_TEXTURE_CUBE_MAP_NEGATIVE_X	= #8516
global constant GL_TEXTURE_CUBE_MAP_POSITIVE_Y	= #8517
global constant GL_TEXTURE_CUBE_MAP_NEGATIVE_Y	= #8518
global constant GL_TEXTURE_CUBE_MAP_POSITIVE_Z	= #8519
global constant GL_TEXTURE_CUBE_MAP_NEGATIVE_Z	= #851A
global constant GL_PROXY_TEXTURE_CUBE_MAP	= #851B
global constant GL_MAX_CUBE_MAP_TEXTURE_SIZE	= #851C
global constant GL_COMPRESSED_ALPHA	= #84E9
global constant GL_COMPRESSED_LUMINANCE	= #84EA
global constant GL_COMPRESSED_LUMINANCE_ALPHA	= #84EB
global constant GL_COMPRESSED_INTENSITY	= #84EC
global constant GL_COMPRESSED_RGB	= #84ED
global constant GL_COMPRESSED_RGBA	= #84EE
global constant GL_TEXTURE_COMPRESSION_HINT	= #84EF
global constant GL_TEXTURE_COMPRESSED_IMAGE_SIZE	= #86A0
global constant GL_TEXTURE_COMPRESSED	= #86A1
global constant GL_NUM_COMPRESSED_TEXTURE_FORMATS	= #86A2
global constant GL_COMPRESSED_TEXTURE_FORMATS	= #86A3
global constant GL_CLAMP_TO_BORDER	= #812D
global constant GL_CLAMP_TO_BORDER_SGIS	= #812D
global constant GL_COMBINE	= #8570
global constant GL_COMBINE_RGB	= #8571
global constant GL_COMBINE_ALPHA	= #8572
global constant GL_SOURCE0_RGB	= #8580
global constant GL_SOURCE1_RGB	= #8581
global constant GL_SOURCE2_RGB	= #8582
global constant GL_SOURCE0_ALPHA	= #8588
global constant GL_SOURCE1_ALPHA	= #8589
global constant GL_SOURCE2_ALPHA	= #858A
global constant GL_OPERAND0_RGB	= #8590
global constant GL_OPERAND1_RGB	= #8591
global constant GL_OPERAND2_RGB	= #8592
global constant GL_OPERAND0_ALPHA	= #8598
global constant GL_OPERAND1_ALPHA	= #8599
global constant GL_OPERAND2_ALPHA	= #859A
global constant GL_RGB_SCALE	= #8573
global constant GL_ADD_SIGNED	= #8574
global constant GL_INTERPOLATE	= #8575
global constant GL_SUBTRACT	= #84E7
global constant GL_CONSTANT	= #8576
global constant GL_PRIMARY_COLOR	= #8577
global constant GL_PREVIOUS	= #8578
global constant GL_DOT3_RGB	= #86AE
global constant GL_DOT3_RGBA	= #86AF

global constant GL_TEXTURE0_ARB	= #84C0
global constant GL_TEXTURE1_ARB	= #84C1
global constant GL_TEXTURE2_ARB	= #84C2
global constant GL_TEXTURE3_ARB	= #84C3
global constant GL_TEXTURE4_ARB	= #84C4
global constant GL_TEXTURE5_ARB	= #84C5
global constant GL_TEXTURE6_ARB	= #84C6
global constant GL_TEXTURE7_ARB	= #84C7
global constant GL_TEXTURE8_ARB	= #84C8
global constant GL_TEXTURE9_ARB	= #84C9
global constant GL_TEXTURE10_ARB	= #84CA
global constant GL_TEXTURE11_ARB	= #84CB
global constant GL_TEXTURE12_ARB	= #84CC
global constant GL_TEXTURE13_ARB	= #84CD
global constant GL_TEXTURE14_ARB	= #84CE
global constant GL_TEXTURE15_ARB	= #84CF
global constant GL_TEXTURE16_ARB	= #84D0
global constant GL_TEXTURE17_ARB	= #84D1
global constant GL_TEXTURE18_ARB	= #84D2
global constant GL_TEXTURE19_ARB	= #84D3
global constant GL_TEXTURE20_ARB	= #84D4
global constant GL_TEXTURE21_ARB	= #84D5
global constant GL_TEXTURE22_ARB	= #84D6
global constant GL_TEXTURE23_ARB	= #84D7
global constant GL_TEXTURE24_ARB	= #84D8
global constant GL_TEXTURE25_ARB	= #84D9
global constant GL_TEXTURE26_ARB	= #84DA
global constant GL_TEXTURE27_ARB	= #84DB
global constant GL_TEXTURE28_ARB	= #84DC
global constant GL_TEXTURE29_ARB	= #84DD
global constant GL_TEXTURE30_ARB	= #84DE
global constant GL_TEXTURE31_ARB	= #84DF
global constant GL_ACTIVE_TEXTURE_ARB	= #84E0
global constant GL_CLIENT_ACTIVE_TEXTURE_ARB	= #84E1
global constant GL_MAX_TEXTURE_UNITS_ARB	= #84E2

global constant GL_TRANSPOSE_MODELVIEW_MATRIX_ARB	= #84E3
global constant GL_TRANSPOSE_PROJECTION_MATRIX_ARB	= #84E4
global constant GL_TRANSPOSE_TEXTURE_MATRIX_ARB	= #84E5
global constant GL_TRANSPOSE_COLOR_MATRIX_ARB	= #84E6

global constant GL_MULTISAMPLE_ARB	= #809D
global constant GL_SAMPLE_ALPHA_TO_COVERAGE_ARB	= #809E
global constant GL_SAMPLE_ALPHA_TO_ONE_ARB	= #809F
global constant GL_SAMPLE_COVERAGE_ARB	= #80A0
global constant GL_SAMPLE_BUFFERS_ARB	= #80A8
global constant GL_SAMPLES_ARB	= #80A9
global constant GL_SAMPLE_COVERAGE_VALUE_ARB	= #80AA
global constant GL_SAMPLE_COVERAGE_INVERT_ARB	= #80AB
global constant GL_MULTISAMPLE_BIT_ARB	= #20000000


global constant GL_NORMAL_MAP_ARB	= #8511
global constant GL_REFLECTION_MAP_ARB	= #8512
global constant GL_TEXTURE_CUBE_MAP_ARB	= #8513
global constant GL_TEXTURE_BINDING_CUBE_MAP_ARB	= #8514
global constant GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB	= #8515
global constant GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB	= #8516
global constant GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB	= #8517
global constant GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB	= #8518
global constant GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB	= #8519
global constant GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB	= #851A
global constant GL_PROXY_TEXTURE_CUBE_MAP_ARB	= #851B
global constant GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB	= #851C

global constant GL_COMPRESSED_ALPHA_ARB	= #84E9
global constant GL_COMPRESSED_LUMINANCE_ARB	= #84EA
global constant GL_COMPRESSED_LUMINANCE_ALPHA_ARB	= #84EB
global constant GL_COMPRESSED_INTENSITY_ARB	= #84EC
global constant GL_COMPRESSED_RGB_ARB	= #84ED
global constant GL_COMPRESSED_RGBA_ARB	= #84EE
global constant GL_TEXTURE_COMPRESSION_HINT_ARB	= #84EF
global constant GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB	= #86A0
global constant GL_TEXTURE_COMPRESSED_ARB	= #86A1
global constant GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB	= #86A2
global constant GL_COMPRESSED_TEXTURE_FORMATS_ARB	= #86A3

global constant GL_CLAMP_TO_BORDER_ARB	= #812D

global constant GL_POINT_SIZE_MIN_ARB	= #8126
global constant GL_POINT_SIZE_MIN_EXT	= #8126
global constant GL_POINT_SIZE_MIN_SGIS	= #8126
global constant GL_POINT_SIZE_MAX_ARB	= #8127
global constant GL_POINT_SIZE_MAX_EXT	= #8127
global constant GL_POINT_SIZE_MAX_SGIS	= #8127
global constant GL_POINT_FADE_THRESHOLD_SIZE_ARB	= #8128
global constant GL_POINT_FADE_THRESHOLD_SIZE_EXT	= #8128
global constant GL_POINT_FADE_THRESHOLD_SIZE_SGIS	= #8128
global constant GL_POINT_DISTANCE_ATTENUATION_ARB	= #8129
global constant GL_DISTANCE_ATTENUATION_EXT	= #8129
global constant GL_DISTANCE_ATTENUATION_SGIS	= #8129

global constant GL_MAX_VERTEX_UNITS_ARB	= #86A4
global constant GL_ACTIVE_VERTEX_UNITS_ARB	= #86A5
global constant GL_WEIGHT_SUM_UNITY_ARB	= #86A6
global constant GL_VERTEX_BLEND_ARB	= #86A7
global constant GL_CURRENT_WEIGHT_ARB	= #86A8
global constant GL_WEIGHT_ARRAY_TYPE_ARB	= #86A9
global constant GL_WEIGHT_ARRAY_STRIDE_ARB	= #86AA
global constant GL_WEIGHT_ARRAY_SIZE_ARB	= #86AB
global constant GL_WEIGHT_ARRAY_POINTER_ARB	= #86AC
global constant GL_WEIGHT_ARRAY_ARB	= #86AD
global constant GL_MODELVIEW0_ARB	= #1700
global constant GL_MODELVIEW1_ARB	= #850A
global constant GL_MODELVIEW2_ARB	= #8722
global constant GL_MODELVIEW3_ARB	= #8723
global constant GL_MODELVIEW4_ARB	= #8724
global constant GL_MODELVIEW5_ARB	= #8725
global constant GL_MODELVIEW6_ARB	= #8726
global constant GL_MODELVIEW7_ARB	= #8727
global constant GL_MODELVIEW8_ARB	= #8728
global constant GL_MODELVIEW9_ARB	= #8729
global constant GL_MODELVIEW10_ARB	= #872A
global constant GL_MODELVIEW11_ARB	= #872B
global constant GL_MODELVIEW12_ARB	= #872C
global constant GL_MODELVIEW13_ARB	= #872D
global constant GL_MODELVIEW14_ARB	= #872E
global constant GL_MODELVIEW15_ARB	= #872F
global constant GL_MODELVIEW16_ARB	= #8730
global constant GL_MODELVIEW17_ARB	= #8731
global constant GL_MODELVIEW18_ARB	= #8732
global constant GL_MODELVIEW19_ARB	= #8733
global constant GL_MODELVIEW20_ARB	= #8734
global constant GL_MODELVIEW21_ARB	= #8735
global constant GL_MODELVIEW22_ARB	= #8736
global constant GL_MODELVIEW23_ARB	= #8737
global constant GL_MODELVIEW24_ARB	= #8738
global constant GL_MODELVIEW25_ARB	= #8739
global constant GL_MODELVIEW26_ARB	= #873A
global constant GL_MODELVIEW27_ARB	= #873B
global constant GL_MODELVIEW28_ARB	= #873C
global constant GL_MODELVIEW29_ARB	= #873D
global constant GL_MODELVIEW30_ARB	= #873E
global constant GL_MODELVIEW31_ARB	= #873F

global constant GL_MATRIX_PALETTE_ARB	= #8840
global constant GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB	= #8841
global constant GL_MAX_PALETTE_MATRICES_ARB	= #8842
global constant GL_CURRENT_PALETTE_MATRIX_ARB	= #8843
global constant GL_MATRIX_INDEX_ARRAY_ARB	= #8844
global constant GL_CURRENT_MATRIX_INDEX_ARB	= #8845
global constant GL_MATRIX_INDEX_ARRAY_SIZE_ARB	= #8846
global constant GL_MATRIX_INDEX_ARRAY_TYPE_ARB	= #8847
global constant GL_MATRIX_INDEX_ARRAY_STRIDE_ARB	= #8848
global constant GL_MATRIX_INDEX_ARRAY_POINTER_ARB	= #8849

global constant GL_COMBINE_ARB	= #8570
global constant GL_COMBINE_RGB_ARB	= #8571
global constant GL_COMBINE_ALPHA_ARB	= #8572
global constant GL_SOURCE0_RGB_ARB	= #8580
global constant GL_SOURCE1_RGB_ARB	= #8581
global constant GL_SOURCE2_RGB_ARB	= #8582
global constant GL_SOURCE0_ALPHA_ARB	= #8588
global constant GL_SOURCE1_ALPHA_ARB	= #8589
global constant GL_SOURCE2_ALPHA_ARB	= #858A
global constant GL_OPERAND0_RGB_ARB	= #8590
global constant GL_OPERAND1_RGB_ARB	= #8591
global constant GL_OPERAND2_RGB_ARB	= #8592
global constant GL_OPERAND0_ALPHA_ARB	= #8598
global constant GL_OPERAND1_ALPHA_ARB	= #8599
global constant GL_OPERAND2_ALPHA_ARB	= #859A
global constant GL_RGB_SCALE_ARB	= #8573
global constant GL_ADD_SIGNED_ARB	= #8574
global constant GL_INTERPOLATE_ARB	= #8575
global constant GL_SUBTRACT_ARB	= #84E7
global constant GL_CONSTANT_ARB	= #8576
global constant GL_PRIMARY_COLOR_ARB	= #8577
global constant GL_PREVIOUS_ARB	= #8578


global constant GL_DOT3_RGB_ARB	= #86AE
global constant GL_DOT3_RGBA_ARB	= #86AF

global constant GL_MIRRORED_REPEAT_ARB	= #8370

global constant GL_DEPTH_COMPONENT16_ARB	= #81A5
global constant GL_DEPTH_COMPONENT24_ARB	= #81A6
global constant GL_DEPTH_COMPONENT32_ARB	= #81A7
global constant GL_TEXTURE_DEPTH_SIZE_ARB	= #884A
global constant GL_DEPTH_TEXTURE_MODE_ARB	= #884B

global constant GL_TEXTURE_COMPARE_MODE_ARB	= #884C
global constant GL_TEXTURE_COMPARE_FUNC_ARB	= #884D
global constant GL_COMPARE_R_TO_TEXTURE_ARB	= #884E

global constant GL_TEXTURE_COMPARE_FAIL_VALUE_ARB	= #80BF


global constant GL_ABGR_EXT	= #8000

global constant GL_CONSTANT_COLOR_EXT	= #8001
global constant GL_ONE_MINUS_CONSTANT_COLOR_EXT	= #8002
global constant GL_CONSTANT_ALPHA_EXT	= #8003
global constant GL_ONE_MINUS_CONSTANT_ALPHA_EXT	= #8004
global constant GL_BLEND_COLOR_EXT	= #8005

global constant GL_POLYGON_OFFSET_EXT	= #8037
global constant GL_POLYGON_OFFSET_FACTOR_EXT	= #8038
global constant GL_POLYGON_OFFSET_BIAS_EXT	= #8039

global constant GL_ALPHA4_EXT	= #803B
global constant GL_ALPHA8_EXT	= #803C
global constant GL_ALPHA12_EXT	= #803D
global constant GL_ALPHA16_EXT	= #803E
global constant GL_LUMINANCE4_EXT	= #803F
global constant GL_LUMINANCE8_EXT	= #8040
global constant GL_LUMINANCE12_EXT	= #8041
global constant GL_LUMINANCE16_EXT	= #8042
global constant GL_LUMINANCE4_ALPHA4_EXT	= #8043
global constant GL_LUMINANCE6_ALPHA2_EXT	= #8044
global constant GL_LUMINANCE8_ALPHA8_EXT	= #8045
global constant GL_LUMINANCE12_ALPHA4_EXT	= #8046
global constant GL_LUMINANCE12_ALPHA12_EXT	= #8047
global constant GL_LUMINANCE16_ALPHA16_EXT	= #8048
global constant GL_INTENSITY_EXT	= #8049
global constant GL_INTENSITY4_EXT	= #804A
global constant GL_INTENSITY8_EXT	= #804B
global constant GL_INTENSITY12_EXT	= #804C
global constant GL_INTENSITY16_EXT	= #804D
global constant GL_RGB2_EXT	= #804E
global constant GL_RGB4_EXT	= #804F
global constant GL_RGB5_EXT	= #8050
global constant GL_RGB8_EXT	= #8051
global constant GL_RGB10_EXT	= #8052
global constant GL_RGB12_EXT	= #8053
global constant GL_RGB16_EXT	= #8054
global constant GL_RGBA2_EXT	= #8055
global constant GL_RGBA4_EXT	= #8056
global constant GL_RGB5_A1_EXT	= #8057
global constant GL_RGBA8_EXT	= #8058
global constant GL_RGB10_A2_EXT	= #8059
global constant GL_RGBA12_EXT	= #805A
global constant GL_RGBA16_EXT	= #805B
global constant GL_TEXTURE_RED_SIZE_EXT	= #805C
global constant GL_TEXTURE_GREEN_SIZE_EXT	= #805D
global constant GL_TEXTURE_BLUE_SIZE_EXT	= #805E
global constant GL_TEXTURE_ALPHA_SIZE_EXT	= #805F
global constant GL_TEXTURE_LUMINANCE_SIZE_EXT	= #8060
global constant GL_TEXTURE_INTENSITY_SIZE_EXT	= #8061
global constant GL_REPLACE_EXT	= #8062
global constant GL_PROXY_TEXTURE_1D_EXT	= #8063
global constant GL_PROXY_TEXTURE_2D_EXT	= #8064
global constant GL_TEXTURE_TOO_LARGE_EXT	= #8065

global constant GL_PACK_SKIP_IMAGES	= #806B
global constant GL_PACK_SKIP_IMAGES_EXT	= #806B
global constant GL_PACK_IMAGE_HEIGHT	= #806C
global constant GL_PACK_IMAGE_HEIGHT_EXT	= #806C
global constant GL_UNPACK_SKIP_IMAGES	= #806D
global constant GL_UNPACK_SKIP_IMAGES_EXT	= #806D
global constant GL_UNPACK_IMAGE_HEIGHT	= #806E
global constant GL_UNPACK_IMAGE_HEIGHT_EXT	= #806E
global constant GL_TEXTURE_3D	= #806F
global constant GL_TEXTURE_3D_EXT	= #806F
global constant GL_PROXY_TEXTURE_3D	= #8070
global constant GL_PROXY_TEXTURE_3D_EXT	= #8070
global constant GL_TEXTURE_DEPTH	= #8071
global constant GL_TEXTURE_DEPTH_EXT	= #8071
global constant GL_TEXTURE_WRAP_R	= #8072
global constant GL_TEXTURE_WRAP_R_EXT	= #8072
global constant GL_MAX_3D_TEXTURE_SIZE	= #8073
global constant GL_MAX_3D_TEXTURE_SIZE_EXT	= #8073

global constant GL_FILTER4_SGIS	= #8146
global constant GL_TEXTURE_FILTER4_SIZE_SGIS	= #8147



global constant GL_HISTOGRAM_EXT	= #8024
global constant GL_PROXY_HISTOGRAM_EXT	= #8025
global constant GL_HISTOGRAM_WIDTH_EXT	= #8026
global constant GL_HISTOGRAM_FORMAT_EXT	= #8027
global constant GL_HISTOGRAM_RED_SIZE_EXT	= #8028
global constant GL_HISTOGRAM_GREEN_SIZE_EXT	= #8029
global constant GL_HISTOGRAM_BLUE_SIZE_EXT	= #802A
global constant GL_HISTOGRAM_ALPHA_SIZE_EXT	= #802B
global constant GL_HISTOGRAM_LUMINANCE_SIZE_EXT	= #802C
global constant GL_HISTOGRAM_SINK_EXT	= #802D
global constant GL_MINMAX_EXT	= #802E
global constant GL_MINMAX_FORMAT_EXT	= #802F
global constant GL_MINMAX_SINK_EXT	= #8030
global constant GL_TABLE_TOO_LARGE_EXT	= #8031

global constant GL_CONVOLUTION_1D_EXT	= #8010
global constant GL_CONVOLUTION_2D_EXT	= #8011
global constant GL_SEPARABLE_2D_EXT	= #8012
global constant GL_CONVOLUTION_BORDER_MODE_EXT	= #8013
global constant GL_CONVOLUTION_FILTER_SCALE_EXT	= #8014
global constant GL_CONVOLUTION_FILTER_BIAS_EXT	= #8015
global constant GL_REDUCE_EXT	= #8016
global constant GL_CONVOLUTION_FORMAT_EXT	= #8017
global constant GL_CONVOLUTION_WIDTH_EXT	= #8018
global constant GL_CONVOLUTION_HEIGHT_EXT	= #8019
global constant GL_MAX_CONVOLUTION_WIDTH_EXT	= #801A
global constant GL_MAX_CONVOLUTION_HEIGHT_EXT	= #801B
global constant GL_POST_CONVOLUTION_RED_SCALE_EXT	= #801C
global constant GL_POST_CONVOLUTION_GREEN_SCALE_EXT	= #801D
global constant GL_POST_CONVOLUTION_BLUE_SCALE_EXT	= #801E
global constant GL_POST_CONVOLUTION_ALPHA_SCALE_EXT	= #801F
global constant GL_POST_CONVOLUTION_RED_BIAS_EXT	= #8020
global constant GL_POST_CONVOLUTION_GREEN_BIAS_EXT	= #8021
global constant GL_POST_CONVOLUTION_BLUE_BIAS_EXT	= #8022
global constant GL_POST_CONVOLUTION_ALPHA_BIAS_EXT	= #8023

global constant GL_COLOR_MATRIX_SGI	= #80B1
global constant GL_COLOR_MATRIX_STACK_DEPTH_SGI	= #80B2
global constant GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI	= #80B3
global constant GL_POST_COLOR_MATRIX_RED_SCALE_SGI	= #80B4
global constant GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI	= #80B5
global constant GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI	= #80B6
global constant GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI	= #80B7
global constant GL_POST_COLOR_MATRIX_RED_BIAS_SGI	= #80B8
global constant GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI	= #80B9
global constant GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI	= #80BA
global constant GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI	= #80BB

global constant GL_COLOR_TABLE_SGI	= #80D0
global constant GL_POST_CONVOLUTION_COLOR_TABLE_SGI	= #80D1
global constant GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI	= #80D2
global constant GL_PROXY_COLOR_TABLE_SGI	= #80D3
global constant GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI	= #80D4
global constant GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI	= #80D5
global constant GL_COLOR_TABLE_SCALE_SGI	= #80D6
global constant GL_COLOR_TABLE_BIAS_SGI	= #80D7
global constant GL_COLOR_TABLE_FORMAT_SGI	= #80D8
global constant GL_COLOR_TABLE_WIDTH_SGI	= #80D9
global constant GL_COLOR_TABLE_RED_SIZE_SGI	= #80DA
global constant GL_COLOR_TABLE_GREEN_SIZE_SGI	= #80DB
global constant GL_COLOR_TABLE_BLUE_SIZE_SGI	= #80DC
global constant GL_COLOR_TABLE_ALPHA_SIZE_SGI	= #80DD
global constant GL_COLOR_TABLE_LUMINANCE_SIZE_SGI	= #80DE
global constant GL_COLOR_TABLE_INTENSITY_SIZE_SGI	= #80DF

global constant GL_PIXEL_TEXTURE_SGIS	= #8353
global constant GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS	= #8354
global constant GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS	= #8355
global constant GL_PIXEL_GROUP_COLOR_SGIS	= #8356

global constant GL_PIXEL_TEX_GEN_SGIX	= #8139
global constant GL_PIXEL_TEX_GEN_MODE_SGIX	= #832B

global constant GL_PACK_SKIP_VOLUMES_SGIS	= #8130
global constant GL_PACK_IMAGE_DEPTH_SGIS	= #8131
global constant GL_UNPACK_SKIP_VOLUMES_SGIS	= #8132
global constant GL_UNPACK_IMAGE_DEPTH_SGIS	= #8133
global constant GL_TEXTURE_4D_SGIS	= #8134
global constant GL_PROXY_TEXTURE_4D_SGIS	= #8135
global constant GL_TEXTURE_4DSIZE_SGIS	= #8136
global constant GL_TEXTURE_WRAP_Q_SGIS	= #8137
global constant GL_MAX_4D_TEXTURE_SIZE_SGIS	= #8138
global constant GL_TEXTURE_4D_BINDING_SGIS	= #814F

global constant GL_TEXTURE_COLOR_TABLE_SGI	= #80BC
global constant GL_PROXY_TEXTURE_COLOR_TABLE_SGI	= #80BD

global constant GL_CMYK_EXT	= #800C
global constant GL_CMYKA_EXT	= #800D
global constant GL_PACK_CMYK_HINT_EXT	= #800E
global constant GL_UNPACK_CMYK_HINT_EXT	= #800F

global constant GL_TEXTURE_PRIORITY_EXT	= #8066
global constant GL_TEXTURE_RESIDENT_EXT	= #8067
global constant GL_TEXTURE_1D_BINDING_EXT	= #8068
global constant GL_TEXTURE_2D_BINDING_EXT	= #8069
global constant GL_TEXTURE_3D_BINDING_EXT	= #806A

global constant GL_DETAIL_TEXTURE_2D_SGIS	= #8095
global constant GL_DETAIL_TEXTURE_2D_BINDING_SGIS	= #8096
global constant GL_LINEAR_DETAIL_SGIS	= #8097
global constant GL_LINEAR_DETAIL_ALPHA_SGIS	= #8098
global constant GL_LINEAR_DETAIL_COLOR_SGIS	= #8099
global constant GL_DETAIL_TEXTURE_LEVEL_SGIS	= #809A
global constant GL_DETAIL_TEXTURE_MODE_SGIS	= #809B
global constant GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS	= #809C

global constant GL_LINEAR_SHARPEN_SGIS	= #80AD
global constant GL_LINEAR_SHARPEN_ALPHA_SGIS	= #80AE
global constant GL_LINEAR_SHARPEN_COLOR_SGIS	= #80AF
global constant GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS	= #80B0

global constant GL_UNSIGNED_BYTE_3_3_2_EXT	= #8032
global constant GL_UNSIGNED_SHORT_4_4_4_4_EXT	= #8033
global constant GL_UNSIGNED_SHORT_5_5_5_1_EXT	= #8034
global constant GL_UNSIGNED_INT_8_8_8_8_EXT	= #8035
global constant GL_UNSIGNED_INT_10_10_10_2_EXT	= #8036

global constant GL_TEXTURE_MIN_LOD_SGIS	= #813A
global constant GL_TEXTURE_MAX_LOD_SGIS	= #813B
global constant GL_TEXTURE_BASE_LEVEL_SGIS	= #813C
global constant GL_TEXTURE_MAX_LEVEL_SGIS	= #813D

global constant GL_MULTISAMPLE_SGIS	= #809D
global constant GL_SAMPLE_ALPHA_TO_MASK_SGIS	= #809E
global constant GL_SAMPLE_ALPHA_TO_ONE_SGIS	= #809F
global constant GL_SAMPLE_MASK_SGIS	= #80A0
global constant GL_1PASS_SGIS	= #80A1
global constant GL_2PASS_0_SGIS	= #80A2
global constant GL_2PASS_1_SGIS	= #80A3
global constant GL_4PASS_0_SGIS	= #80A4
global constant GL_4PASS_1_SGIS	= #80A5
global constant GL_4PASS_2_SGIS	= #80A6
global constant GL_4PASS_3_SGIS	= #80A7
global constant GL_SAMPLE_BUFFERS_SGIS	= #80A8
global constant GL_SAMPLES_SGIS	= #80A9
global constant GL_SAMPLE_MASK_VALUE_SGIS	= #80AA
global constant GL_SAMPLE_MASK_INVERT_SGIS	= #80AB
global constant GL_SAMPLE_PATTERN_SGIS	= #80AC

global constant GL_RESCALE_NORMAL_EXT	= #803A

global constant GL_VERTEX_ARRAY_EXT	= #8074
global constant GL_NORMAL_ARRAY_EXT	= #8075
global constant GL_COLOR_ARRAY_EXT	= #8076
global constant GL_INDEX_ARRAY_EXT	= #8077
global constant GL_TEXTURE_COORD_ARRAY_EXT	= #8078
global constant GL_EDGE_FLAG_ARRAY_EXT	= #8079
global constant GL_VERTEX_ARRAY_SIZE_EXT	= #807A
global constant GL_VERTEX_ARRAY_TYPE_EXT	= #807B
global constant GL_VERTEX_ARRAY_STRIDE_EXT	= #807C
global constant GL_VERTEX_ARRAY_COUNT_EXT	= #807D
global constant GL_NORMAL_ARRAY_TYPE_EXT	= #807E
global constant GL_NORMAL_ARRAY_STRIDE_EXT	= #807F
global constant GL_NORMAL_ARRAY_COUNT_EXT	= #8080
global constant GL_COLOR_ARRAY_SIZE_EXT	= #8081
global constant GL_COLOR_ARRAY_TYPE_EXT	= #8082
global constant GL_COLOR_ARRAY_STRIDE_EXT	= #8083
global constant GL_COLOR_ARRAY_COUNT_EXT	= #8084
global constant GL_INDEX_ARRAY_TYPE_EXT	= #8085
global constant GL_INDEX_ARRAY_STRIDE_EXT	= #8086
global constant GL_INDEX_ARRAY_COUNT_EXT	= #8087
global constant GL_TEXTURE_COORD_ARRAY_SIZE_EXT	= #8088
global constant GL_TEXTURE_COORD_ARRAY_TYPE_EXT	= #8089
global constant GL_TEXTURE_COORD_ARRAY_STRIDE_EXT	= #808A
global constant GL_TEXTURE_COORD_ARRAY_COUNT_EXT	= #808B
global constant GL_EDGE_FLAG_ARRAY_STRIDE_EXT	= #808C
global constant GL_EDGE_FLAG_ARRAY_COUNT_EXT	= #808D
global constant GL_VERTEX_ARRAY_POINTER_EXT	= #808E
global constant GL_NORMAL_ARRAY_POINTER_EXT	= #808F
global constant GL_COLOR_ARRAY_POINTER_EXT	= #8090
global constant GL_INDEX_ARRAY_POINTER_EXT	= #8091
global constant GL_TEXTURE_COORD_ARRAY_POINTER_EXT	= #8092
global constant GL_EDGE_FLAG_ARRAY_POINTER_EXT	= #8093


global constant GL_GENERATE_MIPMAP_SGIS	= #8191
global constant GL_GENERATE_MIPMAP_HINT_SGIS	= #8192

global constant GL_LINEAR_CLIPMAP_LINEAR_SGIX	= #8170
global constant GL_TEXTURE_CLIPMAP_CENTER_SGIX	= #8171
global constant GL_TEXTURE_CLIPMAP_FRAME_SGIX	= #8172
global constant GL_TEXTURE_CLIPMAP_OFFSET_SGIX	= #8173
global constant GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX	= #8174
global constant GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX	= #8175
global constant GL_TEXTURE_CLIPMAP_DEPTH_SGIX	= #8176
global constant GL_MAX_CLIPMAP_DEPTH_SGIX	= #8177
global constant GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX	= #8178
global constant GL_NEAREST_CLIPMAP_NEAREST_SGIX	= #844D
global constant GL_NEAREST_CLIPMAP_LINEAR_SGIX	= #844E
global constant GL_LINEAR_CLIPMAP_NEAREST_SGIX	= #844F

global constant GL_TEXTURE_COMPARE_SGIX	= #819A
global constant GL_TEXTURE_COMPARE_OPERATOR_SGIX	= #819B
global constant GL_TEXTURE_LEQUAL_R_SGIX	= #819C
global constant GL_TEXTURE_GEQUAL_R_SGIX	= #819D

global constant GL_CLAMP_TO_EDGE_SGIS	= #812F

global constant GL_FUNC_ADD_EXT	= #8006
global constant GL_MIN_EXT	= #8007
global constant GL_MAX_EXT	= #8008
global constant GL_BLEND_EQUATION_EXT	= #8009

global constant GL_FUNC_SUBTRACT_EXT	= #800A
global constant GL_FUNC_REVERSE_SUBTRACT_EXT	= #800B


global constant GL_INTERLACE_SGIX	= #8094

global constant GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX	= #813E
global constant GL_PIXEL_TILE_CACHE_INCREMENT_SGIX	= #813F
global constant GL_PIXEL_TILE_WIDTH_SGIX	= #8140
global constant GL_PIXEL_TILE_HEIGHT_SGIX	= #8141
global constant GL_PIXEL_TILE_GRID_WIDTH_SGIX	= #8142
global constant GL_PIXEL_TILE_GRID_HEIGHT_SGIX	= #8143
global constant GL_PIXEL_TILE_GRID_DEPTH_SGIX	= #8144
global constant GL_PIXEL_TILE_CACHE_SIZE_SGIX	= #8145

global constant GL_DUAL_ALPHA4_SGIS	= #8110
global constant GL_DUAL_ALPHA8_SGIS	= #8111
global constant GL_DUAL_ALPHA12_SGIS	= #8112
global constant GL_DUAL_ALPHA16_SGIS	= #8113
global constant GL_DUAL_LUMINANCE4_SGIS	= #8114
global constant GL_DUAL_LUMINANCE8_SGIS	= #8115
global constant GL_DUAL_LUMINANCE12_SGIS	= #8116
global constant GL_DUAL_LUMINANCE16_SGIS	= #8117
global constant GL_DUAL_INTENSITY4_SGIS	= #8118
global constant GL_DUAL_INTENSITY8_SGIS	= #8119
global constant GL_DUAL_INTENSITY12_SGIS	= #811A
global constant GL_DUAL_INTENSITY16_SGIS	= #811B
global constant GL_DUAL_LUMINANCE_ALPHA4_SGIS	= #811C
global constant GL_DUAL_LUMINANCE_ALPHA8_SGIS	= #811D
global constant GL_QUAD_ALPHA4_SGIS	= #811E
global constant GL_QUAD_ALPHA8_SGIS	= #811F
global constant GL_QUAD_LUMINANCE4_SGIS	= #8120
global constant GL_QUAD_LUMINANCE8_SGIS	= #8121
global constant GL_QUAD_INTENSITY4_SGIS	= #8122
global constant GL_QUAD_INTENSITY8_SGIS	= #8123
global constant GL_DUAL_TEXTURE_SELECT_SGIS	= #8124
global constant GL_QUAD_TEXTURE_SELECT_SGIS	= #8125

global constant GL_SPRITE_SGIX	= #8148
global constant GL_SPRITE_MODE_SGIX	= #8149
global constant GL_SPRITE_AXIS_SGIX	= #814A
global constant GL_SPRITE_TRANSLATION_SGIX	= #814B
global constant GL_SPRITE_AXIAL_SGIX	= #814C
global constant GL_SPRITE_OBJECT_ALIGNED_SGIX	= #814D
global constant GL_SPRITE_EYE_ALIGNED_SGIX	= #814E

global constant GL_TEXTURE_MULTI_BUFFER_HINT_SGIX	= #812E

global constant GL_INSTRUMENT_BUFFER_POINTER_SGIX	= #8180
global constant GL_INSTRUMENT_MEASUREMENTS_SGIX	= #8181

global constant GL_POST_TEXTURE_FILTER_BIAS_SGIX	= #8179
global constant GL_POST_TEXTURE_FILTER_SCALE_SGIX	= #817A
global constant GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX	= #817B
global constant GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX	= #817C

global constant GL_FRAMEZOOM_SGIX	= #818B
global constant GL_FRAMEZOOM_FACTOR_SGIX	= #818C
global constant GL_MAX_FRAMEZOOM_FACTOR_SGIX	= #818D


global constant GL_TEXTURE_DEFORMATION_BIT_SGIX	= #00000001
global constant GL_GEOMETRY_DEFORMATION_BIT_SGIX	= #00000002

global constant GL_GEOMETRY_DEFORMATION_SGIX	= #8194
global constant GL_TEXTURE_DEFORMATION_SGIX	= #8195
global constant GL_DEFORMATIONS_MASK_SGIX	= #8196
global constant GL_MAX_DEFORMATION_ORDER_SGIX	= #8197

global constant GL_REFERENCE_PLANE_SGIX	= #817D
global constant GL_REFERENCE_PLANE_EQUATION_SGIX	= #817E


global constant GL_DEPTH_COMPONENT16_SGIX	= #81A5
global constant GL_DEPTH_COMPONENT24_SGIX	= #81A6
global constant GL_DEPTH_COMPONENT32_SGIX	= #81A7

global constant GL_FOG_FUNC_SGIS	= #812A
global constant GL_FOG_FUNC_POINTS_SGIS	= #812B
global constant GL_MAX_FOG_FUNC_POINTS_SGIS	= #812C

global constant GL_FOG_OFFSET_SGIX	= #8198
global constant GL_FOG_OFFSET_VALUE_SGIX	= #8199

global constant GL_IMAGE_SCALE_X_HP	= #8155
global constant GL_IMAGE_SCALE_Y_HP	= #8156
global constant GL_IMAGE_TRANSLATE_X_HP	= #8157
global constant GL_IMAGE_TRANSLATE_Y_HP	= #8158
global constant GL_IMAGE_ROTATE_ANGLE_HP	= #8159
global constant GL_IMAGE_ROTATE_ORIGIN_X_HP	= #815A
global constant GL_IMAGE_ROTATE_ORIGIN_Y_HP	= #815B
global constant GL_IMAGE_MAG_FILTER_HP	= #815C
global constant GL_IMAGE_MIN_FILTER_HP	= #815D
global constant GL_IMAGE_CUBIC_WEIGHT_HP	= #815E
global constant GL_CUBIC_HP	= #815F
global constant GL_AVERAGE_HP	= #8160
global constant GL_IMAGE_TRANSFORM_2D_HP	= #8161
global constant GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP	= #8162
global constant GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP	= #8163

global constant GL_IGNORE_BORDER_HP	= #8150
global constant GL_CONSTANT_BORDER_HP	= #8151
global constant GL_REPLICATE_BORDER_HP	= #8153
global constant GL_CONVOLUTION_BORDER_COLOR_HP	= #8154


global constant GL_TEXTURE_ENV_BIAS_SGIX	= #80BE


global constant GL_VERTEX_DATA_HINT_PGI	= #1A22A
global constant GL_VERTEX_CONSISTENT_HINT_PGI	= #1A22B
global constant GL_MATERIAL_SIDE_HINT_PGI	= #1A22C
global constant GL_MAX_VERTEX_HINT_PGI	= #1A22D
global constant GL_COLOR3_BIT_PGI	= #00010000
global constant GL_COLOR4_BIT_PGI	= #00020000
global constant GL_EDGEFLAG_BIT_PGI	= #00040000
global constant GL_INDEX_BIT_PGI	= #00080000
global constant GL_MAT_AMBIENT_BIT_PGI	= #00100000
global constant GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI	= #00200000
global constant GL_MAT_DIFFUSE_BIT_PGI	= #00400000
global constant GL_MAT_EMISSION_BIT_PGI	= #00800000
global constant GL_MAT_COLOR_INDEXES_BIT_PGI	= #01000000
global constant GL_MAT_SHININESS_BIT_PGI	= #02000000
global constant GL_MAT_SPECULAR_BIT_PGI	= #04000000
global constant GL_NORMAL_BIT_PGI	= #08000000
global constant GL_TEXCOORD1_BIT_PGI	= #10000000
global constant GL_TEXCOORD2_BIT_PGI	= #20000000
global constant GL_TEXCOORD3_BIT_PGI	= #40000000
global constant GL_TEXCOORD4_BIT_PGI	= #80000000
global constant GL_VERTEX23_BIT_PGI	= #00000004
global constant GL_VERTEX4_BIT_PGI	= #00000008

global constant GL_PREFER_DOUBLEBUFFER_HINT_PGI	= #1A1F8
global constant GL_CONSERVE_MEMORY_HINT_PGI	= #1A1FD
global constant GL_RECLAIM_MEMORY_HINT_PGI	= #1A1FE
global constant GL_NATIVE_GRAPHICS_HANDLE_PGI	= #1A202
global constant GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI	= #1A203
global constant GL_NATIVE_GRAPHICS_END_HINT_PGI	= #1A204
global constant GL_ALWAYS_FAST_HINT_PGI	= #1A20C
global constant GL_ALWAYS_SOFT_HINT_PGI	= #1A20D
global constant GL_ALLOW_DRAW_OBJ_HINT_PGI	= #1A20E
global constant GL_ALLOW_DRAW_WIN_HINT_PGI	= #1A20F
global constant GL_ALLOW_DRAW_FRG_HINT_PGI	= #1A210
global constant GL_ALLOW_DRAW_MEM_HINT_PGI	= #1A211
global constant GL_STRICT_DEPTHFUNC_HINT_PGI	= #1A216
global constant GL_STRICT_LIGHTING_HINT_PGI	= #1A217
global constant GL_STRICT_SCISSOR_HINT_PGI	= #1A218
global constant GL_FULL_STIPPLE_HINT_PGI	= #1A219
global constant GL_CLIP_NEAR_HINT_PGI	= #1A220
global constant GL_CLIP_FAR_HINT_PGI	= #1A221
global constant GL_WIDE_LINE_HINT_PGI	= #1A222
global constant GL_BACK_NORMALS_HINT_PGI	= #1A223

global constant GL_COLOR_INDEX1_EXT	= #80E2
global constant GL_COLOR_INDEX2_EXT	= #80E3
global constant GL_COLOR_INDEX4_EXT	= #80E4
global constant GL_COLOR_INDEX8_EXT	= #80E5
global constant GL_COLOR_INDEX12_EXT	= #80E6
global constant GL_COLOR_INDEX16_EXT	= #80E7
global constant GL_TEXTURE_INDEX_SIZE_EXT	= #80ED

global constant GL_CLIP_VOLUME_CLIPPING_HINT_EXT	= #80F0

global constant GL_LIST_PRIORITY_SGIX	= #8182

global constant GL_IR_INSTRUMENT1_SGIX	= #817F

global constant GL_CALLIGRAPHIC_FRAGMENT_SGIX	= #8183

global constant GL_TEXTURE_LOD_BIAS_S_SGIX	= #818E
global constant GL_TEXTURE_LOD_BIAS_T_SGIX	= #818F
global constant GL_TEXTURE_LOD_BIAS_R_SGIX	= #8190

global constant GL_SHADOW_AMBIENT_SGIX	= #80BF


global constant GL_INDEX_MATERIAL_EXT	= #81B8
global constant GL_INDEX_MATERIAL_PARAMETER_EXT	= #81B9
global constant GL_INDEX_MATERIAL_FACE_EXT	= #81BA

global constant GL_INDEX_TEST_EXT	= #81B5
global constant GL_INDEX_TEST_FUNC_EXT	= #81B6
global constant GL_INDEX_TEST_REF_EXT	= #81B7

global constant GL_IUI_V2F_EXT	= #81AD
global constant GL_IUI_V3F_EXT	= #81AE
global constant GL_IUI_N3F_V2F_EXT	= #81AF
global constant GL_IUI_N3F_V3F_EXT	= #81B0
global constant GL_T2F_IUI_V2F_EXT	= #81B1
global constant GL_T2F_IUI_V3F_EXT	= #81B2
global constant GL_T2F_IUI_N3F_V2F_EXT	= #81B3
global constant GL_T2F_IUI_N3F_V3F_EXT	= #81B4

global constant GL_ARRAY_ELEMENT_LOCK_FIRST_EXT	= #81A8
global constant GL_ARRAY_ELEMENT_LOCK_COUNT_EXT	= #81A9

global constant GL_CULL_VERTEX_EXT	= #81AA
global constant GL_CULL_VERTEX_EYE_POSITION_EXT	= #81AB
global constant GL_CULL_VERTEX_OBJECT_POSITION_EXT	= #81AC

global constant GL_YCRCB_422_SGIX	= #81BB
global constant GL_YCRCB_444_SGIX	= #81BC

global constant GL_FRAGMENT_LIGHTING_SGIX	= #8400
global constant GL_FRAGMENT_COLOR_MATERIAL_SGIX	= #8401
global constant GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX	= #8402
global constant GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX	= #8403
global constant GL_MAX_FRAGMENT_LIGHTS_SGIX	= #8404
global constant GL_MAX_ACTIVE_LIGHTS_SGIX	= #8405
global constant GL_CURRENT_RASTER_NORMAL_SGIX	= #8406
global constant GL_LIGHT_ENV_MODE_SGIX	= #8407
global constant GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX	= #8408
global constant GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX	= #8409
global constant GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX	= #840A
global constant GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX	= #840B
global constant GL_FRAGMENT_LIGHT0_SGIX	= #840C
global constant GL_FRAGMENT_LIGHT1_SGIX	= #840D
global constant GL_FRAGMENT_LIGHT2_SGIX	= #840E
global constant GL_FRAGMENT_LIGHT3_SGIX	= #840F
global constant GL_FRAGMENT_LIGHT4_SGIX	= #8410
global constant GL_FRAGMENT_LIGHT5_SGIX	= #8411
global constant GL_FRAGMENT_LIGHT6_SGIX	= #8412
global constant GL_FRAGMENT_LIGHT7_SGIX	= #8413

global constant GL_RASTER_POSITION_UNCLIPPED_IBM	= #19262

global constant GL_TEXTURE_LIGHTING_MODE_HP	= #8167
global constant GL_TEXTURE_POST_SPECULAR_HP	= #8168
global constant GL_TEXTURE_PRE_SPECULAR_HP	= #8169

global constant GL_MAX_ELEMENTS_VERTICES_EXT	= #80E8
global constant GL_MAX_ELEMENTS_INDICES_EXT	= #80E9

global constant GL_PHONG_WIN	= #80EA
global constant GL_PHONG_HINT_WIN	= #80EB

global constant GL_FOG_SPECULAR_TEXTURE_WIN	= #80EC

global constant GL_FRAGMENT_MATERIAL_EXT	= #8349
global constant GL_FRAGMENT_NORMAL_EXT	= #834A
global constant GL_FRAGMENT_COLOR_EXT	= #834C
global constant GL_ATTENUATION_EXT	= #834D
global constant GL_SHADOW_ATTENUATION_EXT	= #834E
global constant GL_TEXTURE_APPLICATION_MODE_EXT	= #834F
global constant GL_TEXTURE_LIGHT_EXT	= #8350
global constant GL_TEXTURE_MATERIAL_FACE_EXT	= #8351
global constant GL_TEXTURE_MATERIAL_PARAMETER_EXT	= #8352

global constant GL_ALPHA_MIN_SGIX	= #8320
global constant GL_ALPHA_MAX_SGIX	= #8321

global constant GL_PIXEL_TEX_GEN_Q_CEILING_SGIX	= #8184
global constant GL_PIXEL_TEX_GEN_Q_ROUND_SGIX	= #8185
global constant GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX	= #8186
global constant GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX	= #8187
global constant GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX	= #8188
global constant GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX	= #8189
global constant GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX	= #818A

global constant GL_BGR_EXT	= #80E0
global constant GL_BGRA_EXT	= #80E1

global constant GL_ASYNC_MARKER_SGIX	= #8329

global constant GL_ASYNC_TEX_IMAGE_SGIX	= #835C
global constant GL_ASYNC_DRAW_PIXELS_SGIX	= #835D
global constant GL_ASYNC_READ_PIXELS_SGIX	= #835E
global constant GL_MAX_ASYNC_TEX_IMAGE_SGIX	= #835F
global constant GL_MAX_ASYNC_DRAW_PIXELS_SGIX	= #8360
global constant GL_MAX_ASYNC_READ_PIXELS_SGIX	= #8361

global constant GL_ASYNC_HISTOGRAM_SGIX	= #832C
global constant GL_MAX_ASYNC_HISTOGRAM_SGIX	= #832D


global constant GL_PARALLEL_ARRAYS_INTEL	= #83F4
global constant GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL	= #83F5
global constant GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL	= #83F6
global constant GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL	= #83F7
global constant GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL	= #83F8

global constant GL_OCCLUSION_TEST_HP	= #8165
global constant GL_OCCLUSION_TEST_RESULT_HP	= #8166

global constant GL_PIXEL_TRANSFORM_2D_EXT	= #8330
global constant GL_PIXEL_MAG_FILTER_EXT	= #8331
global constant GL_PIXEL_MIN_FILTER_EXT	= #8332
global constant GL_PIXEL_CUBIC_WEIGHT_EXT	= #8333
global constant GL_CUBIC_EXT	= #8334
global constant GL_AVERAGE_EXT	= #8335
global constant GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT	= #8336
global constant GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT	= #8337
global constant GL_PIXEL_TRANSFORM_2D_MATRIX_EXT	= #8338


global constant GL_SHARED_TEXTURE_PALETTE_EXT	= #81FB

global constant GL_LIGHT_MODEL_COLOR_CONTROL_EXT	= #81F8
global constant GL_SINGLE_COLOR_EXT	= #81F9
global constant GL_SEPARATE_SPECULAR_COLOR_EXT	= #81FA

global constant GL_COLOR_SUM_EXT	= #8458
global constant GL_CURRENT_SECONDARY_COLOR_EXT	= #8459
global constant GL_SECONDARY_COLOR_ARRAY_SIZE_EXT	= #845A
global constant GL_SECONDARY_COLOR_ARRAY_TYPE_EXT	= #845B
global constant GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT	= #845C
global constant GL_SECONDARY_COLOR_ARRAY_POINTER_EXT	= #845D
global constant GL_SECONDARY_COLOR_ARRAY_EXT	= #845E

global constant GL_PERTURB_EXT	= #85AE
global constant GL_TEXTURE_NORMAL_EXT	= #85AF


global constant GL_FOG_COORDINATE_SOURCE_EXT	= #8450
global constant GL_FOG_COORDINATE_EXT	= #8451
global constant GL_FRAGMENT_DEPTH_EXT	= #8452
global constant GL_CURRENT_FOG_COORDINATE_EXT	= #8453
global constant GL_FOG_COORDINATE_ARRAY_TYPE_EXT	= #8454
global constant GL_FOG_COORDINATE_ARRAY_STRIDE_EXT	= #8455
global constant GL_FOG_COORDINATE_ARRAY_POINTER_EXT	= #8456
global constant GL_FOG_COORDINATE_ARRAY_EXT	= #8457

global constant GL_SCREEN_COORDINATES_REND	= #8490
global constant GL_INVERTED_SCREEN_W_REND	= #8491

global constant GL_TANGENT_ARRAY_EXT	= #8439
global constant GL_BINORMAL_ARRAY_EXT	= #843A
global constant GL_CURRENT_TANGENT_EXT	= #843B
global constant GL_CURRENT_BINORMAL_EXT	= #843C
global constant GL_TANGENT_ARRAY_TYPE_EXT	= #843E
global constant GL_TANGENT_ARRAY_STRIDE_EXT	= #843F
global constant GL_BINORMAL_ARRAY_TYPE_EXT	= #8440
global constant GL_BINORMAL_ARRAY_STRIDE_EXT	= #8441
global constant GL_TANGENT_ARRAY_POINTER_EXT	= #8442
global constant GL_BINORMAL_ARRAY_POINTER_EXT	= #8443
global constant GL_MAP1_TANGENT_EXT	= #8444
global constant GL_MAP2_TANGENT_EXT	= #8445
global constant GL_MAP1_BINORMAL_EXT	= #8446
global constant GL_MAP2_BINORMAL_EXT	= #8447

global constant GL_COMBINE_EXT	= #8570
global constant GL_COMBINE_RGB_EXT	= #8571
global constant GL_COMBINE_ALPHA_EXT	= #8572
global constant GL_RGB_SCALE_EXT	= #8573
global constant GL_ADD_SIGNED_EXT	= #8574
global constant GL_INTERPOLATE_EXT	= #8575
global constant GL_CONSTANT_EXT	= #8576
global constant GL_PRIMARY_COLOR_EXT	= #8577
global constant GL_PREVIOUS_EXT	= #8578
global constant GL_SOURCE0_RGB_EXT	= #8580
global constant GL_SOURCE1_RGB_EXT	= #8581
global constant GL_SOURCE2_RGB_EXT	= #8582
global constant GL_SOURCE0_ALPHA_EXT	= #8588
global constant GL_SOURCE1_ALPHA_EXT	= #8589
global constant GL_SOURCE2_ALPHA_EXT	= #858A
global constant GL_OPERAND0_RGB_EXT	= #8590
global constant GL_OPERAND1_RGB_EXT	= #8591
global constant GL_OPERAND2_RGB_EXT	= #8592
global constant GL_OPERAND0_ALPHA_EXT	= #8598
global constant GL_OPERAND1_ALPHA_EXT	= #8599
global constant GL_OPERAND2_ALPHA_EXT	= #859A

global constant GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE	= #85B0

global constant GL_TRANSFORM_HINT_APPLE	= #85B1

global constant GL_FOG_SCALE_SGIX	= #81FC
global constant GL_FOG_SCALE_VALUE_SGIX	= #81FD

global constant GL_UNPACK_CONSTANT_DATA_SUNX	= #81D5
global constant GL_TEXTURE_CONSTANT_DATA_SUNX	= #81D6

global constant GL_GLOBAL_ALPHA_SUN	= #81D9
global constant GL_GLOBAL_ALPHA_FACTOR_SUN	= #81DA

global constant GL_RESTART_SUN	= #0001
global constant GL_REPLACE_MIDDLE_SUN	= #0002
global constant GL_REPLACE_OLDEST_SUN	= #0003
global constant GL_TRIANGLE_LIST_SUN	= #81D7
global constant GL_REPLACEMENT_CODE_SUN	= #81D8
global constant GL_REPLACEMENT_CODE_ARRAY_SUN	= #85C0
global constant GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN	= #85C1
global constant GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN	= #85C2
global constant GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN	= #85C3
global constant GL_R1UI_V3F_SUN	= #85C4
global constant GL_R1UI_C4UB_V3F_SUN	= #85C5
global constant GL_R1UI_C3F_V3F_SUN	= #85C6
global constant GL_R1UI_N3F_V3F_SUN	= #85C7
global constant GL_R1UI_C4F_N3F_V3F_SUN	= #85C8
global constant GL_R1UI_T2F_V3F_SUN	= #85C9
global constant GL_R1UI_T2F_N3F_V3F_SUN	= #85CA
global constant GL_R1UI_T2F_C4F_N3F_V3F_SUN	= #85CB


global constant GL_BLEND_DST_RGB_EXT	= #80C8
global constant GL_BLEND_SRC_RGB_EXT	= #80C9
global constant GL_BLEND_DST_ALPHA_EXT	= #80CA
global constant GL_BLEND_SRC_ALPHA_EXT	= #80CB

global constant GL_RED_MIN_CLAMP_INGR	= #8560
global constant GL_GREEN_MIN_CLAMP_INGR	= #8561
global constant GL_BLUE_MIN_CLAMP_INGR	= #8562
global constant GL_ALPHA_MIN_CLAMP_INGR	= #8563
global constant GL_RED_MAX_CLAMP_INGR	= #8564
global constant GL_GREEN_MAX_CLAMP_INGR	= #8565
global constant GL_BLUE_MAX_CLAMP_INGR	= #8566
global constant GL_ALPHA_MAX_CLAMP_INGR	= #8567

global constant GL_INTERLACE_READ_INGR	= #8568

global constant GL_INCR_WRAP_EXT	= #8507
global constant GL_DECR_WRAP_EXT	= #8508

global constant GL_422_EXT	= #80CC
global constant GL_422_REV_EXT	= #80CD
global constant GL_422_AVERAGE_EXT	= #80CE
global constant GL_422_REV_AVERAGE_EXT	= #80CF

global constant GL_NORMAL_MAP_NV	= #8511
global constant GL_REFLECTION_MAP_NV	= #8512

global constant GL_NORMAL_MAP_EXT	= #8511
global constant GL_REFLECTION_MAP_EXT	= #8512
global constant GL_TEXTURE_CUBE_MAP_EXT	= #8513
global constant GL_TEXTURE_BINDING_CUBE_MAP_EXT	= #8514
global constant GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT	= #8515
global constant GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT	= #8516
global constant GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT	= #8517
global constant GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT	= #8518
global constant GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT	= #8519
global constant GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT	= #851A
global constant GL_PROXY_TEXTURE_CUBE_MAP_EXT	= #851B
global constant GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT	= #851C

global constant GL_WRAP_BORDER_SUN	= #81D4


global constant GL_MAX_TEXTURE_LOD_BIAS_EXT	= #84FD
global constant GL_TEXTURE_FILTER_CONTROL_EXT	= #8500
global constant GL_TEXTURE_LOD_BIAS_EXT	= #8501

global constant GL_TEXTURE_MAX_ANISOTROPY_EXT	= #84FE
global constant GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT	= #84FF

global constant GL_MODELVIEW1_STACK_DEPTH_EXT	= #8502
global constant GL_MODELVIEW1_MATRIX_EXT	= #8506
global constant GL_VERTEX_WEIGHTING_EXT	= #8509
global constant GL_MODELVIEW1_EXT	= #850A
global constant GL_CURRENT_VERTEX_WEIGHT_EXT	= #850B
global constant GL_VERTEX_WEIGHT_ARRAY_EXT	= #850C
global constant GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT	= #850D
global constant GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT	= #850E
global constant GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT	= #850F
global constant GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT	= #8510

global constant GL_MAX_SHININESS_NV	= #8504
global constant GL_MAX_SPOT_EXPONENT_NV	= #8505

global constant GL_VERTEX_ARRAY_RANGE_NV	= #851D
global constant GL_VERTEX_ARRAY_RANGE_LENGTH_NV	= #851E
global constant GL_VERTEX_ARRAY_RANGE_VALID_NV	= #851F
global constant GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV	= #8520
global constant GL_VERTEX_ARRAY_RANGE_POINTER_NV	= #8521

global constant GL_REGISTER_COMBINERS_NV	= #8522
global constant GL_VARIABLE_A_NV	= #8523
global constant GL_VARIABLE_B_NV	= #8524
global constant GL_VARIABLE_C_NV	= #8525
global constant GL_VARIABLE_D_NV	= #8526
global constant GL_VARIABLE_E_NV	= #8527
global constant GL_VARIABLE_F_NV	= #8528
global constant GL_VARIABLE_G_NV	= #8529
global constant GL_CONSTANT_COLOR0_NV	= #852A
global constant GL_CONSTANT_COLOR1_NV	= #852B
global constant GL_PRIMARY_COLOR_NV	= #852C
global constant GL_SECONDARY_COLOR_NV	= #852D
global constant GL_SPARE0_NV	= #852E
global constant GL_SPARE1_NV	= #852F
global constant GL_DISCARD_NV	= #8530
global constant GL_E_TIMES_F_NV	= #8531
global constant GL_SPARE0_PLUS_SECONDARY_COLOR_NV	= #8532
global constant GL_UNSIGNED_IDENTITY_NV	= #8536
global constant GL_UNSIGNED_INVERT_NV	= #8537
global constant GL_EXPAND_NORMAL_NV	= #8538
global constant GL_EXPAND_NEGATE_NV	= #8539
global constant GL_HALF_BIAS_NORMAL_NV	= #853A
global constant GL_HALF_BIAS_NEGATE_NV	= #853B
global constant GL_SIGNED_IDENTITY_NV	= #853C
global constant GL_SIGNED_NEGATE_NV	= #853D
global constant GL_SCALE_BY_TWO_NV	= #853E
global constant GL_SCALE_BY_FOUR_NV	= #853F
global constant GL_SCALE_BY_ONE_HALF_NV	= #8540
global constant GL_BIAS_BY_NEGATIVE_ONE_HALF_NV	= #8541
global constant GL_COMBINER_INPUT_NV	= #8542
global constant GL_COMBINER_MAPPING_NV	= #8543
global constant GL_COMBINER_COMPONENT_USAGE_NV	= #8544
global constant GL_COMBINER_AB_DOT_PRODUCT_NV	= #8545
global constant GL_COMBINER_CD_DOT_PRODUCT_NV	= #8546
global constant GL_COMBINER_MUX_SUM_NV	= #8547
global constant GL_COMBINER_SCALE_NV	= #8548
global constant GL_COMBINER_BIAS_NV	= #8549
global constant GL_COMBINER_AB_OUTPUT_NV	= #854A
global constant GL_COMBINER_CD_OUTPUT_NV	= #854B
global constant GL_COMBINER_SUM_OUTPUT_NV	= #854C
global constant GL_MAX_GENERAL_COMBINERS_NV	= #854D
global constant GL_NUM_GENERAL_COMBINERS_NV	= #854E
global constant GL_COLOR_SUM_CLAMP_NV	= #854F
global constant GL_COMBINER0_NV	= #8550
global constant GL_COMBINER1_NV	= #8551
global constant GL_COMBINER2_NV	= #8552
global constant GL_COMBINER3_NV	= #8553
global constant GL_COMBINER4_NV	= #8554
global constant GL_COMBINER5_NV	= #8555
global constant GL_COMBINER6_NV	= #8556
global constant GL_COMBINER7_NV	= #8557

global constant GL_FOG_DISTANCE_MODE_NV	= #855A
global constant GL_EYE_RADIAL_NV	= #855B
global constant GL_EYE_PLANE_ABSOLUTE_NV	= #855C

global constant GL_EMBOSS_LIGHT_NV	= #855D
global constant GL_EMBOSS_CONSTANT_NV	= #855E
global constant GL_EMBOSS_MAP_NV	= #855F


global constant GL_COMBINE4_NV	= #8503
global constant GL_SOURCE3_RGB_NV	= #8583
global constant GL_SOURCE3_ALPHA_NV	= #858B
global constant GL_OPERAND3_RGB_NV	= #8593
global constant GL_OPERAND3_ALPHA_NV	= #859B



global constant GL_COMPRESSED_RGB_S3TC_DXT1_EXT	= #83F0
global constant GL_COMPRESSED_RGBA_S3TC_DXT1_EXT	= #83F1
global constant GL_COMPRESSED_RGBA_S3TC_DXT3_EXT	= #83F2
global constant GL_COMPRESSED_RGBA_S3TC_DXT5_EXT	= #83F3

global constant GL_CULL_VERTEX_IBM	= 103050


global constant GL_VERTEX_ARRAY_LIST_IBM	= 103070
global constant GL_NORMAL_ARRAY_LIST_IBM	= 103071
global constant GL_COLOR_ARRAY_LIST_IBM	= 103072
global constant GL_INDEX_ARRAY_LIST_IBM	= 103073
global constant GL_TEXTURE_COORD_ARRAY_LIST_IBM	= 103074
global constant GL_EDGE_FLAG_ARRAY_LIST_IBM	= 103075
global constant GL_FOG_COORDINATE_ARRAY_LIST_IBM	= 103076
global constant GL_SECONDARY_COLOR_ARRAY_LIST_IBM	= 103077
global constant GL_VERTEX_ARRAY_LIST_STRIDE_IBM	= 103080
global constant GL_NORMAL_ARRAY_LIST_STRIDE_IBM	= 103081
global constant GL_COLOR_ARRAY_LIST_STRIDE_IBM	= 103082
global constant GL_INDEX_ARRAY_LIST_STRIDE_IBM	= 103083
global constant GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM	= 103084
global constant GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM	= 103085
global constant GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM	= 103086
global constant GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM	= 103087

global constant GL_PACK_SUBSAMPLE_RATE_SGIX	= #85A0
global constant GL_UNPACK_SUBSAMPLE_RATE_SGIX	= #85A1
global constant GL_PIXEL_SUBSAMPLE_4444_SGIX	= #85A2
global constant GL_PIXEL_SUBSAMPLE_2424_SGIX	= #85A3
global constant GL_PIXEL_SUBSAMPLE_4242_SGIX	= #85A4


global constant GL_YCRCB_SGIX	= #8318
global constant GL_YCRCBA_SGIX	= #8319

global constant GL_DEPTH_PASS_INSTRUMENT_SGIX	= #8310
global constant GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX	= #8311
global constant GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX	= #8312

global constant GL_COMPRESSED_RGB_FXT1_3DFX	= #86B0
global constant GL_COMPRESSED_RGBA_FXT1_3DFX	= #86B1

global constant GL_MULTISAMPLE_3DFX	= #86B2
global constant GL_SAMPLE_BUFFERS_3DFX	= #86B3
global constant GL_SAMPLES_3DFX	= #86B4
global constant GL_MULTISAMPLE_BIT_3DFX	= #20000000


global constant GL_MULTISAMPLE_EXT	= #809D
global constant GL_SAMPLE_ALPHA_TO_MASK_EXT	= #809E
global constant GL_SAMPLE_ALPHA_TO_ONE_EXT	= #809F
global constant GL_SAMPLE_MASK_EXT	= #80A0
global constant GL_1PASS_EXT	= #80A1
global constant GL_2PASS_0_EXT	= #80A2
global constant GL_2PASS_1_EXT	= #80A3
global constant GL_4PASS_0_EXT	= #80A4
global constant GL_4PASS_1_EXT	= #80A5
global constant GL_4PASS_2_EXT	= #80A6
global constant GL_4PASS_3_EXT	= #80A7
global constant GL_SAMPLE_BUFFERS_EXT	= #80A8
global constant GL_SAMPLES_EXT	= #80A9
global constant GL_SAMPLE_MASK_VALUE_EXT	= #80AA
global constant GL_SAMPLE_MASK_INVERT_EXT	= #80AB
global constant GL_SAMPLE_PATTERN_EXT	= #80AC
global constant GL_MULTISAMPLE_BIT_EXT	= #20000000

global constant GL_VERTEX_PRECLIP_SGIX	= #83EE
global constant GL_VERTEX_PRECLIP_HINT_SGIX	= #83EF

global constant GL_CONVOLUTION_HINT_SGIX	= #8316

global constant GL_PACK_RESAMPLE_SGIX	= #842C
global constant GL_UNPACK_RESAMPLE_SGIX	= #842D
global constant GL_RESAMPLE_REPLICATE_SGIX	= #842E
global constant GL_RESAMPLE_ZERO_FILL_SGIX	= #842F
global constant GL_RESAMPLE_DECIMATE_SGIX	= #8430

global constant GL_EYE_DISTANCE_TO_POINT_SGIS	= #81F0
global constant GL_OBJECT_DISTANCE_TO_POINT_SGIS	= #81F1
global constant GL_EYE_DISTANCE_TO_LINE_SGIS	= #81F2
global constant GL_OBJECT_DISTANCE_TO_LINE_SGIS	= #81F3
global constant GL_EYE_POINT_SGIS	= #81F4
global constant GL_OBJECT_POINT_SGIS	= #81F5
global constant GL_EYE_LINE_SGIS	= #81F6
global constant GL_OBJECT_LINE_SGIS	= #81F7

global constant GL_TEXTURE_COLOR_WRITEMASK_SGIS	= #81EF

global constant GL_DOT3_RGB_EXT	= #8740
global constant GL_DOT3_RGBA_EXT	= #8741

global constant GL_MIRROR_CLAMP_ATI	= #8742
global constant GL_MIRROR_CLAMP_TO_EDGE_ATI	= #8743

global constant GL_ALL_COMPLETED_NV	= #84F2
global constant GL_FENCE_STATUS_NV	= #84F3
global constant GL_FENCE_CONDITION_NV	= #84F4

global constant GL_MIRRORED_REPEAT_IBM	= #8370

global constant GL_EVAL_2D_NV	= #86C0
global constant GL_EVAL_TRIANGULAR_2D_NV	= #86C1
global constant GL_MAP_TESSELLATION_NV	= #86C2
global constant GL_MAP_ATTRIB_U_ORDER_NV	= #86C3
global constant GL_MAP_ATTRIB_V_ORDER_NV	= #86C4
global constant GL_EVAL_FRACTIONAL_TESSELLATION_NV	= #86C5
global constant GL_EVAL_VERTEX_ATTRIB0_NV	= #86C6
global constant GL_EVAL_VERTEX_ATTRIB1_NV	= #86C7
global constant GL_EVAL_VERTEX_ATTRIB2_NV	= #86C8
global constant GL_EVAL_VERTEX_ATTRIB3_NV	= #86C9
global constant GL_EVAL_VERTEX_ATTRIB4_NV	= #86CA
global constant GL_EVAL_VERTEX_ATTRIB5_NV	= #86CB
global constant GL_EVAL_VERTEX_ATTRIB6_NV	= #86CC
global constant GL_EVAL_VERTEX_ATTRIB7_NV	= #86CD
global constant GL_EVAL_VERTEX_ATTRIB8_NV	= #86CE
global constant GL_EVAL_VERTEX_ATTRIB9_NV	= #86CF
global constant GL_EVAL_VERTEX_ATTRIB10_NV	= #86D0
global constant GL_EVAL_VERTEX_ATTRIB11_NV	= #86D1
global constant GL_EVAL_VERTEX_ATTRIB12_NV	= #86D2
global constant GL_EVAL_VERTEX_ATTRIB13_NV	= #86D3
global constant GL_EVAL_VERTEX_ATTRIB14_NV	= #86D4
global constant GL_EVAL_VERTEX_ATTRIB15_NV	= #86D5
global constant GL_MAX_MAP_TESSELLATION_NV	= #86D6
global constant GL_MAX_RATIONAL_EVAL_ORDER_NV	= #86D7

global constant GL_DEPTH_STENCIL_NV	= #84F9
global constant GL_UNSIGNED_INT_24_8_NV	= #84FA

global constant GL_PER_STAGE_CONSTANTS_NV	= #8535


global constant GL_TEXTURE_RECTANGLE_NV	= #84F5
global constant GL_TEXTURE_BINDING_RECTANGLE_NV	= #84F6
global constant GL_PROXY_TEXTURE_RECTANGLE_NV	= #84F7
global constant GL_MAX_RECTANGLE_TEXTURE_SIZE_NV	= #84F8

global constant GL_OFFSET_TEXTURE_RECTANGLE_NV	= #864C
global constant GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV	= #864D
global constant GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV	= #864E
global constant GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV	= #86D9
global constant GL_UNSIGNED_INT_S8_S8_8_8_NV	= #86DA
global constant GL_UNSIGNED_INT_8_8_S8_S8_REV_NV	= #86DB
global constant GL_DSDT_MAG_INTENSITY_NV	= #86DC
global constant GL_SHADER_CONSISTENT_NV	= #86DD
global constant GL_TEXTURE_SHADER_NV	= #86DE
global constant GL_SHADER_OPERATION_NV	= #86DF
global constant GL_CULL_MODES_NV	= #86E0
global constant GL_OFFSET_TEXTURE_MATRIX_NV	= #86E1
global constant GL_OFFSET_TEXTURE_SCALE_NV	= #86E2
global constant GL_OFFSET_TEXTURE_BIAS_NV	= #86E3
global constant GL_PREVIOUS_TEXTURE_INPUT_NV	= #86E4
global constant GL_CONST_EYE_NV	= #86E5
global constant GL_PASS_THROUGH_NV	= #86E6
global constant GL_CULL_FRAGMENT_NV	= #86E7
global constant GL_OFFSET_TEXTURE_2D_NV	= #86E8
global constant GL_DEPENDENT_AR_TEXTURE_2D_NV	= #86E9
global constant GL_DEPENDENT_GB_TEXTURE_2D_NV	= #86EA
global constant GL_DOT_PRODUCT_NV	= #86EC
global constant GL_DOT_PRODUCT_DEPTH_REPLACE_NV	= #86ED
global constant GL_DOT_PRODUCT_TEXTURE_2D_NV	= #86EE
global constant GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV	= #86F0
global constant GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV	= #86F1
global constant GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV	= #86F2
global constant GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV	= #86F3
global constant GL_HILO_NV	= #86F4
global constant GL_DSDT_NV	= #86F5
global constant GL_DSDT_MAG_NV	= #86F6
global constant GL_DSDT_MAG_VIB_NV	= #86F7
global constant GL_HILO16_NV	= #86F8
global constant GL_SIGNED_HILO_NV	= #86F9
global constant GL_SIGNED_HILO16_NV	= #86FA
global constant GL_SIGNED_RGBA_NV	= #86FB
global constant GL_SIGNED_RGBA8_NV	= #86FC
global constant GL_SIGNED_RGB_NV	= #86FE
global constant GL_SIGNED_RGB8_NV	= #86FF
global constant GL_SIGNED_LUMINANCE_NV	= #8701
global constant GL_SIGNED_LUMINANCE8_NV	= #8702
global constant GL_SIGNED_LUMINANCE_ALPHA_NV	= #8703
global constant GL_SIGNED_LUMINANCE8_ALPHA8_NV	= #8704
global constant GL_SIGNED_ALPHA_NV	= #8705
global constant GL_SIGNED_ALPHA8_NV	= #8706
global constant GL_SIGNED_INTENSITY_NV	= #8707
global constant GL_SIGNED_INTENSITY8_NV	= #8708
global constant GL_DSDT8_NV	= #8709
global constant GL_DSDT8_MAG8_NV	= #870A
global constant GL_DSDT8_MAG8_INTENSITY8_NV	= #870B
global constant GL_SIGNED_RGB_UNSIGNED_ALPHA_NV	= #870C
global constant GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV	= #870D
global constant GL_HI_SCALE_NV	= #870E
global constant GL_LO_SCALE_NV	= #870F
global constant GL_DS_SCALE_NV	= #8710
global constant GL_DT_SCALE_NV	= #8711
global constant GL_MAGNITUDE_SCALE_NV	= #8712
global constant GL_VIBRANCE_SCALE_NV	= #8713
global constant GL_HI_BIAS_NV	= #8714
global constant GL_LO_BIAS_NV	= #8715
global constant GL_DS_BIAS_NV	= #8716
global constant GL_DT_BIAS_NV	= #8717
global constant GL_MAGNITUDE_BIAS_NV	= #8718
global constant GL_VIBRANCE_BIAS_NV	= #8719
global constant GL_TEXTURE_BORDER_VALUES_NV	= #871A
global constant GL_TEXTURE_HI_SIZE_NV	= #871B
global constant GL_TEXTURE_LO_SIZE_NV	= #871C
global constant GL_TEXTURE_DS_SIZE_NV	= #871D
global constant GL_TEXTURE_DT_SIZE_NV	= #871E
global constant GL_TEXTURE_MAG_SIZE_NV	= #871F

global constant GL_DOT_PRODUCT_TEXTURE_3D_NV	= #86EF

global constant GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV	= #8533

global constant GL_VERTEX_PROGRAM_NV	= #8620
global constant GL_VERTEX_STATE_PROGRAM_NV	= #8621
global constant GL_ATTRIB_ARRAY_SIZE_NV	= #8623
global constant GL_ATTRIB_ARRAY_STRIDE_NV	= #8624
global constant GL_ATTRIB_ARRAY_TYPE_NV	= #8625
global constant GL_CURRENT_ATTRIB_NV	= #8626
global constant GL_PROGRAM_LENGTH_NV	= #8627
global constant GL_PROGRAM_STRING_NV	= #8628
global constant GL_MODELVIEW_PROJECTION_NV	= #8629
global constant GL_IDENTITY_NV	= #862A
global constant GL_INVERSE_NV	= #862B
global constant GL_TRANSPOSE_NV	= #862C
global constant GL_INVERSE_TRANSPOSE_NV	= #862D
global constant GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV	= #862E
global constant GL_MAX_TRACK_MATRICES_NV	= #862F
global constant GL_MATRIX0_NV	= #8630
global constant GL_MATRIX1_NV	= #8631
global constant GL_MATRIX2_NV	= #8632
global constant GL_MATRIX3_NV	= #8633
global constant GL_MATRIX4_NV	= #8634
global constant GL_MATRIX5_NV	= #8635
global constant GL_MATRIX6_NV	= #8636
global constant GL_MATRIX7_NV	= #8637
global constant GL_CURRENT_MATRIX_STACK_DEPTH_NV	= #8640
global constant GL_CURRENT_MATRIX_NV	= #8641
global constant GL_VERTEX_PROGRAM_POINT_SIZE_NV	= #8642
global constant GL_VERTEX_PROGRAM_TWO_SIDE_NV	= #8643
global constant GL_PROGRAM_PARAMETER_NV	= #8644
global constant GL_ATTRIB_ARRAY_POINTER_NV	= #8645
global constant GL_PROGRAM_TARGET_NV	= #8646
global constant GL_PROGRAM_RESIDENT_NV	= #8647
global constant GL_TRACK_MATRIX_NV	= #8648
global constant GL_TRACK_MATRIX_TRANSFORM_NV	= #8649
global constant GL_VERTEX_PROGRAM_BINDING_NV	= #864A
global constant GL_PROGRAM_ERROR_POSITION_NV	= #864B
global constant GL_VERTEX_ATTRIB_ARRAY0_NV	= #8650
global constant GL_VERTEX_ATTRIB_ARRAY1_NV	= #8651
global constant GL_VERTEX_ATTRIB_ARRAY2_NV	= #8652
global constant GL_VERTEX_ATTRIB_ARRAY3_NV	= #8653
global constant GL_VERTEX_ATTRIB_ARRAY4_NV	= #8654
global constant GL_VERTEX_ATTRIB_ARRAY5_NV	= #8655
global constant GL_VERTEX_ATTRIB_ARRAY6_NV	= #8656
global constant GL_VERTEX_ATTRIB_ARRAY7_NV	= #8657
global constant GL_VERTEX_ATTRIB_ARRAY8_NV	= #8658
global constant GL_VERTEX_ATTRIB_ARRAY9_NV	= #8659
global constant GL_VERTEX_ATTRIB_ARRAY10_NV	= #865A
global constant GL_VERTEX_ATTRIB_ARRAY11_NV	= #865B
global constant GL_VERTEX_ATTRIB_ARRAY12_NV	= #865C
global constant GL_VERTEX_ATTRIB_ARRAY13_NV	= #865D
global constant GL_VERTEX_ATTRIB_ARRAY14_NV	= #865E
global constant GL_VERTEX_ATTRIB_ARRAY15_NV	= #865F
global constant GL_MAP1_VERTEX_ATTRIB0_4_NV	= #8660
global constant GL_MAP1_VERTEX_ATTRIB1_4_NV	= #8661
global constant GL_MAP1_VERTEX_ATTRIB2_4_NV	= #8662
global constant GL_MAP1_VERTEX_ATTRIB3_4_NV	= #8663
global constant GL_MAP1_VERTEX_ATTRIB4_4_NV	= #8664
global constant GL_MAP1_VERTEX_ATTRIB5_4_NV	= #8665
global constant GL_MAP1_VERTEX_ATTRIB6_4_NV	= #8666
global constant GL_MAP1_VERTEX_ATTRIB7_4_NV	= #8667
global constant GL_MAP1_VERTEX_ATTRIB8_4_NV	= #8668
global constant GL_MAP1_VERTEX_ATTRIB9_4_NV	= #8669
global constant GL_MAP1_VERTEX_ATTRIB10_4_NV	= #866A
global constant GL_MAP1_VERTEX_ATTRIB11_4_NV	= #866B
global constant GL_MAP1_VERTEX_ATTRIB12_4_NV	= #866C
global constant GL_MAP1_VERTEX_ATTRIB13_4_NV	= #866D
global constant GL_MAP1_VERTEX_ATTRIB14_4_NV	= #866E
global constant GL_MAP1_VERTEX_ATTRIB15_4_NV	= #866F
global constant GL_MAP2_VERTEX_ATTRIB0_4_NV	= #8670
global constant GL_MAP2_VERTEX_ATTRIB1_4_NV	= #8671
global constant GL_MAP2_VERTEX_ATTRIB2_4_NV	= #8672
global constant GL_MAP2_VERTEX_ATTRIB3_4_NV	= #8673
global constant GL_MAP2_VERTEX_ATTRIB4_4_NV	= #8674
global constant GL_MAP2_VERTEX_ATTRIB5_4_NV	= #8675
global constant GL_MAP2_VERTEX_ATTRIB6_4_NV	= #8676
global constant GL_MAP2_VERTEX_ATTRIB7_4_NV	= #8677
global constant GL_MAP2_VERTEX_ATTRIB8_4_NV	= #8678
global constant GL_MAP2_VERTEX_ATTRIB9_4_NV	= #8679
global constant GL_MAP2_VERTEX_ATTRIB10_4_NV	= #867A
global constant GL_MAP2_VERTEX_ATTRIB11_4_NV	= #867B
global constant GL_MAP2_VERTEX_ATTRIB12_4_NV	= #867C
global constant GL_MAP2_VERTEX_ATTRIB13_4_NV	= #867D
global constant GL_MAP2_VERTEX_ATTRIB14_4_NV	= #867E
global constant GL_MAP2_VERTEX_ATTRIB15_4_NV	= #867F

global constant GL_TEXTURE_MAX_CLAMP_S_SGIX	= #8369
global constant GL_TEXTURE_MAX_CLAMP_T_SGIX	= #836A
global constant GL_TEXTURE_MAX_CLAMP_R_SGIX	= #836B

global constant GL_SCALEBIAS_HINT_SGIX	= #8322

global constant GL_INTERLACE_OML	= #8980
global constant GL_INTERLACE_READ_OML	= #8981

global constant GL_FORMAT_SUBSAMPLE_24_24_OML	= #8982
global constant GL_FORMAT_SUBSAMPLE_244_244_OML	= #8983

global constant GL_PACK_RESAMPLE_OML	= #8984
global constant GL_UNPACK_RESAMPLE_OML	= #8985
global constant GL_RESAMPLE_REPLICATE_OML	= #8986
global constant GL_RESAMPLE_ZERO_FILL_OML	= #8987
global constant GL_RESAMPLE_AVERAGE_OML	= #8988
global constant GL_RESAMPLE_DECIMATE_OML	= #8989

global constant GL_DEPTH_STENCIL_TO_RGBA_NV	= #886E
global constant GL_DEPTH_STENCIL_TO_BGRA_NV	= #886F

global constant GL_BUMP_ROT_MATRIX_ATI	= #8775
global constant GL_BUMP_ROT_MATRIX_SIZE_ATI	= #8776
global constant GL_BUMP_NUM_TEX_UNITS_ATI	= #8777
global constant GL_BUMP_TEX_UNITS_ATI	= #8778
global constant GL_DUDV_ATI	= #8779
global constant GL_DU8DV8_ATI	= #877A
global constant GL_BUMP_ENVMAP_ATI	= #877B
global constant GL_BUMP_TARGET_ATI	= #877C

global constant GL_FRAGMENT_SHADER_ATI	= #8920
global constant GL_REG_0_ATI	= #8921
global constant GL_REG_1_ATI	= #8922
global constant GL_REG_2_ATI	= #8923
global constant GL_REG_3_ATI	= #8924
global constant GL_REG_4_ATI	= #8925
global constant GL_REG_5_ATI	= #8926
global constant GL_REG_6_ATI	= #8927
global constant GL_REG_7_ATI	= #8928
global constant GL_REG_8_ATI	= #8929
global constant GL_REG_9_ATI	= #892A
global constant GL_REG_10_ATI	= #892B
global constant GL_REG_11_ATI	= #892C
global constant GL_REG_12_ATI	= #892D
global constant GL_REG_13_ATI	= #892E
global constant GL_REG_14_ATI	= #892F
global constant GL_REG_15_ATI	= #8930
global constant GL_REG_16_ATI	= #8931
global constant GL_REG_17_ATI	= #8932
global constant GL_REG_18_ATI	= #8933
global constant GL_REG_19_ATI	= #8934
global constant GL_REG_20_ATI	= #8935
global constant GL_REG_21_ATI	= #8936
global constant GL_REG_22_ATI	= #8937
global constant GL_REG_23_ATI	= #8938
global constant GL_REG_24_ATI	= #8939
global constant GL_REG_25_ATI	= #893A
global constant GL_REG_26_ATI	= #893B
global constant GL_REG_27_ATI	= #893C
global constant GL_REG_28_ATI	= #893D
global constant GL_REG_29_ATI	= #893E
global constant GL_REG_30_ATI	= #893F
global constant GL_REG_31_ATI	= #8940
global constant GL_CON_0_ATI	= #8941
global constant GL_CON_1_ATI	= #8942
global constant GL_CON_2_ATI	= #8943
global constant GL_CON_3_ATI	= #8944
global constant GL_CON_4_ATI	= #8945
global constant GL_CON_5_ATI	= #8946
global constant GL_CON_6_ATI	= #8947
global constant GL_CON_7_ATI	= #8948
global constant GL_CON_8_ATI	= #8949
global constant GL_CON_9_ATI	= #894A
global constant GL_CON_10_ATI	= #894B
global constant GL_CON_11_ATI	= #894C
global constant GL_CON_12_ATI	= #894D
global constant GL_CON_13_ATI	= #894E
global constant GL_CON_14_ATI	= #894F
global constant GL_CON_15_ATI	= #8950
global constant GL_CON_16_ATI	= #8951
global constant GL_CON_17_ATI	= #8952
global constant GL_CON_18_ATI	= #8953
global constant GL_CON_19_ATI	= #8954
global constant GL_CON_20_ATI	= #8955
global constant GL_CON_21_ATI	= #8956
global constant GL_CON_22_ATI	= #8957
global constant GL_CON_23_ATI	= #8958
global constant GL_CON_24_ATI	= #8959
global constant GL_CON_25_ATI	= #895A
global constant GL_CON_26_ATI	= #895B
global constant GL_CON_27_ATI	= #895C
global constant GL_CON_28_ATI	= #895D
global constant GL_CON_29_ATI	= #895E
global constant GL_CON_30_ATI	= #895F
global constant GL_CON_31_ATI	= #8960
global constant GL_MOV_ATI	= #8961
global constant GL_ADD_ATI	= #8963
global constant GL_MUL_ATI	= #8964
global constant GL_SUB_ATI	= #8965
global constant GL_DOT3_ATI	= #8966
global constant GL_DOT4_ATI	= #8967
global constant GL_MAD_ATI	= #8968
global constant GL_LERP_ATI	= #8969
global constant GL_CND_ATI	= #896A
global constant GL_CND0_ATI	= #896B
global constant GL_DOT2_ADD_ATI	= #896C
global constant GL_SECONDARY_INTERPOLATOR_ATI	= #896D
global constant GL_NUM_FRAGMENT_REGISTERS_ATI	= #896E
global constant GL_NUM_FRAGMENT_CONSTANTS_ATI	= #896F
global constant GL_NUM_PASSES_ATI	= #8970
global constant GL_NUM_INSTRUCTIONS_PER_PASS_ATI	= #8971
global constant GL_NUM_INSTRUCTIONS_TOTAL_ATI	= #8972
global constant GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI	= #8973
global constant GL_NUM_LOOPBACK_COMPONENTS_ATI	= #8974
global constant GL_COLOR_ALPHA_PAIRING_ATI	= #8975
global constant GL_SWIZZLE_STR_ATI	= #8976
global constant GL_SWIZZLE_STQ_ATI	= #8977
global constant GL_SWIZZLE_STR_DR_ATI	= #8978
global constant GL_SWIZZLE_STQ_DQ_ATI	= #8979
global constant GL_SWIZZLE_STRQ_ATI	= #897A
global constant GL_SWIZZLE_STRQ_DQ_ATI	= #897B
global constant GL_RED_BIT_ATI	= #00000001
global constant GL_GREEN_BIT_ATI	= #00000002
global constant GL_BLUE_BIT_ATI	= #00000004
global constant GL_2X_BIT_ATI	= #00000001
global constant GL_4X_BIT_ATI	= #00000002
global constant GL_8X_BIT_ATI	= #00000004
global constant GL_HALF_BIT_ATI	= #00000008
global constant GL_QUARTER_BIT_ATI	= #00000010
global constant GL_EIGHTH_BIT_ATI	= #00000020
global constant GL_SATURATE_BIT_ATI	= #00000040
global constant GL_COMP_BIT_ATI	= #00000002
global constant GL_NEGATE_BIT_ATI	= #00000004
global constant GL_BIAS_BIT_ATI	= #00000008

global constant GL_PN_TRIANGLES_ATI	= #87F0
global constant GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI	= #87F1
global constant GL_PN_TRIANGLES_POINT_MODE_ATI	= #87F2
global constant GL_PN_TRIANGLES_NORMAL_MODE_ATI	= #87F3
global constant GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI	= #87F4
global constant GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI	= #87F5
global constant GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI	= #87F6
global constant GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI	= #87F7
global constant GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI	= #87F8

global constant GL_STATIC_ATI	= #8760
global constant GL_DYNAMIC_ATI	= #8761
global constant GL_PRESERVE_ATI	= #8762
global constant GL_DISCARD_ATI	= #8763
global constant GL_OBJECT_BUFFER_SIZE_ATI	= #8764
global constant GL_OBJECT_BUFFER_USAGE_ATI	= #8765
global constant GL_ARRAY_OBJECT_BUFFER_ATI	= #8766
global constant GL_ARRAY_OBJECT_OFFSET_ATI	= #8767

global constant GL_VERTEX_SHADER_EXT	= #8780
global constant GL_VERTEX_SHADER_BINDING_EXT	= #8781
global constant GL_OP_INDEX_EXT	= #8782
global constant GL_OP_NEGATE_EXT	= #8783
global constant GL_OP_DOT3_EXT	= #8784
global constant GL_OP_DOT4_EXT	= #8785
global constant GL_OP_MUL_EXT	= #8786
global constant GL_OP_ADD_EXT	= #8787
global constant GL_OP_MADD_EXT	= #8788
global constant GL_OP_FRAC_EXT	= #8789
global constant GL_OP_MAX_EXT	= #878A
global constant GL_OP_MIN_EXT	= #878B
global constant GL_OP_SET_GE_EXT	= #878C
global constant GL_OP_SET_LT_EXT	= #878D
global constant GL_OP_CLAMP_EXT	= #878E
global constant GL_OP_FLOOR_EXT	= #878F
global constant GL_OP_ROUND_EXT	= #8790
global constant GL_OP_EXP_BASE_2_EXT	= #8791
global constant GL_OP_LOG_BASE_2_EXT	= #8792
global constant GL_OP_POWER_EXT	= #8793
global constant GL_OP_RECIP_EXT	= #8794
global constant GL_OP_RECIP_SQRT_EXT	= #8795
global constant GL_OP_SUB_EXT	= #8796
global constant GL_OP_CROSS_PRODUCT_EXT	= #8797
global constant GL_OP_MULTIPLY_MATRIX_EXT	= #8798
global constant GL_OP_MOV_EXT	= #8799
global constant GL_OUTPUT_VERTEX_EXT	= #879A
global constant GL_OUTPUT_COLOR0_EXT	= #879B
global constant GL_OUTPUT_COLOR1_EXT	= #879C
global constant GL_OUTPUT_TEXTURE_COORD0_EXT	= #879D
global constant GL_OUTPUT_TEXTURE_COORD1_EXT	= #879E
global constant GL_OUTPUT_TEXTURE_COORD2_EXT	= #879F
global constant GL_OUTPUT_TEXTURE_COORD3_EXT	= #87A0
global constant GL_OUTPUT_TEXTURE_COORD4_EXT	= #87A1
global constant GL_OUTPUT_TEXTURE_COORD5_EXT	= #87A2
global constant GL_OUTPUT_TEXTURE_COORD6_EXT	= #87A3
global constant GL_OUTPUT_TEXTURE_COORD7_EXT	= #87A4
global constant GL_OUTPUT_TEXTURE_COORD8_EXT	= #87A5
global constant GL_OUTPUT_TEXTURE_COORD9_EXT	= #87A6
global constant GL_OUTPUT_TEXTURE_COORD10_EXT	= #87A7
global constant GL_OUTPUT_TEXTURE_COORD11_EXT	= #87A8
global constant GL_OUTPUT_TEXTURE_COORD12_EXT	= #87A9
global constant GL_OUTPUT_TEXTURE_COORD13_EXT	= #87AA
global constant GL_OUTPUT_TEXTURE_COORD14_EXT	= #87AB
global constant GL_OUTPUT_TEXTURE_COORD15_EXT	= #87AC
global constant GL_OUTPUT_TEXTURE_COORD16_EXT	= #87AD
global constant GL_OUTPUT_TEXTURE_COORD17_EXT	= #87AE
global constant GL_OUTPUT_TEXTURE_COORD18_EXT	= #87AF
global constant GL_OUTPUT_TEXTURE_COORD19_EXT	= #87B0
global constant GL_OUTPUT_TEXTURE_COORD20_EXT	= #87B1
global constant GL_OUTPUT_TEXTURE_COORD21_EXT	= #87B2
global constant GL_OUTPUT_TEXTURE_COORD22_EXT	= #87B3
global constant GL_OUTPUT_TEXTURE_COORD23_EXT	= #87B4
global constant GL_OUTPUT_TEXTURE_COORD24_EXT	= #87B5
global constant GL_OUTPUT_TEXTURE_COORD25_EXT	= #87B6
global constant GL_OUTPUT_TEXTURE_COORD26_EXT	= #87B7
global constant GL_OUTPUT_TEXTURE_COORD27_EXT	= #87B8
global constant GL_OUTPUT_TEXTURE_COORD28_EXT	= #87B9
global constant GL_OUTPUT_TEXTURE_COORD29_EXT	= #87BA
global constant GL_OUTPUT_TEXTURE_COORD30_EXT	= #87BB
global constant GL_OUTPUT_TEXTURE_COORD31_EXT	= #87BC
global constant GL_OUTPUT_FOG_EXT	= #87BD
global constant GL_SCALAR_EXT	= #87BE
global constant GL_VECTOR_EXT	= #87BF
global constant GL_MATRIX_EXT	= #87C0
global constant GL_VARIANT_EXT	= #87C1
global constant GL_INVARIANT_EXT	= #87C2
global constant GL_LOCAL_CONSTANT_EXT	= #87C3
global constant GL_LOCAL_EXT	= #87C4
global constant GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT	= #87C5
global constant GL_MAX_VERTEX_SHADER_VARIANTS_EXT	= #87C6
global constant GL_MAX_VERTEX_SHADER_INVARIANTS_EXT	= #87C7
global constant GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT	= #87C8
global constant GL_MAX_VERTEX_SHADER_LOCALS_EXT	= #87C9
global constant GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT	= #87CA
global constant GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT	= #87CB
global constant GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT	= #87CC
global constant GL_MAX_OPTIMIZED_VERTEX_SHADER_INARIANTS_EXT	= #87CD
global constant GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT	= #87CE
global constant GL_VERTEX_SHADER_INSTRUCTIONS_EXT	= #87CF
global constant GL_VERTEX_SHADER_VARIANTS_EXT	= #87D0
global constant GL_VERTEX_SHADER_INVARIANTS_EXT	= #87D1
global constant GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT	= #87D2
global constant GL_VERTEX_SHADER_LOCALS_EXT	= #87D3
global constant GL_VERTEX_SHADER_OPTIMIZED_EXT	= #87D4
global constant GL_X_EXT	= #87D5
global constant GL_Y_EXT	= #87D6
global constant GL_Z_EXT	= #87D7
global constant GL_W_EXT	= #87D8
global constant GL_NEGATIVE_X_EXT	= #87D9
global constant GL_NEGATIVE_Y_EXT	= #87DA
global constant GL_NEGATIVE_Z_EXT	= #87DB
global constant GL_NEGATIVE_W_EXT	= #87DC
global constant GL_ZERO_EXT	= #87DD
global constant GL_ONE_EXT	= #87DE
global constant GL_NEGATIVE_ONE_EXT	= #87DF
global constant GL_NORMALIZED_RANGE_EXT	= #87E0
global constant GL_FULL_RANGE_EXT	= #87E1
global constant GL_CURRENT_VERTEX_EXT	= #87E2
global constant GL_MVP_MATRIX_EXT	= #87E3
global constant GL_VARIANT_VALUE_EXT	= #87E4
global constant GL_VARIANT_DATATYPE_EXT	= #87E5
global constant GL_VARIANT_ARRAY_STRIDE_EXT	= #87E6
global constant GL_VARIANT_ARRAY_TYPE_EXT	= #87E7
global constant GL_VARIANT_ARRAY_EXT	= #87E8
global constant GL_VARIANT_ARRAY_POINTER_EXT	= #87E9
global constant GL_INVARIANT_VALUE_EXT	= #87EA
global constant GL_INVARIANT_DATATYPE_EXT	= #87EB
global constant GL_LOCAL_CONSTANT_VALUE_EXT	= #87EC
global constant GL_LOCAL_CONSTANT_DATATYPE_EXT	= #87ED

global constant GL_MAX_VERTEX_STREAMS_ATI	= #876B
global constant GL_VERTEX_STREAM0_ATI	= #876C
global constant GL_VERTEX_STREAM1_ATI	= #876D
global constant GL_VERTEX_STREAM2_ATI	= #876E
global constant GL_VERTEX_STREAM3_ATI	= #876F
global constant GL_VERTEX_STREAM4_ATI	= #8770
global constant GL_VERTEX_STREAM5_ATI	= #8771
global constant GL_VERTEX_STREAM6_ATI	= #8772
global constant GL_VERTEX_STREAM7_ATI	= #8773
global constant GL_VERTEX_SOURCE_ATI	= #8774

global constant GL_ELEMENT_ARRAY_ATI	= #8768
global constant GL_ELEMENT_ARRAY_TYPE_ATI	= #8769
global constant GL_ELEMENT_ARRAY_POINTER_ATI	= #876A

global constant GL_QUAD_MESH_SUN	= #8614
global constant GL_TRIANGLE_MESH_SUN	= #8615

global constant GL_SLICE_ACCUM_SUN	= #85CC

global constant GL_MULTISAMPLE_FILTER_HINT_NV	= #8534

global constant GL_DEPTH_CLAMP_NV	= #864F

global constant GL_PIXEL_COUNTER_BITS_NV	= #8864
global constant GL_CURRENT_OCCLUSION_QUERY_ID_NV	= #8865
global constant GL_PIXEL_COUNT_NV	= #8866
global constant GL_PIXEL_COUNT_AVAILABLE_NV	= #8867

global constant GL_POINT_SPRITE_NV	= #8861
global constant GL_COORD_REPLACE_NV	= #8862
global constant GL_POINT_SPRITE_R_MODE_NV	= #8863

global constant GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV	= #8850
global constant GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV	= #8851
global constant GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV	= #8852
global constant GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV	= #8853
global constant GL_OFFSET_HILO_TEXTURE_2D_NV	= #8854
global constant GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV	= #8855
global constant GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV	= #8856
global constant GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV	= #8857
global constant GL_DEPENDENT_HILO_TEXTURE_2D_NV	= #8858
global constant GL_DEPENDENT_RGB_TEXTURE_3D_NV	= #8859
global constant GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV	= #885A
global constant GL_DOT_PRODUCT_PASS_THROUGH_NV	= #885B
global constant GL_DOT_PRODUCT_TEXTURE_1D_NV	= #885C
global constant GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV	= #885D
global constant GL_HILO8_NV	= #885E
global constant GL_SIGNED_HILO8_NV	= #885F
global constant GL_FORCE_BLUE_TO_ONE_NV	= #8860

global constant GL_STENCIL_TEST_TWO_SIDE_EXT	= #8910
global constant GL_ACTIVE_STENCIL_FACE_EXT	= #8911

global constant GL_STENCIL_BACK_FUNC_ATI                    = #8800
global constant GL_STENCIL_BACK_FAIL_ATI                    = #8801
global constant GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI         = #8802
global constant GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI         = #8803

global constant GL_RGBA_FLOAT32_ATI                 = #8814
global constant GL_RGB_FLOAT32_ATI                  = #8815
global constant GL_ALPHA_FLOAT32_ATI                = #8816
global constant GL_INTENSITY_FLOAT32_ATI            = #8817
global constant GL_LUMINANCE_FLOAT32_ATI            = #8818
global constant GL_LUMINANCE_ALPHA_FLOAT32_ATI      = #8819
global constant GL_RGBA_FLOAT16_ATI                 = #881A
global constant GL_RGB_FLOAT16_ATI                  = #881B
global constant GL_ALPHA_FLOAT16_ATI                = #881C
global constant GL_INTENSITY_FLOAT16_ATI            = #881D
global constant GL_LUMINANCE_FLOAT16_ATI            = #881E
global constant GL_LUMINANCE_ALPHA_FLOAT16_ATI      = #881F

global constant GL_FLOAT_R_NV                     = #8880
global constant GL_FLOAT_RG_NV                    = #8881
global constant GL_FLOAT_RGB_NV                   = #8882
global constant GL_FLOAT_RGBA_NV                  = #8883
global constant GL_FLOAT_R16_NV                   = #8884
global constant GL_FLOAT_R32_NV                   = #8885
global constant GL_FLOAT_RG16_NV                  = #8886
global constant GL_FLOAT_RG32_NV                  = #8887
global constant GL_FLOAT_RGB16_NV                 = #8888
global constant GL_FLOAT_RGB32_NV                 = #8889
global constant GL_FLOAT_RGBA16_NV                = #888A
global constant GL_FLOAT_RGBA32_NV                = #888B
global constant GL_TEXTURE_FLOAT_COMPONENTS_NV    = #888C
global constant GL_FLOAT_CLEAR_COLOR_VALUE_NV     = #888D
global constant GL_FLOAT_RGBA_MODE_NV             = #888E




constant gl_extension_names =
{
"GL_VERSION_1_2",
"GL_VERSION_1_3",
"GL_ARB_multitexture",
"GL_ARB_transpose_matrix",
"GL_ARB_multisample",
"GL_ARB_texture_compression",
"GL_ARB_point_parameters",
"GL_ARB_vertex_blend",
"GL_ARB_matrix_palette",
"GL_ARB_window_pos",
--"GL_EXT_blend_color",
"GL_EXT_polygon_offset",
--"GL_EXT_texture3D",
"GL_SGIS_texture_filter4",
--"GL_EXT_subtexture",
"GL_EXT_copy_texture",
"GL_EXT_histogram",
"GL_EXT_convolution",
"GL_SGI_color_table",
"GL_SGIX_pixel_texture",
"GL_SGIS_pixel_texture",
--"GL_SGIS_texture4D",
--"GL_EXT_texture_object",
"GL_SGIS_detail_texture",
"GL_SGIS_sharpen_texture",
"GL_SGIS_multisample",
"GL_EXT_vertex_array",
"GL_EXT_blend_minmax",
"GL_SGIX_sprite",
"GL_EXT_point_parameters",
"GL_SGIS_point_parameters",
"GL_SGIX_instruments",
"GL_SGIX_framezoom",
"GL_SGIX_tag_sample_buffer",
"GL_SGIX_polynomial_ffd",
"GL_SGIX_reference_plane",
"GL_SGIX_flush_raster",
"GL_SGIS_fog_function",
"GL_HP_image_transform",
"GL_EXT_color_subtable",
"GL_PGI_misc_hints",
"GL_EXT_paletted_texture",
--"GL_SGIX_list_priority",
"GL_EXT_index_material",
--"GL_EXT_index_func",
"GL_EXT_compiled_vertex_array",
"GL_EXT_cull_vertex",
"GL_SGIX_fragment_lighting",
--"GL_EXT_draw_range_elements",
"GL_EXT_light_texture",
"GL_SGIX_async",
--"GL_INTEL_parallel_arrays",
"GL_EXT_pixel_transform",
"GL_EXT_secondary_color",
"GL_EXT_texture_perturb_normal",
"GL_EXT_multi_draw_arrays",
"GL_EXT_fog_coord",
"GL_EXT_coordinate_frame",
"GL_SUNX_constant_data",
"GL_SUN_global_alpha",
--"GL_SUN_triangle_list",
"GL_SUN_vertex",
"GL_EXT_blend_func_separate",
"GL_EXT_vertex_weighting",
"GL_NV_vertex_array_range",
"GL_NV_register_combiners",
"GL_MESA_resize_buffers",
"GL_MESA_window_pos",
"GL_IBM_multimode_draw_arrays",
--"GL_IBM_vertex_array_lists",
--"GL_3DFX_tbuffer",
"GL_EXT_multisample",
--"GL_SGIS_texture_color_mask",
--"GL_SGIX_igloo_interface",
--"GL_NV_fence",
"GL_NV_evaluators",
"GL_NV_register_combiners2",
--"GL_NV_vertex_program",
"GL_ATI_envmap_bumpmap",
"GL_ATI_fragment_shader",
"GL_ATI_pn_triangles",
"GL_ATI_separate_stencil",
--"GL_ATI_texture_mirror_once",
"GL_ATI_vertex_array_object",
"GL_EXT_vertex_shader",
"GL_ATI_vertex_streams",
"GL_ATI_element_array",
"GL_ATI_map_object_buffer",
"GL_ATI_vertex_attrib_array_object",
--"GL_ATI_texture_float",
"GL_SUN_mesh_array",
"GL_NV_occlusion_query",
"GL_NV_point_sprite",
"GL_EXT_stencil_two_side"
}



--typedef void (APIENTRY *PFNGLSTENCILOPSEPARATEATIPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
--typedef void (APIENTRY *PFNGLSTENCILFUNCSEPARATEATIPROC)(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);

--GL_ATI_texture_mirror_once  1



--global constant GL_ATI_map_object_buffer                1

--typedef void *(APIENTRY * PFNGLMAPOBJECTBUFFERATIPROC)(GLuint buffer);
--typedef void (APIENTRY * PFNGLUNMAPOBJECTBUFFERATIPROC)(GLuint buffer);

--#endif /* GL_ATI_map_object_buffer */

--GL_ATI_vertex_attrib_array_object 

--typedef void (APIENTRY * PFNGLVERTEXATTRIBARRAYOBJECTATIPROC)(GLuint index, GLint size, GLenum type,
--                                                              GLboolean normalized, GLsizei stride,
--                                                              GLuint buffer, GLuint offset);
--typedef void (APIENTRY * PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC)(GLuint index, GLenum pname,
--                                                                   GLfloat *params);
--typedef void (APIENTRY * PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC)(GLuint index, GLenum pname,
--                                                                   GLint *params);

--#endif /* GL_ATI_vertex_attrib_array_object */




global atom
glBlendEquation,glColorTableParameterfv,glColorTableParameteriv,
glCopyColorTable,glGetColorTableParameterfv,glGetColorTableParameteriv,
glCopyColorSubTable,glConvolutionParameterf,glConvolutionParameterfv,
glConvolutionParameteri,glConvolutionParameteriv,glCopyConvolutionFilter1D,
glCopyConvolutionFilter2D,glGetConvolutionParameterfv,glGetConvolutionParameteriv,
glGetHistogramParameterfv,glGetHistogramParameteriv,glGetMinmaxParameterfv,
glGetMinmaxParameteriv,glResetHistogram,glResetMinmax,
glCopyTexSubImage3D,glActiveTexture,glClientActiveTexture,
glMultiTexCoord1d,glMultiTexCoord1dv,glMultiTexCoord1f,
glMultiTexCoord1fv,glMultiTexCoord1i,glMultiTexCoord1iv,
glMultiTexCoord2d,glMultiTexCoord2dv,glMultiTexCoord2f,
glMultiTexCoord2fv,glMultiTexCoord2i,glMultiTexCoord2iv,
glMultiTexCoord3d,glMultiTexCoord3dv,glMultiTexCoord3f,
glMultiTexCoord3fv,glMultiTexCoord3i,glMultiTexCoord3iv,
glMultiTexCoord4d,glMultiTexCoord4dv,glMultiTexCoord4f,
glMultiTexCoord4fv,glMultiTexCoord4i,glMultiTexCoord4iv,
glLoadTransposeMatrixf,glLoadTransposeMatrixd,glMultTransposeMatrixf,
glMultTransposeMatrixd,glGetCompressedTexImage,glActiveTextureARB,
glClientActiveTextureARB,glMultiTexCoord1dARB,glMultiTexCoord1dvARB,
glMultiTexCoord1fARB,glMultiTexCoord1fvARB,glMultiTexCoord1iARB,
glMultiTexCoord1ivARB,glMultiTexCoord2dARB,glMultiTexCoord2dvARB,
glMultiTexCoord2fARB,glMultiTexCoord2fvARB,glMultiTexCoord2iARB,
glMultiTexCoord2ivARB,glMultiTexCoord3dARB,glMultiTexCoord3dvARB,
glMultiTexCoord3fARB,glMultiTexCoord3fvARB,glMultiTexCoord3iARB,
glMultiTexCoord3ivARB,glMultiTexCoord4dARB,glMultiTexCoord4dvARB,
glMultiTexCoord4fARB,glMultiTexCoord4fvARB,glMultiTexCoord4iARB,
glMultiTexCoord4ivARB,glLoadTransposeMatrixfARB,glLoadTransposeMatrixdARB,
glMultTransposeMatrixfARB,glMultTransposeMatrixdARB,glGetCompressedTexImageARB,
glPointParameterfARB,glPointParameterfvARB,glWeightivARB,
glWeightfvARB,glWeightdvARB,glVertexBlendARB,
glCurrentPaletteMatrixARB,glWindowPos2dARB,glWindowPos2dvARB,
glWindowPos2fARB,glWindowPos2fvARB,glWindowPos2iARB,
glWindowPos2ivARB,glWindowPos3dARB,glWindowPos3dvARB,
glWindowPos3fARB,glWindowPos3fvARB,glWindowPos3iARB,
glWindowPos3ivARB,glPolygonOffsetEXT,glGetTexFilterFuncSGIS,
glTexFilterFuncSGIS,glCopyTexImage1DEXT,glCopyTexImage2DEXT,
glCopyTexSubImage1DEXT,glCopyTexSubImage2DEXT,glCopyTexSubImage3DEXT,
glGetHistogramParameterfvEXT,glGetHistogramParameterivEXT,glGetMinmaxParameterfvEXT,
glGetMinmaxParameterivEXT,glResetHistogramEXT,glResetMinmaxEXT,
glConvolutionParameterfEXT,glConvolutionParameterfvEXT,glConvolutionParameteriEXT,
glConvolutionParameterivEXT,glCopyConvolutionFilter1DEXT,glCopyConvolutionFilter2DEXT,
glGetConvolutionParameterfvEXT,glGetConvolutionParameterivEXT,glColorTableParameterfvSGI,
glColorTableParameterivSGI,glCopyColorTableSGI,glGetColorTableParameterfvSGI,
glGetColorTableParameterivSGI,glPixelTexGenSGIX,glPixelTexGenParameteriSGIS,
glPixelTexGenParameterivSGIS,glPixelTexGenParameterfSGIS,glPixelTexGenParameterfvSGIS,
glGetPixelTexGenParameterivSGIS,glGetPixelTexGenParameterfvSGIS,glDetailTexFuncSGIS,
glGetDetailTexFuncSGIS,glSharpenTexFuncSGIS,glGetSharpenTexFuncSGIS,
glSamplePatternSGIS,glArrayElementEXT,glDrawArraysEXT,
glBlendEquationEXT,glSpriteParameterfSGIX,glSpriteParameterfvSGIX,
glSpriteParameteriSGIX,glSpriteParameterivSGIX,glPointParameterfEXT,
glPointParameterfvEXT,glPointParameterfSGIS,glPointParameterfvSGIS,
glGetInstrumentsSGIX,glInstrumentsBufferSGIX,glPollInstrumentsSGIX,
glReadInstrumentsSGIX,glStartInstrumentsSGIX,glStopInstrumentsSGIX,
glFrameZoomSGIX,glTagSampleBufferSGIX,glDeformationMap3dSGIX,
glDeformationMap3fSGIX,glReferencePlaneSGIX,glFlushRasterSGIX,
glFogFuncSGIS,glGetFogFuncSGIS,glImageTransformParameteriHP,
glImageTransformParameterfHP,glImageTransformParameterivHP,glImageTransformParameterfvHP,
glGetImageTransformParameterivHP,glGetImageTransformParameterfvHP,glCopyColorSubTableEXT,
glHintPGI,glGetColorTableParameterivEXT,glGetColorTableParameterfvEXT,
glIndexMaterialEXT,glLockArraysEXT,glUnlockArraysEXT,
glCullParameterdvEXT,glCullParameterfvEXT,glFragmentColorMaterialSGIX,
glFragmentLightfSGIX,glFragmentLightfvSGIX,glFragmentLightiSGIX,
glFragmentLightivSGIX,glFragmentLightModelfSGIX,glFragmentLightModelfvSGIX,
glFragmentLightModeliSGIX,glFragmentLightModelivSGIX,glFragmentMaterialfSGIX,
glFragmentMaterialfvSGIX,glFragmentMaterialiSGIX,glFragmentMaterialivSGIX,
glGetFragmentLightfvSGIX,glGetFragmentLightivSGIX,glGetFragmentMaterialfvSGIX,
glGetFragmentMaterialivSGIX,glLightEnviSGIX,glApplyTextureEXT,
glTextureLightEXT,glTextureMaterialEXT,glGenAsyncMarkersSGIX,
glPixelTransformParameteriEXT,glPixelTransformParameterfEXT,glPixelTransformParameterivEXT,
glPixelTransformParameterfvEXT,glSecondaryColor3dEXT,glSecondaryColor3dvEXT,
glSecondaryColor3fEXT,glSecondaryColor3fvEXT,glSecondaryColor3iEXT,
glSecondaryColor3ivEXT,glTextureNormalEXT,glMultiDrawArraysEXT,
glFogCoordfEXT,glFogCoordfvEXT,glFogCoorddEXT,
glFogCoorddvEXT,glTangent3dEXT,glTangent3dvEXT,
glTangent3fEXT,glTangent3fvEXT,glTangent3iEXT,
glTangent3ivEXT,glBinormal3dEXT,glBinormal3dvEXT,
glBinormal3fEXT,glBinormal3fvEXT,glBinormal3iEXT,
glBinormal3ivEXT,glFinishTextureSUNX,glGlobalAlphaFactoriSUN,
glGlobalAlphaFactorfSUN,glGlobalAlphaFactordSUN,glColor3fVertex3fSUN,
glColor3fVertex3fvSUN,glNormal3fVertex3fSUN,glNormal3fVertex3fvSUN,
glColor4fNormal3fVertex3fSUN,glColor4fNormal3fVertex3fvSUN,glTexCoord2fVertex3fSUN,
glTexCoord2fVertex3fvSUN,glTexCoord4fVertex4fSUN,glTexCoord4fVertex4fvSUN,
glTexCoord2fColor3fVertex3fSUN,glTexCoord2fColor3fVertex3fvSUN,glTexCoord2fNormal3fVertex3fSUN,
glTexCoord2fNormal3fVertex3fvSUN,glTexCoord2fColor4fNormal3fVertex3fSUN,glTexCoord2fColor4fNormal3fVertex3fvSUN,
glTexCoord4fColor4fNormal3fVertex4fSUN,glTexCoord4fColor4fNormal3fVertex4fvSUN,glBlendFuncSeparateEXT,
glBlendFuncSeparateINGR,glVertexWeightfEXT,glVertexWeightfvEXT,
glFlushVertexArrayRangeNV,glCombinerParameterfvNV,glCombinerParameterfNV,
glCombinerParameterivNV,glCombinerParameteriNV,glCombinerInputNV,
glFinalCombinerInputNV,glGetCombinerInputParameterfvNV,glGetCombinerInputParameterivNV,
glGetCombinerOutputParameterfvNV,glGetCombinerOutputParameterivNV,glGetFinalCombinerInputParameterfvNV,
glGetFinalCombinerInputParameterivNV,glResizeBuffersMESA,glWindowPos2dMESA,
glWindowPos2dvMESA,glWindowPos2fMESA,glWindowPos2fvMESA,
glWindowPos2iMESA,glWindowPos2ivMESA,glWindowPos3dMESA,
glWindowPos3dvMESA,glWindowPos3fMESA,glWindowPos3fvMESA,
glWindowPos3iMESA,glWindowPos3ivMESA,glWindowPos4dMESA,
glWindowPos4dvMESA,glWindowPos4fMESA,glWindowPos4fvMESA,
glWindowPos4iMESA,glWindowPos4ivMESA,glMultiModeDrawArraysIBM,
glSamplePatternEXT,glMapParameterivNV,glMapParameterfvNV,
glGetMapParameterivNV,glGetMapParameterfvNV,glEvalMapsNV,
glCombinerStageParameterfvNV,glGetCombinerStageParameterfvNV,glTexBumpParameterivATI,
glTexBumpParameterfvATI,glGetTexBumpParameterivATI,glGetTexBumpParameterfvATI,
glBeginFragmentShaderATI,glEndFragmentShaderATI,glPNTrianglesiATI,
glPNTrianglesfATI,glGetArrayObjectfvATI,glGetArrayObjectivATI,
glBeginVertexShaderEXT,glEndVertexShaderEXT,glBindLightParameterEXT,
glBindMaterialParameterEXT,glBindTexGenParameterEXT,glBindTextureUnitParameterEXT,
glBindParameterEXT,glVertexStream1iATI,glVertexStream1ivATI,
glVertexStream1fATI,glVertexStream1fvATI,glVertexStream1dATI,
glVertexStream1dvATI,glVertexStream2iATI,glVertexStream2ivATI,
glVertexStream2fATI,glVertexStream2fvATI,glVertexStream2dATI,
glVertexStream2dvATI,glVertexStream3iATI,glVertexStream3ivATI,
glVertexStream3fATI,glVertexStream3fvATI,glVertexStream3dATI,
glVertexStream3dvATI,glVertexStream4iATI,glVertexStream4ivATI,
glVertexStream4fATI,glVertexStream4fvATI,glVertexStream4dATI,
glVertexStream4dvATI,glNormalStream3iATI,glNormalStream3ivATI,
glNormalStream3fATI,glNormalStream3fvATI,glNormalStream3dATI,
glNormalStream3dvATI,glClientActiveVertexStreamATI,glVertexBlendEnviATI,
glVertexBlendEnvfATI,glDrawElementArrayATI,glDrawMeshArraysSUN,
glEndOcclusionQueryNV,glPointParameteriNV,glPointParameterivNV,
glActiveStencilFaceEXT,glStencilOpSeparateATI,glStencilFuncSeparateATI,
glMapObjectBufferATI,glUnmapObjectBufferATI,
glVertexAttribArrayObjectATI,glGetVertexAttribArrayObjectfvATI,
glGetVertexAttribArrayObjectivATI




global function link_glext_func(sequence name, sequence args, atom result)
    	atom procAddr

	poke(gl_vector_buffer, name & 0)
    	procAddr = c_func(wglGetProcAddress,{gl_vector_buffer})
    	if procAddr <= 0 then
       		if message_box("Couldn't find " & name, "Error", MB_ICONINFORMATION+MB_TASKMODAL) then
       		end if
       		abort(1)
    	end if
	return procAddr
end function


global function link_glext_proc(sequence name, sequence args)
    	atom procAddr

	poke(gl_vector_buffer, name & 0)
    	procAddr = c_func(wglGetProcAddress,{gl_vector_buffer})
    	if procAddr <= 0 then
       		if message_box("Couldn't find " & name, "Error", MB_ICONINFORMATION+MB_TASKMODAL) then
       		end if
       		abort(1)
    	end if
	return procAddr
end function



procedure enable_GL_VERSION_1_2()
	glBlendEquation = link_glext_proc("glBlendEquation",{GLenum})
	glColorTableParameterfv = link_glext_proc("glColorTableParameterfv",{GLenum, GLenum,C_POINTER})
	glColorTableParameteriv = link_glext_proc("glColorTableParameteriv",{GLenum, GLenum,C_POINTER})
	glCopyColorTable = link_glext_proc("glCopyColorTable",{GLenum, GLenum, GLint, GLint, GLsizei})
	glGetColorTableParameterfv = link_glext_proc("glGetColorTableParameterfv",{GLenum, GLenum,C_POINTER})
	glGetColorTableParameteriv = link_glext_proc("glGetColorTableParameteriv",{GLenum, GLenum,C_POINTER})
	glCopyColorSubTable = link_glext_proc("glCopyColorSubTable",{GLenum, GLsizei, GLint, GLint, GLsizei})
	glConvolutionParameterf = link_glext_proc("glConvolutionParameterf",{GLenum, GLenum, GLfloat})
	glConvolutionParameterfv = link_glext_proc("glConvolutionParameterfv",{GLenum, GLenum,C_POINTER})
	glConvolutionParameteri = link_glext_proc("glConvolutionParameteri",{GLenum, GLenum, GLint})
	glConvolutionParameteriv = link_glext_proc("glConvolutionParameteriv",{GLenum, GLenum,C_POINTER})
	glCopyConvolutionFilter1D = link_glext_proc("glCopyConvolutionFilter1D",{GLenum, GLenum, GLint, GLint, GLsizei})
	glCopyConvolutionFilter2D = link_glext_proc("glCopyConvolutionFilter2D",{GLenum, GLenum, GLint, GLint, GLsizei, GLsizei})
	glGetConvolutionParameterfv = link_glext_proc("glGetConvolutionParameterfv",{GLenum, GLenum,C_POINTER})
	glGetConvolutionParameteriv = link_glext_proc("glGetConvolutionParameteriv",{GLenum, GLenum,C_POINTER})
	glGetHistogramParameterfv = link_glext_proc("glGetHistogramParameterfv",{GLenum, GLenum,C_POINTER})
	glGetHistogramParameteriv = link_glext_proc("glGetHistogramParameteriv",{GLenum, GLenum,C_POINTER})
	glGetMinmaxParameterfv = link_glext_proc("glGetMinmaxParameterfv",{GLenum, GLenum,C_POINTER})
	glGetMinmaxParameteriv = link_glext_proc("glGetMinmaxParameteriv",{GLenum, GLenum,C_POINTER})
	glResetHistogram = link_glext_proc("glResetHistogram",{GLenum})
	glResetMinmax = link_glext_proc("glResetMinmax",{GLenum})
	glCopyTexSubImage3D = link_glext_proc("glCopyTexSubImage3D",{GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei})
end procedure

procedure enable_GL_VERSION_1_3()
	glActiveTexture = link_glext_proc("glActiveTexture",{GLenum})
	glClientActiveTexture = link_glext_proc("glClientActiveTexture",{GLenum})
	glMultiTexCoord1d = link_glext_proc("glMultiTexCoord1d",{GLenum, GLdouble})
	glMultiTexCoord1dv = link_glext_proc("glMultiTexCoord1dv",{GLenum,C_POINTER})
	glMultiTexCoord1f = link_glext_proc("glMultiTexCoord1f",{GLenum, GLfloat})
	glMultiTexCoord1fv = link_glext_proc("glMultiTexCoord1fv",{GLenum,C_POINTER})
	glMultiTexCoord1i = link_glext_proc("glMultiTexCoord1i",{GLenum, GLint})
	glMultiTexCoord1iv = link_glext_proc("glMultiTexCoord1iv",{GLenum,C_POINTER})
	glMultiTexCoord2d = link_glext_proc("glMultiTexCoord2d",{GLenum, GLdouble, GLdouble})
	glMultiTexCoord2dv = link_glext_proc("glMultiTexCoord2dv",{GLenum,C_POINTER})
	glMultiTexCoord2f = link_glext_proc("glMultiTexCoord2f",{GLenum, GLfloat, GLfloat})
	glMultiTexCoord2fv = link_glext_proc("glMultiTexCoord2fv",{GLenum,C_POINTER})
	glMultiTexCoord2i = link_glext_proc("glMultiTexCoord2i",{GLenum, GLint, GLint})
	glMultiTexCoord2iv = link_glext_proc("glMultiTexCoord2iv",{GLenum,C_POINTER})
	glMultiTexCoord3d = link_glext_proc("glMultiTexCoord3d",{GLenum, GLdouble, GLdouble, GLdouble})
	glMultiTexCoord3dv = link_glext_proc("glMultiTexCoord3dv",{GLenum,C_POINTER})
	glMultiTexCoord3f = link_glext_proc("glMultiTexCoord3f",{GLenum, GLfloat, GLfloat, GLfloat})
	glMultiTexCoord3fv = link_glext_proc("glMultiTexCoord3fv",{GLenum,C_POINTER})
	glMultiTexCoord3i = link_glext_proc("glMultiTexCoord3i",{GLenum, GLint, GLint, GLint})
	glMultiTexCoord3iv = link_glext_proc("glMultiTexCoord3iv",{GLenum,C_POINTER})
	glMultiTexCoord4d = link_glext_proc("glMultiTexCoord4d",{GLenum, GLdouble, GLdouble, GLdouble, GLdouble})
	glMultiTexCoord4dv = link_glext_proc("glMultiTexCoord4dv",{GLenum,C_POINTER})
	glMultiTexCoord4f = link_glext_proc("glMultiTexCoord4f",{GLenum, GLfloat, GLfloat, GLfloat, GLfloat})
	glMultiTexCoord4fv = link_glext_proc("glMultiTexCoord4fv",{GLenum,C_POINTER})
	glMultiTexCoord4i = link_glext_proc("glMultiTexCoord4i",{GLenum, GLint, GLint, GLint, GLint})
	glMultiTexCoord4iv = link_glext_proc("glMultiTexCoord4iv",{GLenum,C_POINTER})
	glLoadTransposeMatrixf = link_glext_proc("glLoadTransposeMatrixf",{C_POINTER})
	glLoadTransposeMatrixd = link_glext_proc("glLoadTransposeMatrixd",{C_POINTER})
	glMultTransposeMatrixf = link_glext_proc("glMultTransposeMatrixf",{C_POINTER})
	glMultTransposeMatrixd = link_glext_proc("glMultTransposeMatrixd",{C_POINTER})
	glGetCompressedTexImage = link_glext_proc("glGetCompressedTexImage",{GLenum, GLint,C_POINTER})
end procedure

procedure enable_GL_ARB_multitexture()
	glActiveTextureARB = link_glext_proc("glActiveTextureARB",{GLenum})
	glClientActiveTextureARB = link_glext_proc("glClientActiveTextureARB",{GLenum})
	glMultiTexCoord1dARB = link_glext_proc("glMultiTexCoord1dARB",{GLenum, GLdouble})
	glMultiTexCoord1dvARB = link_glext_proc("glMultiTexCoord1dvARB",{GLenum,C_POINTER})
	glMultiTexCoord1fARB = link_glext_proc("glMultiTexCoord1fARB",{GLenum, GLfloat})
	glMultiTexCoord1fvARB = link_glext_proc("glMultiTexCoord1fvARB",{GLenum,C_POINTER})
	glMultiTexCoord1iARB = link_glext_proc("glMultiTexCoord1iARB",{GLenum, GLint})
	glMultiTexCoord1ivARB = link_glext_proc("glMultiTexCoord1ivARB",{GLenum,C_POINTER})
	glMultiTexCoord2dARB = link_glext_proc("glMultiTexCoord2dARB",{GLenum, GLdouble, GLdouble})
	glMultiTexCoord2dvARB = link_glext_proc("glMultiTexCoord2dvARB",{GLenum,C_POINTER})
	glMultiTexCoord2fARB = link_glext_proc("glMultiTexCoord2fARB",{GLenum, GLfloat, GLfloat})
	glMultiTexCoord2fvARB = link_glext_proc("glMultiTexCoord2fvARB",{GLenum,C_POINTER})
	glMultiTexCoord2iARB = link_glext_proc("glMultiTexCoord2iARB",{GLenum, GLint, GLint})
	glMultiTexCoord2ivARB = link_glext_proc("glMultiTexCoord2ivARB",{GLenum,C_POINTER})
	glMultiTexCoord3dARB = link_glext_proc("glMultiTexCoord3dARB",{GLenum, GLdouble, GLdouble, GLdouble})
	glMultiTexCoord3dvARB = link_glext_proc("glMultiTexCoord3dvARB",{GLenum,C_POINTER})
	glMultiTexCoord3fARB = link_glext_proc("glMultiTexCoord3fARB",{GLenum, GLfloat, GLfloat, GLfloat})
	glMultiTexCoord3fvARB = link_glext_proc("glMultiTexCoord3fvARB",{GLenum,C_POINTER})
	glMultiTexCoord3iARB = link_glext_proc("glMultiTexCoord3iARB",{GLenum, GLint, GLint, GLint})
	glMultiTexCoord3ivARB = link_glext_proc("glMultiTexCoord3ivARB",{GLenum,C_POINTER})
	glMultiTexCoord4dARB = link_glext_proc("glMultiTexCoord4dARB",{GLenum, GLdouble, GLdouble, GLdouble, GLdouble})
	glMultiTexCoord4dvARB = link_glext_proc("glMultiTexCoord4dvARB",{GLenum,C_POINTER})
	glMultiTexCoord4fARB = link_glext_proc("glMultiTexCoord4fARB",{GLenum, GLfloat, GLfloat, GLfloat, GLfloat})
	glMultiTexCoord4fvARB = link_glext_proc("glMultiTexCoord4fvARB",{GLenum,C_POINTER})
	glMultiTexCoord4iARB = link_glext_proc("glMultiTexCoord4iARB",{GLenum, GLint, GLint, GLint, GLint})
	glMultiTexCoord4ivARB = link_glext_proc("glMultiTexCoord4ivARB",{GLenum,C_POINTER})
end procedure

procedure enable_GL_ARB_transpose_matrix()
	glLoadTransposeMatrixfARB = link_glext_proc("glLoadTransposeMatrixfARB",{C_POINTER})
	glLoadTransposeMatrixdARB = link_glext_proc("glLoadTransposeMatrixdARB",{C_POINTER})
	glMultTransposeMatrixfARB = link_glext_proc("glMultTransposeMatrixfARB",{C_POINTER})
	glMultTransposeMatrixdARB = link_glext_proc("glMultTransposeMatrixdARB",{C_POINTER})
end procedure

procedure enable_GL_ARB_multisample()
end procedure

procedure enable_GL_ARB_texture_compression()
	glGetCompressedTexImageARB = link_glext_proc("glGetCompressedTexImageARB",{GLenum, GLint,C_POINTER})
end procedure

procedure enable_GL_ARB_point_parameters()
	glPointParameterfARB = link_glext_proc("glPointParameterfARB",{GLenum, GLfloat})
	glPointParameterfvARB = link_glext_proc("glPointParameterfvARB",{GLenum,C_POINTER})
end procedure

procedure enable_GL_ARB_vertex_blend()
	glWeightivARB = link_glext_proc("glWeightivARB",{GLint,C_POINTER})
	glWeightfvARB = link_glext_proc("glWeightfvARB",{GLint,C_POINTER})
	glWeightdvARB = link_glext_proc("glWeightdvARB",{GLint,C_POINTER})
	glVertexBlendARB = link_glext_proc("glVertexBlendARB",{GLint})
end procedure

procedure enable_GL_ARB_matrix_palette()
	glCurrentPaletteMatrixARB = link_glext_proc("glCurrentPaletteMatrixARB",{GLint})
end procedure

procedure enable_GL_ARB_window_pos()
	glWindowPos2dARB = link_glext_proc("glWindowPos2dARB",{GLdouble, GLdouble})
	glWindowPos2dvARB = link_glext_proc("glWindowPos2dvARB",{C_POINTER})
	glWindowPos2fARB = link_glext_proc("glWindowPos2fARB",{GLfloat, GLfloat})
	glWindowPos2fvARB = link_glext_proc("glWindowPos2fvARB",{C_POINTER})
	glWindowPos2iARB = link_glext_proc("glWindowPos2iARB",{GLint, GLint})
	glWindowPos2ivARB = link_glext_proc("glWindowPos2ivARB",{C_POINTER})
	glWindowPos3dARB = link_glext_proc("glWindowPos3dARB",{GLdouble, GLdouble, GLdouble})
	glWindowPos3dvARB = link_glext_proc("glWindowPos3dvARB",{C_POINTER})
	glWindowPos3fARB = link_glext_proc("glWindowPos3fARB",{GLfloat, GLfloat, GLfloat})
	glWindowPos3fvARB = link_glext_proc("glWindowPos3fvARB",{C_POINTER})
	glWindowPos3iARB = link_glext_proc("glWindowPos3iARB",{GLint, GLint, GLint})
	glWindowPos3ivARB = link_glext_proc("glWindowPos3ivARB",{C_POINTER})
end procedure

procedure enable_GL_EXT_blend_color()
end procedure

procedure enable_GL_EXT_polygon_offset()
	glPolygonOffsetEXT = link_glext_proc("glPolygonOffsetEXT",{GLfloat, GLfloat})
end procedure

procedure enable_GL_EXT_texture3D()
end procedure

procedure enable_GL_SGIS_texture_filter4()
	glGetTexFilterFuncSGIS = link_glext_proc("glGetTexFilterFuncSGIS",{GLenum, GLenum,C_POINTER})
	glTexFilterFuncSGIS = link_glext_proc("glTexFilterFuncSGIS",{GLenum, GLenum, GLsizei,C_POINTER})
end procedure

procedure enable_GL_EXT_subtexture()
end procedure

procedure enable_GL_EXT_copy_texture()
	glCopyTexImage1DEXT = link_glext_proc("glCopyTexImage1DEXT",{GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint})
	glCopyTexImage2DEXT = link_glext_proc("glCopyTexImage2DEXT",{GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint})
	glCopyTexSubImage1DEXT = link_glext_proc("glCopyTexSubImage1DEXT",{GLenum, GLint, GLint, GLint, GLint, GLsizei})
	glCopyTexSubImage2DEXT = link_glext_proc("glCopyTexSubImage2DEXT",{GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei})
	glCopyTexSubImage3DEXT = link_glext_proc("glCopyTexSubImage3DEXT",{GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei})
end procedure

procedure enable_GL_EXT_histogram()
	glGetHistogramParameterfvEXT = link_glext_proc("glGetHistogramParameterfvEXT",{GLenum, GLenum,C_POINTER})
	glGetHistogramParameterivEXT = link_glext_proc("glGetHistogramParameterivEXT",{GLenum, GLenum,C_POINTER})
	glGetMinmaxParameterfvEXT = link_glext_proc("glGetMinmaxParameterfvEXT",{GLenum, GLenum,C_POINTER})
	glGetMinmaxParameterivEXT = link_glext_proc("glGetMinmaxParameterivEXT",{GLenum, GLenum,C_POINTER})
	glResetHistogramEXT = link_glext_proc("glResetHistogramEXT",{GLenum})
	glResetMinmaxEXT = link_glext_proc("glResetMinmaxEXT",{GLenum})
end procedure

procedure enable_GL_EXT_convolution()
	glConvolutionParameterfEXT = link_glext_proc("glConvolutionParameterfEXT",{GLenum, GLenum, GLfloat})
	glConvolutionParameterfvEXT = link_glext_proc("glConvolutionParameterfvEXT",{GLenum, GLenum,C_POINTER})
	glConvolutionParameteriEXT = link_glext_proc("glConvolutionParameteriEXT",{GLenum, GLenum, GLint})
	glConvolutionParameterivEXT = link_glext_proc("glConvolutionParameterivEXT",{GLenum, GLenum,C_POINTER})
	glCopyConvolutionFilter1DEXT = link_glext_proc("glCopyConvolutionFilter1DEXT",{GLenum, GLenum, GLint, GLint, GLsizei})
	glCopyConvolutionFilter2DEXT = link_glext_proc("glCopyConvolutionFilter2DEXT",{GLenum, GLenum, GLint, GLint, GLsizei, GLsizei})
	glGetConvolutionParameterfvEXT = link_glext_proc("glGetConvolutionParameterfvEXT",{GLenum, GLenum,C_POINTER})
	glGetConvolutionParameterivEXT = link_glext_proc("glGetConvolutionParameterivEXT",{GLenum, GLenum,C_POINTER})
end procedure

procedure enable_GL_SGI_color_table()
	glColorTableParameterfvSGI = link_glext_proc("glColorTableParameterfvSGI",{GLenum, GLenum,C_POINTER})
	glColorTableParameterivSGI = link_glext_proc("glColorTableParameterivSGI",{GLenum, GLenum,C_POINTER})
	glCopyColorTableSGI = link_glext_proc("glCopyColorTableSGI",{GLenum, GLenum, GLint, GLint, GLsizei})
	glGetColorTableParameterfvSGI = link_glext_proc("glGetColorTableParameterfvSGI",{GLenum, GLenum,C_POINTER})
	glGetColorTableParameterivSGI = link_glext_proc("glGetColorTableParameterivSGI",{GLenum, GLenum,C_POINTER})
end procedure

procedure enable_GL_SGIX_pixel_texture()
	glPixelTexGenSGIX = link_glext_proc("glPixelTexGenSGIX",{GLenum})
end procedure

procedure enable_GL_SGIS_pixel_texture()
	glPixelTexGenParameteriSGIS = link_glext_proc("glPixelTexGenParameteriSGIS",{GLenum, GLint})
	glPixelTexGenParameterivSGIS = link_glext_proc("glPixelTexGenParameterivSGIS",{GLenum,C_POINTER})
	glPixelTexGenParameterfSGIS = link_glext_proc("glPixelTexGenParameterfSGIS",{GLenum, GLfloat})
	glPixelTexGenParameterfvSGIS = link_glext_proc("glPixelTexGenParameterfvSGIS",{GLenum,C_POINTER})
	glGetPixelTexGenParameterivSGIS = link_glext_proc("glGetPixelTexGenParameterivSGIS",{GLenum,C_POINTER})
	glGetPixelTexGenParameterfvSGIS = link_glext_proc("glGetPixelTexGenParameterfvSGIS",{GLenum,C_POINTER})
end procedure

procedure enable_GL_SGIS_texture4D()
end procedure

procedure enable_GL_EXT_texture_object()
end procedure

procedure enable_GL_SGIS_detail_texture()
	glDetailTexFuncSGIS = link_glext_proc("glDetailTexFuncSGIS",{GLenum, GLsizei,C_POINTER})
	glGetDetailTexFuncSGIS = link_glext_proc("glGetDetailTexFuncSGIS",{GLenum,C_POINTER})
end procedure

procedure enable_GL_SGIS_sharpen_texture()
	glSharpenTexFuncSGIS = link_glext_proc("glSharpenTexFuncSGIS",{GLenum, GLsizei,C_POINTER})
	glGetSharpenTexFuncSGIS = link_glext_proc("glGetSharpenTexFuncSGIS",{GLenum,C_POINTER})
end procedure

procedure enable_GL_SGIS_multisample()
	glSamplePatternSGIS = link_glext_proc("glSamplePatternSGIS",{GLenum})
end procedure

procedure enable_GL_EXT_vertex_array()
	glArrayElementEXT = link_glext_proc("glArrayElementEXT",{GLint})
	glDrawArraysEXT = link_glext_proc("glDrawArraysEXT",{GLenum, GLint, GLsizei})
end procedure

procedure enable_GL_EXT_blend_minmax()
	glBlendEquationEXT = link_glext_proc("glBlendEquationEXT",{GLenum})
end procedure

procedure enable_GL_SGIX_sprite()
	glSpriteParameterfSGIX = link_glext_proc("glSpriteParameterfSGIX",{GLenum, GLfloat})
	glSpriteParameterfvSGIX = link_glext_proc("glSpriteParameterfvSGIX",{GLenum,C_POINTER})
	glSpriteParameteriSGIX = link_glext_proc("glSpriteParameteriSGIX",{GLenum, GLint})
	glSpriteParameterivSGIX = link_glext_proc("glSpriteParameterivSGIX",{GLenum,C_POINTER})
end procedure

procedure enable_GL_EXT_point_parameters()
	glPointParameterfEXT = link_glext_proc("glPointParameterfEXT",{GLenum, GLfloat})
	glPointParameterfvEXT = link_glext_proc("glPointParameterfvEXT",{GLenum,C_POINTER})
end procedure

procedure enable_GL_SGIS_point_parameters()
	glPointParameterfSGIS = link_glext_proc("glPointParameterfSGIS",{GLenum, GLfloat})
	glPointParameterfvSGIS = link_glext_proc("glPointParameterfvSGIS",{GLenum,C_POINTER})
end procedure

procedure enable_GL_SGIX_instruments()
	glGetInstrumentsSGIX = link_glext_func("glGetInstrumentsSGIX",{},GLint)
	glInstrumentsBufferSGIX = link_glext_proc("glInstrumentsBufferSGIX",{GLsizei,C_POINTER})
	glPollInstrumentsSGIX = link_glext_func("glPollInstrumentsSGIX",{C_POINTER},GLint)
	glReadInstrumentsSGIX = link_glext_proc("glReadInstrumentsSGIX",{GLint})
	glStartInstrumentsSGIX = link_glext_proc("glStartInstrumentsSGIX",{})
	glStopInstrumentsSGIX = link_glext_proc("glStopInstrumentsSGIX",{GLint})
end procedure

procedure enable_GL_SGIX_framezoom()
	glFrameZoomSGIX = link_glext_proc("glFrameZoomSGIX",{GLint})
end procedure

procedure enable_GL_SGIX_tag_sample_buffer()
	glTagSampleBufferSGIX = link_glext_proc("glTagSampleBufferSGIX",{})
end procedure

procedure enable_GL_SGIX_polynomial_ffd()
	glDeformationMap3dSGIX = link_glext_proc("glDeformationMap3dSGIX",{GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint,C_POINTER})
	glDeformationMap3fSGIX = link_glext_proc("glDeformationMap3fSGIX",{GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint,C_POINTER})
end procedure

procedure enable_GL_SGIX_reference_plane()
	glReferencePlaneSGIX = link_glext_proc("glReferencePlaneSGIX",{C_POINTER})
end procedure

procedure enable_GL_SGIX_flush_raster()
	glFlushRasterSGIX = link_glext_proc("glFlushRasterSGIX",{})
end procedure

procedure enable_GL_SGIS_fog_function()
	glFogFuncSGIS = link_glext_proc("glFogFuncSGIS",{GLsizei,C_POINTER})
	glGetFogFuncSGIS = link_glext_proc("glGetFogFuncSGIS",{C_POINTER})
end procedure

procedure enable_GL_HP_image_transform()
	glImageTransformParameteriHP = link_glext_proc("glImageTransformParameteriHP",{GLenum, GLenum, GLint})
	glImageTransformParameterfHP = link_glext_proc("glImageTransformParameterfHP",{GLenum, GLenum, GLfloat})
	glImageTransformParameterivHP = link_glext_proc("glImageTransformParameterivHP",{GLenum, GLenum,C_POINTER})
	glImageTransformParameterfvHP = link_glext_proc("glImageTransformParameterfvHP",{GLenum, GLenum,C_POINTER})
	glGetImageTransformParameterivHP = link_glext_proc("glGetImageTransformParameterivHP",{GLenum, GLenum,C_POINTER})
	glGetImageTransformParameterfvHP = link_glext_proc("glGetImageTransformParameterfvHP",{GLenum, GLenum,C_POINTER})
end procedure

procedure enable_GL_EXT_color_subtable()
	glCopyColorSubTableEXT = link_glext_proc("glCopyColorSubTableEXT",{GLenum, GLsizei, GLint, GLint, GLsizei})
end procedure

procedure enable_GL_PGI_misc_hints()
	glHintPGI = link_glext_proc("glHintPGI",{GLenum, GLint})
end procedure

procedure enable_GL_EXT_paletted_texture()
	glGetColorTableParameterivEXT = link_glext_proc("glGetColorTableParameterivEXT",{GLenum, GLenum,C_POINTER})
	glGetColorTableParameterfvEXT = link_glext_proc("glGetColorTableParameterfvEXT",{GLenum, GLenum,C_POINTER})
end procedure

procedure enable_GL_SGIX_list_priority()
end procedure

procedure enable_GL_EXT_index_material()
	glIndexMaterialEXT = link_glext_proc("glIndexMaterialEXT",{GLenum, GLenum})
end procedure

procedure enable_GL_EXT_index_func()
end procedure

procedure enable_GL_EXT_compiled_vertex_array()
	glLockArraysEXT = link_glext_proc("glLockArraysEXT",{GLint, GLsizei})
	glUnlockArraysEXT = link_glext_proc("glUnlockArraysEXT",{})
end procedure

procedure enable_GL_EXT_cull_vertex()
	glCullParameterdvEXT = link_glext_proc("glCullParameterdvEXT",{GLenum,C_POINTER})
	glCullParameterfvEXT = link_glext_proc("glCullParameterfvEXT",{GLenum,C_POINTER})
end procedure

procedure enable_GL_SGIX_fragment_lighting()
	glFragmentColorMaterialSGIX = link_glext_proc("glFragmentColorMaterialSGIX",{GLenum, GLenum})
	glFragmentLightfSGIX = link_glext_proc("glFragmentLightfSGIX",{GLenum, GLenum, GLfloat})
	glFragmentLightfvSGIX = link_glext_proc("glFragmentLightfvSGIX",{GLenum, GLenum,C_POINTER})
	glFragmentLightiSGIX = link_glext_proc("glFragmentLightiSGIX",{GLenum, GLenum, GLint})
	glFragmentLightivSGIX = link_glext_proc("glFragmentLightivSGIX",{GLenum, GLenum,C_POINTER})
	glFragmentLightModelfSGIX = link_glext_proc("glFragmentLightModelfSGIX",{GLenum, GLfloat})
	glFragmentLightModelfvSGIX = link_glext_proc("glFragmentLightModelfvSGIX",{GLenum,C_POINTER})
	glFragmentLightModeliSGIX = link_glext_proc("glFragmentLightModeliSGIX",{GLenum, GLint})
	glFragmentLightModelivSGIX = link_glext_proc("glFragmentLightModelivSGIX",{GLenum,C_POINTER})
	glFragmentMaterialfSGIX = link_glext_proc("glFragmentMaterialfSGIX",{GLenum, GLenum, GLfloat})
	glFragmentMaterialfvSGIX = link_glext_proc("glFragmentMaterialfvSGIX",{GLenum, GLenum,C_POINTER})
	glFragmentMaterialiSGIX = link_glext_proc("glFragmentMaterialiSGIX",{GLenum, GLenum, GLint})
	glFragmentMaterialivSGIX = link_glext_proc("glFragmentMaterialivSGIX",{GLenum, GLenum,C_POINTER})
	glGetFragmentLightfvSGIX = link_glext_proc("glGetFragmentLightfvSGIX",{GLenum, GLenum,C_POINTER})
	glGetFragmentLightivSGIX = link_glext_proc("glGetFragmentLightivSGIX",{GLenum, GLenum,C_POINTER})
	glGetFragmentMaterialfvSGIX = link_glext_proc("glGetFragmentMaterialfvSGIX",{GLenum, GLenum,C_POINTER})
	glGetFragmentMaterialivSGIX = link_glext_proc("glGetFragmentMaterialivSGIX",{GLenum, GLenum,C_POINTER})
	glLightEnviSGIX = link_glext_proc("glLightEnviSGIX",{GLenum, GLint})
end procedure

procedure enable_GL_EXT_draw_range_elements()
end procedure

procedure enable_GL_EXT_light_texture()
	glApplyTextureEXT = link_glext_proc("glApplyTextureEXT",{GLenum})
	glTextureLightEXT = link_glext_proc("glTextureLightEXT",{GLenum})
	glTextureMaterialEXT = link_glext_proc("glTextureMaterialEXT",{GLenum, GLenum})
end procedure

procedure enable_GL_SGIX_async()
	glGenAsyncMarkersSGIX = link_glext_func("glGenAsyncMarkersSGIX",{GLsizei},GLuint)
end procedure

procedure enable_GL_INTEL_parallel_arrays()
end procedure

procedure enable_GL_EXT_pixel_transform()
	glPixelTransformParameteriEXT = link_glext_proc("glPixelTransformParameteriEXT",{GLenum, GLenum, GLint})
	glPixelTransformParameterfEXT = link_glext_proc("glPixelTransformParameterfEXT",{GLenum, GLenum, GLfloat})
	glPixelTransformParameterivEXT = link_glext_proc("glPixelTransformParameterivEXT",{GLenum, GLenum,C_POINTER})
	glPixelTransformParameterfvEXT = link_glext_proc("glPixelTransformParameterfvEXT",{GLenum, GLenum,C_POINTER})
end procedure

procedure enable_GL_EXT_secondary_color()
	glSecondaryColor3dEXT = link_glext_proc("glSecondaryColor3dEXT",{GLdouble, GLdouble, GLdouble})
	glSecondaryColor3dvEXT = link_glext_proc("glSecondaryColor3dvEXT",{C_POINTER})
	glSecondaryColor3fEXT = link_glext_proc("glSecondaryColor3fEXT",{GLfloat, GLfloat, GLfloat})
	glSecondaryColor3fvEXT = link_glext_proc("glSecondaryColor3fvEXT",{C_POINTER})
	glSecondaryColor3iEXT = link_glext_proc("glSecondaryColor3iEXT",{GLint, GLint, GLint})
	glSecondaryColor3ivEXT = link_glext_proc("glSecondaryColor3ivEXT",{C_POINTER})
end procedure

procedure enable_GL_EXT_texture_perturb_normal()
	glTextureNormalEXT = link_glext_proc("glTextureNormalEXT",{GLenum})
end procedure

procedure enable_GL_EXT_multi_draw_arrays()
	glMultiDrawArraysEXT = link_glext_proc("glMultiDrawArraysEXT",{GLenum,C_POINTER,C_POINTER, GLsizei})
end procedure

procedure enable_GL_EXT_fog_coord()
	glFogCoordfEXT = link_glext_proc("glFogCoordfEXT",{GLfloat})
	glFogCoordfvEXT = link_glext_proc("glFogCoordfvEXT",{C_POINTER})
	glFogCoorddEXT = link_glext_proc("glFogCoorddEXT",{GLdouble})
	glFogCoorddvEXT = link_glext_proc("glFogCoorddvEXT",{C_POINTER})
end procedure

procedure enable_GL_EXT_coordinate_frame()
	glTangent3dEXT = link_glext_proc("glTangent3dEXT",{GLdouble, GLdouble, GLdouble})
	glTangent3dvEXT = link_glext_proc("glTangent3dvEXT",{C_POINTER})
	glTangent3fEXT = link_glext_proc("glTangent3fEXT",{GLfloat, GLfloat, GLfloat})
	glTangent3fvEXT = link_glext_proc("glTangent3fvEXT",{C_POINTER})
	glTangent3iEXT = link_glext_proc("glTangent3iEXT",{GLint, GLint, GLint})
	glTangent3ivEXT = link_glext_proc("glTangent3ivEXT",{C_POINTER})
	glBinormal3dEXT = link_glext_proc("glBinormal3dEXT",{GLdouble, GLdouble, GLdouble})
	glBinormal3dvEXT = link_glext_proc("glBinormal3dvEXT",{C_POINTER})
	glBinormal3fEXT = link_glext_proc("glBinormal3fEXT",{GLfloat, GLfloat, GLfloat})
	glBinormal3fvEXT = link_glext_proc("glBinormal3fvEXT",{C_POINTER})
	glBinormal3iEXT = link_glext_proc("glBinormal3iEXT",{GLint, GLint, GLint})
	glBinormal3ivEXT = link_glext_proc("glBinormal3ivEXT",{C_POINTER})
end procedure

procedure enable_GL_SUNX_constant_data()
	glFinishTextureSUNX = link_glext_proc("glFinishTextureSUNX",{})
end procedure

procedure enable_GL_SUN_global_alpha()
	glGlobalAlphaFactoriSUN = link_glext_proc("glGlobalAlphaFactoriSUN",{GLint})
	glGlobalAlphaFactorfSUN = link_glext_proc("glGlobalAlphaFactorfSUN",{GLfloat})
	glGlobalAlphaFactordSUN = link_glext_proc("glGlobalAlphaFactordSUN",{GLdouble})
end procedure

procedure enable_GL_SUN_triangle_list()
end procedure

procedure enable_GL_SUN_vertex()
	glColor3fVertex3fSUN = link_glext_proc("glColor3fVertex3fSUN",{GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat})
	glColor3fVertex3fvSUN = link_glext_proc("glColor3fVertex3fvSUN",{C_POINTER,C_POINTER})
	glNormal3fVertex3fSUN = link_glext_proc("glNormal3fVertex3fSUN",{GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat})
	glNormal3fVertex3fvSUN = link_glext_proc("glNormal3fVertex3fvSUN",{C_POINTER,C_POINTER})
	glColor4fNormal3fVertex3fSUN = link_glext_proc("glColor4fNormal3fVertex3fSUN",{GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat})
	glColor4fNormal3fVertex3fvSUN = link_glext_proc("glColor4fNormal3fVertex3fvSUN",{C_POINTER,C_POINTER,C_POINTER})
	glTexCoord2fVertex3fSUN = link_glext_proc("glTexCoord2fVertex3fSUN",{GLfloat, GLfloat, GLfloat, GLfloat, GLfloat})
	glTexCoord2fVertex3fvSUN = link_glext_proc("glTexCoord2fVertex3fvSUN",{C_POINTER,C_POINTER})
	glTexCoord4fVertex4fSUN = link_glext_proc("glTexCoord4fVertex4fSUN",{GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat})
	glTexCoord4fVertex4fvSUN = link_glext_proc("glTexCoord4fVertex4fvSUN",{C_POINTER,C_POINTER})
	glTexCoord2fColor3fVertex3fSUN = link_glext_proc("glTexCoord2fColor3fVertex3fSUN",{GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat})
	glTexCoord2fColor3fVertex3fvSUN = link_glext_proc("glTexCoord2fColor3fVertex3fvSUN",{C_POINTER,C_POINTER,C_POINTER})
	glTexCoord2fNormal3fVertex3fSUN = link_glext_proc("glTexCoord2fNormal3fVertex3fSUN",{GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat})
	glTexCoord2fNormal3fVertex3fvSUN = link_glext_proc("glTexCoord2fNormal3fVertex3fvSUN",{C_POINTER,C_POINTER,C_POINTER})
	glTexCoord2fColor4fNormal3fVertex3fSUN = link_glext_proc("glTexCoord2fColor4fNormal3fVertex3fSUN",{GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat,
				GLfloat, GLfloat, GLfloat})
	glTexCoord2fColor4fNormal3fVertex3fvSUN = link_glext_proc("glTexCoord2fColor4fNormal3fVertex3fvSUN",{C_POINTER,C_POINTER,C_POINTER,C_POINTER})
	glTexCoord4fColor4fNormal3fVertex4fSUN = link_glext_proc("glTexCoord4fColor4fNormal3fVertex4fSUN",{GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat,
				GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat})
	glTexCoord4fColor4fNormal3fVertex4fvSUN = link_glext_proc("glTexCoord4fColor4fNormal3fVertex4fvSUN",{C_POINTER,C_POINTER,C_POINTER,C_POINTER})
end procedure

procedure enable_GL_EXT_blend_func_separate()
	glBlendFuncSeparateEXT = link_glext_proc("glBlendFuncSeparateEXT",{GLenum, GLenum, GLenum, GLenum})
	glBlendFuncSeparateINGR = link_glext_proc("glBlendFuncSeparateINGR",{GLenum, GLenum, GLenum, GLenum})
end procedure

procedure enable_GL_EXT_vertex_weighting()
	glVertexWeightfEXT = link_glext_proc("glVertexWeightfEXT",{GLfloat})
	glVertexWeightfvEXT = link_glext_proc("glVertexWeightfvEXT",{C_POINTER})
end procedure

procedure enable_GL_NV_vertex_array_range()
	glFlushVertexArrayRangeNV = link_glext_proc("glFlushVertexArrayRangeNV",{})
end procedure

procedure enable_GL_NV_register_combiners()
	glCombinerParameterfvNV = link_glext_proc("glCombinerParameterfvNV",{GLenum,C_POINTER})
	glCombinerParameterfNV = link_glext_proc("glCombinerParameterfNV",{GLenum, GLfloat})
	glCombinerParameterivNV = link_glext_proc("glCombinerParameterivNV",{GLenum,C_POINTER})
	glCombinerParameteriNV = link_glext_proc("glCombinerParameteriNV",{GLenum, GLint})
	glCombinerInputNV = link_glext_proc("glCombinerInputNV",{GLenum, GLenum, GLenum, GLenum, GLenum, GLenum})
	glFinalCombinerInputNV = link_glext_proc("glFinalCombinerInputNV",{GLenum, GLenum, GLenum, GLenum})
	glGetCombinerInputParameterfvNV = link_glext_proc("glGetCombinerInputParameterfvNV",{GLenum, GLenum, GLenum, GLenum,C_POINTER})
	glGetCombinerInputParameterivNV = link_glext_proc("glGetCombinerInputParameterivNV",{GLenum, GLenum, GLenum, GLenum,C_POINTER})
	glGetCombinerOutputParameterfvNV = link_glext_proc("glGetCombinerOutputParameterfvNV",{GLenum, GLenum, GLenum,C_POINTER})
	glGetCombinerOutputParameterivNV = link_glext_proc("glGetCombinerOutputParameterivNV",{GLenum, GLenum, GLenum,C_POINTER})
	glGetFinalCombinerInputParameterfvNV = link_glext_proc("glGetFinalCombinerInputParameterfvNV",{GLenum, GLenum,C_POINTER})
	glGetFinalCombinerInputParameterivNV = link_glext_proc("glGetFinalCombinerInputParameterivNV",{GLenum, GLenum,C_POINTER})
end procedure

procedure enable_GL_MESA_resize_buffers()
	glResizeBuffersMESA = link_glext_proc("glResizeBuffersMESA",{})
end procedure

procedure enable_GL_MESA_window_pos()
	glWindowPos2dMESA = link_glext_proc("glWindowPos2dMESA",{GLdouble, GLdouble})
	glWindowPos2dvMESA = link_glext_proc("glWindowPos2dvMESA",{C_POINTER})
	glWindowPos2fMESA = link_glext_proc("glWindowPos2fMESA",{GLfloat, GLfloat})
	glWindowPos2fvMESA = link_glext_proc("glWindowPos2fvMESA",{C_POINTER})
	glWindowPos2iMESA = link_glext_proc("glWindowPos2iMESA",{GLint, GLint})
	glWindowPos2ivMESA = link_glext_proc("glWindowPos2ivMESA",{C_POINTER})
	glWindowPos3dMESA = link_glext_proc("glWindowPos3dMESA",{GLdouble, GLdouble, GLdouble})
	glWindowPos3dvMESA = link_glext_proc("glWindowPos3dvMESA",{C_POINTER})
	glWindowPos3fMESA = link_glext_proc("glWindowPos3fMESA",{GLfloat, GLfloat, GLfloat})
	glWindowPos3fvMESA = link_glext_proc("glWindowPos3fvMESA",{C_POINTER})
	glWindowPos3iMESA = link_glext_proc("glWindowPos3iMESA",{GLint, GLint, GLint})
	glWindowPos3ivMESA = link_glext_proc("glWindowPos3ivMESA",{C_POINTER})
	glWindowPos4dMESA = link_glext_proc("glWindowPos4dMESA",{GLdouble, GLdouble, GLdouble, GLdouble})
	glWindowPos4dvMESA = link_glext_proc("glWindowPos4dvMESA",{C_POINTER})
	glWindowPos4fMESA = link_glext_proc("glWindowPos4fMESA",{GLfloat, GLfloat, GLfloat, GLfloat})
	glWindowPos4fvMESA = link_glext_proc("glWindowPos4fvMESA",{C_POINTER})
	glWindowPos4iMESA = link_glext_proc("glWindowPos4iMESA",{GLint, GLint, GLint, GLint})
	glWindowPos4ivMESA = link_glext_proc("glWindowPos4ivMESA",{C_POINTER})
end procedure

procedure enable_GL_IBM_multimode_draw_arrays()
	glMultiModeDrawArraysIBM = link_glext_proc("glMultiModeDrawArraysIBM",{GLenum,C_POINTER,C_POINTER, GLsizei, GLint})
end procedure

procedure enable_GL_IBM_vertex_array_lists()
end procedure

procedure enable_GL_3DFX_tbuffer()
end procedure

procedure enable_GL_EXT_multisample()
	glSamplePatternEXT = link_glext_proc("glSamplePatternEXT",{GLenum})
end procedure

procedure enable_GL_SGIS_texture_color_mask()
end procedure

procedure enable_GL_SGIX_igloo_interface()
end procedure

procedure enable_GL_NV_fence()
end procedure

procedure enable_GL_NV_evaluators()
	glMapParameterivNV = link_glext_proc("glMapParameterivNV",{GLenum, GLenum,C_POINTER})
	glMapParameterfvNV = link_glext_proc("glMapParameterfvNV",{GLenum, GLenum,C_POINTER})
	glGetMapParameterivNV = link_glext_proc("glGetMapParameterivNV",{GLenum, GLenum,C_POINTER})
	glGetMapParameterfvNV = link_glext_proc("glGetMapParameterfvNV",{GLenum, GLenum,C_POINTER})
	glEvalMapsNV = link_glext_proc("glEvalMapsNV",{GLenum, GLenum})
end procedure

procedure enable_GL_NV_register_combiners2()
	glCombinerStageParameterfvNV = link_glext_proc("glCombinerStageParameterfvNV",{GLenum, GLenum,C_POINTER})
	glGetCombinerStageParameterfvNV = link_glext_proc("glGetCombinerStageParameterfvNV",{GLenum, GLenum,C_POINTER})
end procedure

procedure enable_GL_NV_vertex_program()
end procedure

procedure enable_GL_ATI_envmap_bumpmap()
	glTexBumpParameterivATI = link_glext_proc("glTexBumpParameterivATI",{GLenum,C_POINTER})
	glTexBumpParameterfvATI = link_glext_proc("glTexBumpParameterfvATI",{GLenum,C_POINTER})
	glGetTexBumpParameterivATI = link_glext_proc("glGetTexBumpParameterivATI",{GLenum,C_POINTER})
	glGetTexBumpParameterfvATI = link_glext_proc("glGetTexBumpParameterfvATI",{GLenum,C_POINTER})
end procedure

procedure enable_GL_ATI_fragment_shader()
	glBeginFragmentShaderATI = link_glext_proc("glBeginFragmentShaderATI",{})
	glEndFragmentShaderATI = link_glext_proc("glEndFragmentShaderATI",{})
end procedure

procedure enable_GL_ATI_pn_triangles()
	glPNTrianglesiATI = link_glext_proc("glPNTrianglesiATI",{GLenum, GLint})
	glPNTrianglesfATI = link_glext_proc("glPNTrianglesfATI",{GLenum, GLfloat})
end procedure

procedure enable_GL_ATI_vertex_array_object()
	glGetArrayObjectfvATI = link_glext_proc("glGetArrayObjectfvATI",{GLenum, GLenum,C_POINTER})
	glGetArrayObjectivATI = link_glext_proc("glGetArrayObjectivATI",{GLenum, GLenum,C_POINTER})
end procedure

procedure enable_GL_EXT_vertex_shader()
	glBeginVertexShaderEXT = link_glext_proc("glBeginVertexShaderEXT",{})
	glEndVertexShaderEXT = link_glext_proc("glEndVertexShaderEXT",{})
	glBindLightParameterEXT = link_glext_func("glBindLightParameterEXT",{GLenum, GLenum},GLuint)
	glBindMaterialParameterEXT = link_glext_func("glBindMaterialParameterEXT",{GLenum, GLenum},GLuint)
	glBindTexGenParameterEXT = link_glext_func("glBindTexGenParameterEXT",{GLenum, GLenum, GLenum},GLuint)
	glBindTextureUnitParameterEXT = link_glext_func("glBindTextureUnitParameterEXT",{GLenum, GLenum},GLuint)
	glBindParameterEXT = link_glext_func("glBindParameterEXT",{GLenum},GLuint)
end procedure

procedure enable_GL_ATI_vertex_streams()
	glVertexStream1iATI = link_glext_proc("glVertexStream1iATI",{GLenum, GLint})
	glVertexStream1ivATI = link_glext_proc("glVertexStream1ivATI",{GLenum,C_POINTER})
	glVertexStream1fATI = link_glext_proc("glVertexStream1fATI",{GLenum, GLfloat})
	glVertexStream1fvATI = link_glext_proc("glVertexStream1fvATI",{GLenum,C_POINTER})
	glVertexStream1dATI = link_glext_proc("glVertexStream1dATI",{GLenum, GLdouble})
	glVertexStream1dvATI = link_glext_proc("glVertexStream1dvATI",{GLenum,C_POINTER})
	glVertexStream2iATI = link_glext_proc("glVertexStream2iATI",{GLenum, GLint, GLint})
	glVertexStream2ivATI = link_glext_proc("glVertexStream2ivATI",{GLenum,C_POINTER})
	glVertexStream2fATI = link_glext_proc("glVertexStream2fATI",{GLenum, GLfloat, GLfloat})
	glVertexStream2fvATI = link_glext_proc("glVertexStream2fvATI",{GLenum,C_POINTER})
	glVertexStream2dATI = link_glext_proc("glVertexStream2dATI",{GLenum, GLdouble, GLdouble})
	glVertexStream2dvATI = link_glext_proc("glVertexStream2dvATI",{GLenum,C_POINTER})
	glVertexStream3iATI = link_glext_proc("glVertexStream3iATI",{GLenum, GLint, GLint, GLint})
	glVertexStream3ivATI = link_glext_proc("glVertexStream3ivATI",{GLenum,C_POINTER})
	glVertexStream3fATI = link_glext_proc("glVertexStream3fATI",{GLenum, GLfloat, GLfloat, GLfloat})
	glVertexStream3fvATI = link_glext_proc("glVertexStream3fvATI",{GLenum,C_POINTER})
	glVertexStream3dATI = link_glext_proc("glVertexStream3dATI",{GLenum, GLdouble, GLdouble, GLdouble})
	glVertexStream3dvATI = link_glext_proc("glVertexStream3dvATI",{GLenum,C_POINTER})
	glVertexStream4iATI = link_glext_proc("glVertexStream4iATI",{GLenum, GLint, GLint, GLint, GLint})
	glVertexStream4ivATI = link_glext_proc("glVertexStream4ivATI",{GLenum,C_POINTER})
	glVertexStream4fATI = link_glext_proc("glVertexStream4fATI",{GLenum, GLfloat, GLfloat, GLfloat, GLfloat})
	glVertexStream4fvATI = link_glext_proc("glVertexStream4fvATI",{GLenum,C_POINTER})
	glVertexStream4dATI = link_glext_proc("glVertexStream4dATI",{GLenum, GLdouble, GLdouble, GLdouble, GLdouble})
	glVertexStream4dvATI = link_glext_proc("glVertexStream4dvATI",{GLenum,C_POINTER})
	glNormalStream3iATI = link_glext_proc("glNormalStream3iATI",{GLenum, GLint, GLint, GLint})
	glNormalStream3ivATI = link_glext_proc("glNormalStream3ivATI",{GLenum,C_POINTER})
	glNormalStream3fATI = link_glext_proc("glNormalStream3fATI",{GLenum, GLfloat, GLfloat, GLfloat})
	glNormalStream3fvATI = link_glext_proc("glNormalStream3fvATI",{GLenum,C_POINTER})
	glNormalStream3dATI = link_glext_proc("glNormalStream3dATI",{GLenum, GLdouble, GLdouble, GLdouble})
	glNormalStream3dvATI = link_glext_proc("glNormalStream3dvATI",{GLenum,C_POINTER})
	glClientActiveVertexStreamATI = link_glext_proc("glClientActiveVertexStreamATI",{GLenum})
	glVertexBlendEnviATI = link_glext_proc("glVertexBlendEnviATI",{GLenum, GLint})
	glVertexBlendEnvfATI = link_glext_proc("glVertexBlendEnvfATI",{GLenum, GLfloat})
end procedure

procedure enable_GL_ATI_element_array()
	glDrawElementArrayATI = link_glext_proc("glDrawElementArrayATI",{GLenum, GLsizei})
end procedure

procedure enable_GL_SUN_mesh_array()
	glDrawMeshArraysSUN = link_glext_proc("glDrawMeshArraysSUN",{GLenum, GLint, GLsizei, GLsizei})
end procedure

procedure enable_GL_NV_occlusion_query()
	glEndOcclusionQueryNV = link_glext_proc("glEndOcclusionQueryNV",{})
end procedure

procedure enable_GL_NV_point_sprite()
	glPointParameteriNV = link_glext_proc("glPointParameteriNV",{GLenum, GLint})
	glPointParameterivNV = link_glext_proc("glPointParameterivNV",{GLenum,C_POINTER})
end procedure

procedure enable_GL_EXT_stencil_two_side()
	glActiveStencilFaceEXT = link_glext_proc("glActiveStencilFaceEXT",{GLenum})
end procedure

procedure enable_GL_ATI_separate_stencil()
	glStencilOpSeparateATI = link_glext_proc("glStencilOpSeparateATI",{GLenum, GLenum, GLenum, GLenum})
	glStencilFuncSeparateATI = link_glext_proc("glStencilFuncSeparateATI",{GLenum, GLenum, GLint, GLuint})
end procedure

procedure enable_GL_ATI_map_object_buffer()
--
end procedure

procedure enable_GL_ATI_vertex_attrib_array_object()
--
end procedure



procedure gl_enableExtension_helper(sequence what)
	if equal(what,"GL_VERSION_1_2") then
		enable_GL_VERSION_1_2()
		return
	end if
	if equal(what,"GL_VERSION_1_3") then
		enable_GL_VERSION_1_3()
		return
	end if
	if equal(what,"GL_ARB_multitexture") then
		enable_GL_ARB_multitexture()
		return
	end if
	if equal(what,"GL_ARB_transpose_matrix") then
		enable_GL_ARB_transpose_matrix()
		return
	end if
	if equal(what,"GL_ARB_multisample") then
		enable_GL_ARB_multisample()
		return
	end if
	if equal(what,"GL_ARB_texture_compression") then
		enable_GL_ARB_texture_compression()
		return
	end if
	if equal(what,"GL_ARB_point_parameters") then
		enable_GL_ARB_point_parameters()
		return
	end if
	if equal(what,"GL_ARB_vertex_blend") then
		enable_GL_ARB_vertex_blend()
		return
	end if
	if equal(what,"GL_ARB_matrix_palette") then
		enable_GL_ARB_matrix_palette()
		return
	end if
	if equal(what,"GL_ARB_window_pos") then
		enable_GL_ARB_window_pos()
		return
	end if
	if equal(what,"GL_EXT_blend_color") then
		enable_GL_EXT_blend_color()
		return
	end if
	if equal(what,"GL_EXT_polygon_offset") then
		enable_GL_EXT_polygon_offset()
		return
	end if
	if equal(what,"GL_EXT_texture3D") then
		enable_GL_EXT_texture3D()
		return
	end if
	if equal(what,"GL_SGIS_texture_filter4") then
		enable_GL_SGIS_texture_filter4()
		return
	end if
	if equal(what,"GL_EXT_subtexture") then
		enable_GL_EXT_subtexture()
		return
	end if
	if equal(what,"GL_EXT_copy_texture") then
		enable_GL_EXT_copy_texture()
		return
	end if
	if equal(what,"GL_EXT_histogram") then
		enable_GL_EXT_histogram()
		return
	end if
	if equal(what,"GL_EXT_convolution") then
		enable_GL_EXT_convolution()
		return
	end if
	if equal(what,"GL_SGI_color_table") then
		enable_GL_SGI_color_table()
		return
	end if
	if equal(what,"GL_SGIX_pixel_texture") then
		enable_GL_SGIX_pixel_texture()
		return
	end if
	if equal(what,"GL_SGIS_pixel_texture") then
		enable_GL_SGIS_pixel_texture()
		return
	end if
	if equal(what,"GL_SGIS_texture4D") then
		enable_GL_SGIS_texture4D()
		return
	end if
	if equal(what,"GL_EXT_texture_object") then
		enable_GL_EXT_texture_object()
		return
	end if
	if equal(what,"GL_SGIS_detail_texture") then
		enable_GL_SGIS_detail_texture()
		return
	end if
	if equal(what,"GL_SGIS_sharpen_texture") then
		enable_GL_SGIS_sharpen_texture()
		return
	end if
	if equal(what,"GL_SGIS_multisample") then
		enable_GL_SGIS_multisample()
		return
	end if
	if equal(what,"GL_EXT_vertex_array") then
		enable_GL_EXT_vertex_array()
		return
	end if
	if equal(what,"GL_EXT_blend_minmax") then
		enable_GL_EXT_blend_minmax()
		return
	end if
	if equal(what,"GL_SGIX_sprite") then
		enable_GL_SGIX_sprite()
		return
	end if
	if equal(what,"GL_EXT_point_parameters") then
		enable_GL_EXT_point_parameters()
		return
	end if
	if equal(what,"GL_SGIS_point_parameters") then
		enable_GL_SGIS_point_parameters()
		return
	end if
	if equal(what,"GL_SGIX_instruments") then
		enable_GL_SGIX_instruments()
		return
	end if
	if equal(what,"GL_SGIX_framezoom") then
		enable_GL_SGIX_framezoom()
		return
	end if
	if equal(what,"GL_SGIX_tag_sample_buffer") then
		enable_GL_SGIX_tag_sample_buffer()
		return
	end if
	if equal(what,"GL_SGIX_polynomial_ffd") then
		enable_GL_SGIX_polynomial_ffd()
		return
	end if
	if equal(what,"GL_SGIX_reference_plane") then
		enable_GL_SGIX_reference_plane()
		return
	end if
	if equal(what,"GL_SGIX_flush_raster") then
		enable_GL_SGIX_flush_raster()
		return
	end if
	if equal(what,"GL_SGIS_fog_function") then
		enable_GL_SGIS_fog_function()
		return
	end if
	if equal(what,"GL_HP_image_transform") then
		enable_GL_HP_image_transform()
		return
	end if
	if equal(what,"GL_EXT_color_subtable") then
		enable_GL_EXT_color_subtable()
		return
	end if
	if equal(what,"GL_PGI_misc_hints") then
		enable_GL_PGI_misc_hints()
		return
	end if
	if equal(what,"GL_EXT_paletted_texture") then
		enable_GL_EXT_paletted_texture()
		return
	end if
	if equal(what,"GL_SGIX_list_priority") then
		enable_GL_SGIX_list_priority()
		return
	end if
	if equal(what,"GL_EXT_index_material") then
		enable_GL_EXT_index_material()
		return
	end if
	if equal(what,"GL_EXT_index_func") then
		enable_GL_EXT_index_func()
		return
	end if
	if equal(what,"GL_EXT_compiled_vertex_array") then
		enable_GL_EXT_compiled_vertex_array()
		return
	end if
	if equal(what,"GL_EXT_cull_vertex") then
		enable_GL_EXT_cull_vertex()
		return
	end if
	if equal(what,"GL_SGIX_fragment_lighting") then
		enable_GL_SGIX_fragment_lighting()
		return
	end if
	if equal(what,"GL_EXT_draw_range_elements") then
		enable_GL_EXT_draw_range_elements()
		return
	end if
	if equal(what,"GL_EXT_light_texture") then
		enable_GL_EXT_light_texture()
		return
	end if
	if equal(what,"GL_SGIX_async") then
		enable_GL_SGIX_async()
		return
	end if
	if equal(what,"GL_INTEL_parallel_arrays") then
		enable_GL_INTEL_parallel_arrays()
		return
	end if
	if equal(what,"GL_EXT_pixel_transform") then
		enable_GL_EXT_pixel_transform()
		return
	end if
	if equal(what,"GL_EXT_secondary_color") then
		enable_GL_EXT_secondary_color()
		return
	end if
	if equal(what,"GL_EXT_texture_perturb_normal") then
		enable_GL_EXT_texture_perturb_normal()
		return
	end if
	if equal(what,"GL_EXT_multi_draw_arrays") then
		enable_GL_EXT_multi_draw_arrays()
		return
	end if
	if equal(what,"GL_EXT_fog_coord") then
		enable_GL_EXT_fog_coord()
		return
	end if
	if equal(what,"GL_EXT_coordinate_frame") then
		enable_GL_EXT_coordinate_frame()
		return
	end if
	if equal(what,"GL_SUNX_constant_data") then
		enable_GL_SUNX_constant_data()
		return
	end if
	if equal(what,"GL_SUN_global_alpha") then
		enable_GL_SUN_global_alpha()
		return
	end if
	if equal(what,"GL_SUN_triangle_list") then
		enable_GL_SUN_triangle_list()
		return
	end if
	if equal(what,"GL_SUN_vertex") then
		enable_GL_SUN_vertex()
		return
	end if
	if equal(what,"GL_EXT_blend_func_separate") then
		enable_GL_EXT_blend_func_separate()
		return
	end if
	if equal(what,"GL_EXT_vertex_weighting") then
		enable_GL_EXT_vertex_weighting()
		return
	end if
	if equal(what,"GL_NV_vertex_array_range") then
		enable_GL_NV_vertex_array_range()
		return
	end if
	if equal(what,"GL_NV_register_combiners") then
		enable_GL_NV_register_combiners()
		return
	end if
	if equal(what,"GL_MESA_resize_buffers") then
		enable_GL_MESA_resize_buffers()
		return
	end if
	if equal(what,"GL_MESA_window_pos") then
		enable_GL_MESA_window_pos()
		return
	end if
	if equal(what,"GL_IBM_multimode_draw_arrays") then
		enable_GL_IBM_multimode_draw_arrays()
		return
	end if
	if equal(what,"GL_IBM_vertex_array_lists") then
		enable_GL_IBM_vertex_array_lists()
		return
	end if
	if equal(what,"GL_3DFX_tbuffer") then
		enable_GL_3DFX_tbuffer()
		return
	end if
	if equal(what,"GL_EXT_multisample") then
		enable_GL_EXT_multisample()
		return
	end if
	if equal(what,"GL_SGIS_texture_color_mask") then
		enable_GL_SGIS_texture_color_mask()
		return
	end if
	if equal(what,"GL_SGIX_igloo_interface") then
		enable_GL_SGIX_igloo_interface()
		return
	end if
	if equal(what,"GL_NV_fence") then
		enable_GL_NV_fence()
		return
	end if
	if equal(what,"GL_NV_evaluators") then
		enable_GL_NV_evaluators()
		return
	end if
	if equal(what,"GL_NV_register_combiners2") then
		enable_GL_NV_register_combiners2()
		return
	end if
	if equal(what,"GL_NV_vertex_program") then
		enable_GL_NV_vertex_program()
		return
	end if
	if equal(what,"GL_ATI_envmap_bumpmap") then
		enable_GL_ATI_envmap_bumpmap()
		return
	end if
	if equal(what,"GL_ATI_fragment_shader") then
		enable_GL_ATI_fragment_shader()
		return
	end if
	if equal(what,"GL_ATI_pn_triangles") then
		enable_GL_ATI_pn_triangles()
		return
	end if
	if equal(what,"GL_ATI_vertex_array_object") then
		enable_GL_ATI_vertex_array_object()
		return
	end if
	if equal(what,"GL_EXT_vertex_shader") then
		enable_GL_EXT_vertex_shader()
		return
	end if
	if equal(what,"GL_ATI_vertex_streams") then
		enable_GL_ATI_vertex_streams()
		return
	end if
	if equal(what,"GL_ATI_element_array") then
		enable_GL_ATI_element_array()
		return
	end if

if equal(what,"GL_ATI_separate_stencil") then
	enable_GL_ATI_separate_stencil()
	return
end if
if equal(what,"GL_ATI_map_object_buffer") then
	enable_GL_ATI_map_object_buffer()
	return
end if
if equal(what,"GL_ATI_vertex_attrib_array_object") then
	enable_GL_ATI_vertex_attrib_array_object()
	return
end if

	if equal(what,"GL_SUN_mesh_array") then
		enable_GL_SUN_mesh_array()
		return
	end if
	if equal(what,"GL_NV_occlusion_query") then
		enable_GL_NV_occlusion_query()
		return
	end if
	if equal(what,"GL_NV_point_sprite") then
		enable_GL_NV_point_sprite()
		return
	end if
	if equal(what,"GL_EXT_stencil_two_side") then
		enable_GL_EXT_stencil_two_side()
		return
	end if
end procedure



--GL_VERSION_1_2
global procedure gl_blendEquation(integer a)
	poke4(call_by_ptr__num_params,1)
	poke4(call_by_ptr_params,a)
	poke4(call_by_ptr__func_addr,glBlendEquation)
	call(call_by_ptr_code)
end procedure

global procedure gl_colorTableParameterfv(integer a, integer b, atom c)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr__func_addr,glColorTableParameterfv)
	call(call_by_ptr_code)
end procedure

global procedure gl_colorTableParameteriv(integer a, integer b, atom c)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr__func_addr,glColorTableParameteriv)
	call(call_by_ptr_code)
end procedure

global procedure gl_copyColorTable(integer a, integer b, integer c, integer d, integer e)
	poke4(call_by_ptr__num_params,5)
	poke4(call_by_ptr__func_addr,glCopyColorTable)
	call(call_by_ptr_code)
end procedure

global procedure gl_getColorTableParameterfv(integer a, integer b, atom c)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr__func_addr,glGetColorTableParameterfv)
	call(call_by_ptr_code)
end procedure

global procedure gl_getColorTableParameteriv(integer a, integer b, atom c)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr__func_addr,glGetColorTableParameteriv)
	call(call_by_ptr_code)
end procedure

global procedure gl_copyColorSubTable(integer a, integer b, integer c, integer d, integer e)
	poke4(call_by_ptr__num_params,5)
	poke4(call_by_ptr__func_addr,glCopyColorSubTable)
	call(call_by_ptr_code)
end procedure

global procedure gl_convolutionParameterf(integer a, integer b, atom c)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr_params,{a,b})
	poke(call_by_ptr_params+8,atom_to_float32(c))
	poke4(call_by_ptr__func_addr,glConvolutionParameterf)
	call(call_by_ptr_code)
end procedure

global procedure gl_convolutionParameterfv(integer a, integer b, atom c)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr__func_addr,glConvolutionParameterfv)
	call(call_by_ptr_code)
end procedure

global procedure gl_convolutionParameteri(integer a, integer b, integer c)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr_params,{a,b,c})
	poke4(call_by_ptr__func_addr,glConvolutionParameteri)
	call(call_by_ptr_code)
end procedure

global procedure gl_convolutionParameteriv(integer a, integer b, atom c)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr__func_addr,glConvolutionParameteriv)
	call(call_by_ptr_code)
end procedure

global procedure gl_copyConvolutionFilter1D(integer a, integer b, integer c, integer d, integer e)
	poke4(call_by_ptr__num_params,5)
	poke4(call_by_ptr__func_addr,glCopyConvolutionFilter1D)
	call(call_by_ptr_code)
end procedure

global procedure gl_copyConvolutionFilter2D(integer a, integer b, integer c, integer d, integer e, integer f)
	poke4(call_by_ptr__num_params,6)
	poke4(call_by_ptr__func_addr,glCopyConvolutionFilter2D)
	call(call_by_ptr_code)
end procedure

global procedure gl_getConvolutionParameterfv(integer a, integer b, atom c)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr__func_addr,glGetConvolutionParameterfv)
	call(call_by_ptr_code)
end procedure

global procedure gl_getConvolutionParameteriv(integer a, integer b, atom c)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr__func_addr,glGetConvolutionParameteriv)
	call(call_by_ptr_code)
end procedure

global procedure gl_getHistogramParameterfv(integer a, integer b, atom c)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr__func_addr,glGetHistogramParameterfv)
	call(call_by_ptr_code)
end procedure

global procedure gl_getHistogramParameteriv(integer a, integer b, atom c)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr__func_addr,glGetHistogramParameteriv)
	call(call_by_ptr_code)
end procedure

global procedure gl_getMinmaxParameterfv(integer a, integer b, atom c)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr__func_addr,glGetMinmaxParameterfv)
	call(call_by_ptr_code)
end procedure

global procedure gl_getMinmaxParameteriv(integer a, integer b, atom c)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr__func_addr,glGetMinmaxParameteriv)
	call(call_by_ptr_code)
end procedure

global procedure gl_resetHistogram(integer a)
	poke4(call_by_ptr__num_params,1)
	poke4(call_by_ptr_params,a)
	poke4(call_by_ptr__func_addr,glResetHistogram)
	call(call_by_ptr_code)
end procedure

global procedure gl_resetMinmax(integer a)
	poke4(call_by_ptr__num_params,1)
	poke4(call_by_ptr_params,a)
	poke4(call_by_ptr__func_addr,glResetMinmax)
	call(call_by_ptr_code)
end procedure

global procedure gl_copyTexSubImage3D(integer a, integer b, integer c, integer d, integer e, integer f, integer g, integer h, integer i)
	poke4(call_by_ptr__num_params,9)
	poke4(call_by_ptr_params,{a,b,c,d,e,f,g,h,i})
	poke4(call_by_ptr__func_addr,glCopyTexSubImage3D)
	call(call_by_ptr_code)
end procedure

--GL_VERSION_1_3
global procedure gl_activeTexture(integer a)
	poke4(call_by_ptr__num_params,1)
	poke4(call_by_ptr_params,a)
	poke4(call_by_ptr__func_addr,glActiveTexture)
	call(call_by_ptr_code)
end procedure

global procedure gl_clientActiveTexture(integer a)
	poke4(call_by_ptr__num_params,1)
	poke4(call_by_ptr_params,a)
	poke4(call_by_ptr__func_addr,glClientActiveTexture)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord1d(integer a, atom b)
	sequence s
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr_params,a)
	s = atom_to_float64(b)
	poke4(call_by_ptr_params+4,s[5..8])
	poke4(call_by_ptr_params+8,s[1..4])
	poke4(call_by_ptr__func_addr,glMultiTexCoord1d)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord1dv(integer a, sequence b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord1dv)
	--call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord1f(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr_params,a)
	poke(call_by_ptr_params+4,atom_to_float32(b))
	poke4(call_by_ptr__func_addr,glMultiTexCoord1f)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord1fv(integer a, sequence b)
	poke4(call_by_ptr__num_params,2)
	poke(gl_vector_buffer,atom_to_float32(b[1]))
	poke4(call_by_ptr_params,a)
	poke4(call_by_ptr_params+4,gl_vector_buffer)
	poke4(call_by_ptr__func_addr,glMultiTexCoord1fv)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord1i(integer a, integer b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr_params,{a,b})
	--poke4(call_by_ptr_params+4,b)
	poke4(call_by_ptr__func_addr,glMultiTexCoord1i)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord1iv(integer a, sequence b)
	poke4(call_by_ptr__num_params,2)
	poke4(gl_vector_buffer,b[1])
	poke4(call_by_ptr_params,a)
	poke4(call_by_ptr_params+4,gl_vector_buffer)
	poke4(call_by_ptr__func_addr,glMultiTexCoord1iv)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord2d(integer a, atom b, atom c)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr__func_addr,glMultiTexCoord2d)
	--call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord2dv(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord2dv)
	--call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord2f(integer a, sequence b)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr_params,a)
	gl_pokef32(call_by_ptr_params+4,b)
	poke4(call_by_ptr__func_addr,glMultiTexCoord2f)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord2fv(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord2fv)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord2i(integer a, sequence b)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr_params,a)
	poke4(call_by_ptr_params+4,b)
	poke4(call_by_ptr__func_addr,glMultiTexCoord2i)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord2iv(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord2iv)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord3d(integer a, atom b, atom c, atom d)
	poke4(call_by_ptr__num_params,4)
	poke4(call_by_ptr__func_addr,glMultiTexCoord3d)
	--call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord3dv(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord3dv)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord3f(integer a, atom b, atom c, atom d)
	poke4(call_by_ptr__num_params,4)
	poke4(call_by_ptr__func_addr,glMultiTexCoord3f)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord3fv(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord3fv)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord3i(integer a, integer b, integer c, integer d)
	poke4(call_by_ptr__num_params,4)
	poke4(call_by_ptr_params,{a,b,c,d})
	poke4(call_by_ptr__func_addr,glMultiTexCoord3i)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord3iv(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord3iv)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord4d(integer a, atom b, atom c, atom d, atom e)
	poke4(call_by_ptr__num_params,5)
	poke4(call_by_ptr__func_addr,glMultiTexCoord4d)
	--call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord4dv(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord4dv)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord4f(integer a, atom b, atom c, atom d, atom e)
	poke4(call_by_ptr__num_params,5)
	poke4(call_by_ptr__func_addr,glMultiTexCoord4f)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord4fv(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord4fv)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord4i(integer a, integer b, integer c, integer d, integer e)
	poke4(call_by_ptr__num_params,5)
	poke4(call_by_ptr_params,{a,b,c,d,e})
	poke4(call_by_ptr__func_addr,glMultiTexCoord4i)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord4iv(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord4iv)
	call(call_by_ptr_code)
end procedure

global procedure gl_loadTransposeMatrixf(atom a)
	poke4(call_by_ptr__num_params,1)
	poke4(call_by_ptr_params,a)
	poke4(call_by_ptr__func_addr,glLoadTransposeMatrixf)
	call(call_by_ptr_code)
end procedure

global procedure gl_loadTransposeMatrixd(atom a)
	poke4(call_by_ptr__num_params,1)
	poke4(call_by_ptr_params,a)
	poke4(call_by_ptr__func_addr,glLoadTransposeMatrixd)
	call(call_by_ptr_code)
end procedure

global procedure gl_multTransposeMatrixf(atom a)
	poke4(call_by_ptr__num_params,1)
	poke4(call_by_ptr_params,a)
	poke4(call_by_ptr__func_addr,glMultTransposeMatrixf)
	call(call_by_ptr_code)
end procedure

global procedure gl_multTransposeMatrixd(atom a)
	poke4(call_by_ptr__num_params,1)
	poke4(call_by_ptr_params,a)
	poke4(call_by_ptr__func_addr,glMultTransposeMatrixd)
	call(call_by_ptr_code)
end procedure

global procedure gl_getCompressedTexImage(integer a, integer b, atom c)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr__func_addr,glGetCompressedTexImage)
	call(call_by_ptr_code)
end procedure

--GL_ARB_multitexture
global procedure gl_activeTextureARB(integer a)
	poke4(call_by_ptr__num_params,1)
	poke4(call_by_ptr_params,a)
	poke4(call_by_ptr__func_addr,glActiveTextureARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_clientActiveTextureARB(integer a)
	poke4(call_by_ptr__num_params,1)
	poke4(call_by_ptr_params,a)
	poke4(call_by_ptr__func_addr,glClientActiveTextureARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord1dARB(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord1dARB)
	--call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord1dvARB(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord1dvARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord1fARB(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr_params,a)
	poke(call_by_ptr_params,atom_to_float32(b))
	poke4(call_by_ptr__func_addr,glMultiTexCoord1fARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord1fvARB(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord1fvARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord1iARB(integer a, integer b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr_params,{a,b})
	poke4(call_by_ptr__func_addr,glMultiTexCoord1iARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord1ivARB(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord1ivARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord2dARB(integer a, atom b, atom c)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr__func_addr,glMultiTexCoord2dARB)
	--call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord2dvARB(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord2dvARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord2fARB(integer a, sequence b)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr_params,a)
	gl_pokef32(call_by_ptr_params+4,b)
	poke4(call_by_ptr__func_addr,glMultiTexCoord2fARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord2fvARB(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord2fvARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord2iARB(integer a, integer b, integer c)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr_params,{a,b,c})
	poke4(call_by_ptr__func_addr,glMultiTexCoord2iARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord2ivARB(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord2ivARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord3dARB(integer a, atom b, atom c, atom d)
	poke4(call_by_ptr__num_params,4)
	poke4(call_by_ptr__func_addr,glMultiTexCoord3dARB)
	--call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord3dvARB(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord3dvARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord3fARB(integer a, atom b, atom c, atom d)
	poke4(call_by_ptr__num_params,4)
	poke4(call_by_ptr__func_addr,glMultiTexCoord3fARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord3fvARB(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord3fvARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord3iARB(integer a, integer b, integer c, integer d)
	poke4(call_by_ptr__num_params,4)
	poke4(call_by_ptr_params,{a,b,c,d})
	poke4(call_by_ptr__func_addr,glMultiTexCoord3iARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord3ivARB(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord3ivARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord4dARB(integer a, atom b, atom c, atom d, atom e)
	poke4(call_by_ptr__num_params,5)
	poke4(call_by_ptr__func_addr,glMultiTexCoord4dARB)
	--call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord4dvARB(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord4dvARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord4fARB(integer a, atom b, atom c, atom d, atom e)
	poke4(call_by_ptr__num_params,5)
	poke4(call_by_ptr__func_addr,glMultiTexCoord4fARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord4fvARB(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord4fvARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord4iARB(integer a, integer b, integer c, integer d, integer e)
	poke4(call_by_ptr__num_params,5)
	poke4(call_by_ptr_params,{a,b,c,d,e})
	poke4(call_by_ptr__func_addr,glMultiTexCoord4iARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multiTexCoord4ivARB(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glMultiTexCoord4ivARB)
	call(call_by_ptr_code)
end procedure

--GL_ARB_transpose_matrix
global procedure gl_loadTransposeMatrixfARB(atom a)
	poke4(call_by_ptr__num_params,1)
	poke4(call_by_ptr__func_addr,glLoadTransposeMatrixfARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_loadTransposeMatrixdARB(atom a)
	poke4(call_by_ptr__num_params,1)
	poke4(call_by_ptr__func_addr,glLoadTransposeMatrixdARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multTransposeMatrixfARB(atom a)
	poke4(call_by_ptr__num_params,1)
	poke4(call_by_ptr_params,a)
	poke4(call_by_ptr__func_addr,glMultTransposeMatrixfARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_multTransposeMatrixdARB(atom a)
	poke4(call_by_ptr__num_params,1)
	poke4(call_by_ptr_params,a)
	poke4(call_by_ptr__func_addr,glMultTransposeMatrixdARB)
	call(call_by_ptr_code)
end procedure

--GL_ARB_texture_compression
global procedure gl_getCompressedTexImageARB(integer a, integer b, atom c)
	poke4(call_by_ptr__num_params,3)
	poke4(call_by_ptr_params,{a,b,c})
	poke4(call_by_ptr__func_addr,glGetCompressedTexImageARB)
	call(call_by_ptr_code)
end procedure

--GL_ARB_point_parameters
global procedure gl_pointParameterfARB(integer pname, atom param)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr_params,pname)
	poke(call_by_ptr_params+4,atom_to_float32(param))
	poke4(call_by_ptr__func_addr,glPointParameterfARB)
	call(call_by_ptr_code)
end procedure

global procedure gl_pointParameterfvARB(integer pname, sequence params)
	gl_pokef32(gl_vector_buffer,params)
	poke4(call_by_ptr_params,pname)
	poke4(call_by_ptr_params+4,gl_vector_buffer)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr__func_addr,glPointParameterfvARB)
	call(call_by_ptr_code)
end procedure

--GL_EXT_point_parameters
global procedure gl_pointParameterfEXT(integer a, atom b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr_params,a)
	poke(call_by_ptr_params+4,atom_to_float32(b))
	poke4(call_by_ptr__func_addr,glPointParameterfEXT)
	call(call_by_ptr_code)
end procedure

global procedure gl_pointParameterfvEXT(integer a, sequence b)
	gl_pokef32(gl_vector_buffer,b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr_params,a)
	poke4(call_by_ptr_params+4,gl_vector_buffer)
	poke4(call_by_ptr__func_addr,glPointParameterfvEXT)
	call(call_by_ptr_code)
end procedure


--GL_EXT_fog_coord
global procedure gl_fogCoordfEXT(atom a)
	poke4(call_by_ptr__num_params,1)
	poke(call_by_ptr_params,atom_to_float32(a))
	poke4(call_by_ptr__func_addr,glFogCoordfEXT)
	call(call_by_ptr_code)
end procedure

global procedure gl_fogCoordfvEXT(sequence a)
	gl_pokef32(gl_vector_buffer,a)
	poke4(call_by_ptr__num_params,1)
	poke4(call_by_ptr_params,gl_vector_buffer)
	poke4(call_by_ptr__func_addr,glFogCoordfvEXT)
	call(call_by_ptr_code)
end procedure

global procedure gl_fogCoorddEXT(atom a)
	sequence f64
	poke4(call_by_ptr__num_params,2)
	f64 = atom_to_float64(a)
	poke(call_by_ptr_params,f64[5..8])
	poke(call_by_ptr_params+4,f64[1..4])
	poke4(call_by_ptr__func_addr,glFogCoorddEXT)
	call(call_by_ptr_code)
end procedure


global procedure gl_texBumpParameterivATI(integer a,sequence b)
	poke4(gl_vector_buffer,b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr_params,{a,gl_vector_buffer})
	poke4(call_by_ptr__func_addr,glTexBumpParameterivATI)
	call(call_by_ptr_code)
end procedure

global procedure gl_texBumpParameterfvATI(integer a,sequence b)
	gl_pokef32(gl_vector_buffer,b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr_params,{a,gl_vector_buffer})
	poke4(call_by_ptr__func_addr,glTexBumpParameterfvATI)
	call(call_by_ptr_code)
end procedure

global procedure gl_getTexBumpParameterivATI(integer a,sequence b)
	poke4(gl_vector_buffer,b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr_params,{a,gl_vector_buffer})
	poke4(call_by_ptr__func_addr,glGetTexBumpParameterivATI)
	call(call_by_ptr_code)
end procedure

global procedure gl_getTexBumpParameterfvATI(integer a,sequence b)
	gl_pokef32(gl_vector_buffer,b)
	poke4(call_by_ptr__num_params,2)
	poke4(call_by_ptr_params,{a,gl_vector_buffer})
	poke4(call_by_ptr__func_addr,glGetTexBumpParameterfvATI)
	call(call_by_ptr_code)
end procedure


	

-- Return true (1) if the extension is supported, false (0) otherwise.
global function gl_supportsExtension(sequence ext)
	atom lpExtString
	sequence t
	integer c
	
	lpExtString = c_func(glGetString, {GL_EXTENSIONS})
	
	c = 1
	while c!=0 do
		c = peek(lpExtString)
		if c=0 then
			exit
		end if
		if c=ext[1] then
			t = peek_string(lpExtString)
			if equal(t[2],ext) then
				return 1
			end if
			lpExtString = t[1]
		else
			lpExtString += 1
		end if
	end while
	
	return 0
end function



global procedure gl_enableExtension(object what)
	integer pos
	atom extString
	
	if sequence(what) then
		pos = find(what,gl_extension_names)
		if pos<1 then
			return 
		end if
		gl_enableExtension_helper(what)
	else
		if what=100 then	-- EUGL_ALL_AVAILABLE
			extString = c_func(glGetString,{GL_EXTENSIONS})
			-- TODO: iterate over all supported extensions and enable them.
		end if
	end if
end procedure



---------------------------------------------------------------------------------------------------------------------------
------------------------------------------------ WGL extensions -----------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------


global constant WGL_WGLEXT_VERSION	= 4

global constant WGL_FRONT_COLOR_BUFFER_BIT_ARB	= #00000001
global constant WGL_BACK_COLOR_BUFFER_BIT_ARB	= #00000002
global constant WGL_DEPTH_BUFFER_BIT_ARB	= #00000004
global constant WGL_STENCIL_BUFFER_BIT_ARB	= #00000008

global constant WGL_SAMPLE_BUFFERS_ARB	= #2041
global constant WGL_SAMPLES_ARB	= #2042


global constant WGL_NUMBER_PIXEL_FORMATS_ARB	= #2000
global constant WGL_DRAW_TO_WINDOW_ARB	= #2001
global constant WGL_DRAW_TO_BITMAP_ARB	= #2002
global constant WGL_ACCELERATION_ARB	= #2003
global constant WGL_NEED_PALETTE_ARB	= #2004
global constant WGL_NEED_SYSTEM_PALETTE_ARB	= #2005
global constant WGL_SWAP_LAYER_BUFFERS_ARB	= #2006
global constant WGL_SWAP_METHOD_ARB	= #2007
global constant WGL_NUMBER_OVERLAYS_ARB	= #2008
global constant WGL_NUMBER_UNDERLAYS_ARB	= #2009
global constant WGL_TRANSPARENT_ARB	= #200A
global constant WGL_TRANSPARENT_RED_VALUE_ARB	= #2037
global constant WGL_TRANSPARENT_GREEN_VALUE_ARB	= #2038
global constant WGL_TRANSPARENT_BLUE_VALUE_ARB	= #2039
global constant WGL_TRANSPARENT_ALPHA_VALUE_ARB	= #203A
global constant WGL_TRANSPARENT_INDEX_VALUE_ARB	= #203B
global constant WGL_SHARE_DEPTH_ARB	= #200C
global constant WGL_SHARE_STENCIL_ARB	= #200D
global constant WGL_SHARE_ACCUM_ARB	= #200E
global constant WGL_SUPPORT_GDI_ARB	= #200F
global constant WGL_SUPPORT_OPENGL_ARB	= #2010
global constant WGL_DOUBLE_BUFFER_ARB	= #2011
global constant WGL_STEREO_ARB	= #2012
global constant WGL_PIXEL_TYPE_ARB	= #2013
global constant WGL_COLOR_BITS_ARB	= #2014
global constant WGL_RED_BITS_ARB	= #2015
global constant WGL_RED_SHIFT_ARB	= #2016
global constant WGL_GREEN_BITS_ARB	= #2017
global constant WGL_GREEN_SHIFT_ARB	= #2018
global constant WGL_BLUE_BITS_ARB	= #2019
global constant WGL_BLUE_SHIFT_ARB	= #201A
global constant WGL_ALPHA_BITS_ARB	= #201B
global constant WGL_ALPHA_SHIFT_ARB	= #201C
global constant WGL_ACCUM_BITS_ARB	= #201D
global constant WGL_ACCUM_RED_BITS_ARB	= #201E
global constant WGL_ACCUM_GREEN_BITS_ARB	= #201F
global constant WGL_ACCUM_BLUE_BITS_ARB	= #2020
global constant WGL_ACCUM_ALPHA_BITS_ARB	= #2021
global constant WGL_DEPTH_BITS_ARB	= #2022
global constant WGL_STENCIL_BITS_ARB	= #2023
global constant WGL_AUX_BUFFERS_ARB	= #2024
global constant WGL_NO_ACCELERATION_ARB	= #2025
global constant WGL_GENERIC_ACCELERATION_ARB	= #2026
global constant WGL_FULL_ACCELERATION_ARB	= #2027
global constant WGL_SWAP_EXCHANGE_ARB	= #2028
global constant WGL_SWAP_COPY_ARB	= #2029
global constant WGL_SWAP_UNDEFINED_ARB	= #202A
global constant WGL_TYPE_RGBA_ARB	= #202B
global constant WGL_TYPE_COLORINDEX_ARB	= #202C

global constant ERROR_INVALID_PIXEL_TYPE_ARB	= #2043
global constant ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB	= #2054

global constant WGL_DRAW_TO_PBUFFER_ARB	= #202D
global constant WGL_MAX_PBUFFER_PIXELS_ARB	= #202E
global constant WGL_MAX_PBUFFER_WIDTH_ARB	= #202F
global constant WGL_MAX_PBUFFER_HEIGHT_ARB	= #2030
global constant WGL_PBUFFER_LARGEST_ARB	= #2033
global constant WGL_PBUFFER_WIDTH_ARB	= #2034
global constant WGL_PBUFFER_HEIGHT_ARB	= #2035
global constant WGL_PBUFFER_LOST_ARB	= #2036

global constant WGL_BIND_TO_TEXTURE_RGB_ARB	= #2070
global constant WGL_BIND_TO_TEXTURE_RGBA_ARB	= #2071
global constant WGL_TEXTURE_FORMAT_ARB	= #2072
global constant WGL_TEXTURE_TARGET_ARB	= #2073
global constant WGL_MIPMAP_TEXTURE_ARB	= #2074
global constant WGL_TEXTURE_RGB_ARB	= #2075
global constant WGL_TEXTURE_RGBA_ARB	= #2076
global constant WGL_NO_TEXTURE_ARB	= #2077
global constant WGL_TEXTURE_CUBE_MAP_ARB	= #2078
global constant WGL_TEXTURE_1D_ARB	= #2079
global constant WGL_TEXTURE_2D_ARB	= #207A
global constant WGL_MIPMAP_LEVEL_ARB	= #207B
global constant WGL_CUBE_MAP_FACE_ARB	= #207C
global constant WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB	= #207D
global constant WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB	= #207E
global constant WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB	= #207F
global constant WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB	= #2080
global constant WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB	= #2081
global constant WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB	= #2082
global constant WGL_FRONT_LEFT_ARB	= #2083
global constant WGL_FRONT_RIGHT_ARB	= #2084
global constant WGL_BACK_LEFT_ARB	= #2085
global constant WGL_BACK_RIGHT_ARB	= #2086
global constant WGL_AUX0_ARB	= #2087
global constant WGL_AUX1_ARB	= #2088
global constant WGL_AUX2_ARB	= #2089
global constant WGL_AUX3_ARB	= #208A
global constant WGL_AUX4_ARB	= #208B
global constant WGL_AUX5_ARB	= #208C
global constant WGL_AUX6_ARB	= #208D
global constant WGL_AUX7_ARB	= #208E
global constant WGL_AUX8_ARB	= #208F
global constant WGL_AUX9_ARB	= #2090

global constant ERROR_INVALID_PIXEL_TYPE_EXT	= #2043

global constant WGL_NUMBER_PIXEL_FORMATS_EXT	= #2000
global constant WGL_DRAW_TO_WINDOW_EXT	= #2001
global constant WGL_DRAW_TO_BITMAP_EXT	= #2002
global constant WGL_ACCELERATION_EXT	= #2003
global constant WGL_NEED_PALETTE_EXT	= #2004
global constant WGL_NEED_SYSTEM_PALETTE_EXT	= #2005
global constant WGL_SWAP_LAYER_BUFFERS_EXT	= #2006
global constant WGL_SWAP_METHOD_EXT	= #2007
global constant WGL_NUMBER_OVERLAYS_EXT	= #2008
global constant WGL_NUMBER_UNDERLAYS_EXT	= #2009
global constant WGL_TRANSPARENT_EXT	= #200A
global constant WGL_TRANSPARENT_VALUE_EXT	= #200B
global constant WGL_SHARE_DEPTH_EXT	= #200C
global constant WGL_SHARE_STENCIL_EXT	= #200D
global constant WGL_SHARE_ACCUM_EXT	= #200E
global constant WGL_SUPPORT_GDI_EXT	= #200F
global constant WGL_SUPPORT_OPENGL_EXT	= #2010
global constant WGL_DOUBLE_BUFFER_EXT	= #2011
global constant WGL_STEREO_EXT	= #2012
global constant WGL_PIXEL_TYPE_EXT	= #2013
global constant WGL_COLOR_BITS_EXT	= #2014
global constant WGL_RED_BITS_EXT	= #2015
global constant WGL_RED_SHIFT_EXT	= #2016
global constant WGL_GREEN_BITS_EXT	= #2017
global constant WGL_GREEN_SHIFT_EXT	= #2018
global constant WGL_BLUE_BITS_EXT	= #2019
global constant WGL_BLUE_SHIFT_EXT	= #201A
global constant WGL_ALPHA_BITS_EXT	= #201B
global constant WGL_ALPHA_SHIFT_EXT	= #201C
global constant WGL_ACCUM_BITS_EXT	= #201D
global constant WGL_ACCUM_RED_BITS_EXT	= #201E
global constant WGL_ACCUM_GREEN_BITS_EXT	= #201F
global constant WGL_ACCUM_BLUE_BITS_EXT	= #2020
global constant WGL_ACCUM_ALPHA_BITS_EXT	= #2021
global constant WGL_DEPTH_BITS_EXT	= #2022
global constant WGL_STENCIL_BITS_EXT	= #2023
global constant WGL_AUX_BUFFERS_EXT	= #2024
global constant WGL_NO_ACCELERATION_EXT	= #2025
global constant WGL_GENERIC_ACCELERATION_EXT	= #2026
global constant WGL_FULL_ACCELERATION_EXT	= #2027
global constant WGL_SWAP_EXCHANGE_EXT	= #2028
global constant WGL_SWAP_COPY_EXT	= #2029
global constant WGL_SWAP_UNDEFINED_EXT	= #202A
global constant WGL_TYPE_RGBA_EXT	= #202B
global constant WGL_TYPE_COLORINDEX_EXT	= #202C

global constant WGL_DRAW_TO_PBUFFER_EXT	= #202D
global constant WGL_MAX_PBUFFER_PIXELS_EXT	= #202E
global constant WGL_MAX_PBUFFER_WIDTH_EXT	= #202F
global constant WGL_MAX_PBUFFER_HEIGHT_EXT	= #2030
global constant WGL_OPTIMAL_PBUFFER_WIDTH_EXT	= #2031
global constant WGL_OPTIMAL_PBUFFER_HEIGHT_EXT	= #2032
global constant WGL_PBUFFER_LARGEST_EXT	= #2033
global constant WGL_PBUFFER_WIDTH_EXT	= #2034
global constant WGL_PBUFFER_HEIGHT_EXT	= #2035

global constant WGL_DEPTH_FLOAT_EXT	= #2040

global constant WGL_SAMPLE_BUFFERS_3DFX	= #2060
global constant WGL_SAMPLES_3DFX	= #2061

global constant WGL_SAMPLE_BUFFERS_EXT	= #2041
global constant WGL_SAMPLES_EXT	= #2042

global constant WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D	= #2050
global constant WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D	= #2051
global constant WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D	= #2052
global constant WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D	= #2053

global constant WGL_GAMMA_TABLE_SIZE_I3D	= #204E
global constant WGL_GAMMA_EXCLUDE_DESKTOP_I3D	= #204F

global constant WGL_GENLOCK_SOURCE_MULTIVIEW_I3D	= #2044
global constant WGL_GENLOCK_SOURCE_EXTENAL_SYNC_I3D	= #2045
global constant WGL_GENLOCK_SOURCE_EXTENAL_FIELD_I3D	= #2046
global constant WGL_GENLOCK_SOURCE_EXTENAL_TTL_I3D	= #2047
global constant WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D	= #2048
global constant WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D	= #2049
global constant WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D	= #204A
global constant WGL_GENLOCK_SOURCE_EDGE_RISING_I3D	= #204B
global constant WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D	= #204C

global constant WGL_IMAGE_BUFFER_MIN_ACCESS_I3D	= #00000001
global constant WGL_IMAGE_BUFFER_LOCK_I3D	= #00000002

global constant WGL_TYPE_RGBA_FLOAT_ATI       	= #21A0
global constant GL_TYPE_RGBA_FLOAT_ATI        	= #8820

global constant WGL_FLOAT_COMPONENTS_NV                     = #20B0
global constant WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV    = #20B1
global constant WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV   = #20B2
global constant WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV  = #20B3
global constant WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV = #20B4

global constant WGL_TEXTURE_FLOAT_R_NV                      = #20B5
global constant WGL_TEXTURE_FLOAT_RG_NV                     = #20B6
global constant WGL_TEXTURE_FLOAT_RGB_NV                    = #20B7
global constant WGL_TEXTURE_FLOAT_RGBA_NV                   = #20B8

global constant WGL_BIND_TO_TEXTURE_RECTANGLE_RGB_NV        = #20A0
global constant WGL_BIND_TO_TEXTURE_RECTANGLE_RGBA_NV       = #20A1

global constant WGL_TEXTURE_RECTANGLE_NV                    = #20A2

global constant WGL_TEXTURE_DEPTH_COMPONENT_NV          = #20A6
global constant WGL_DEPTH_TEXTURE_FORMAT_NV             = #20A5
global constant WGL_BIND_TO_TEXTURE_DEPTH_NV            = #20A3
global constant WGL_BIND_TO_TEXTURE_RECTANGLE_DEPTH_NV  = #20A4
global constant WGL_DEPTH_COMPONENT_NV                  = #20A7


constant wgl_extension_names = {
"WGL_ARB_pixel_format",
"WGL_I3D_gamma",
"WGL_EXT_extensions_string",
"WGL_EXT_display_color_table",
"WGL_EXT_make_current_read",
"WGL_ARB_pbuffer",
"WGL_I3D_swap_frame_lock",
"WGL_I3D_swap_frame_usage",
"WGL_I3D_genlock",
"WGL_OML_sync_control",
"WGL_EXT_pixel_format",
"WGL_ARB_buffer_region",
"WGL_EXT_pbuffer",
"WGL_EXT_swap_control",
"WGL_NV_vertex_array_range",
"WGL_I3D_digital_video_control",
"WGL_ARB_extensions_string",
"WGL_ARB_make_current_read",
"WGL_ARB_render_texture",
"WGL_I3D_image_buffer"
}


-- Used by wgl_supportsExtension()
constant wgl_extension_funcs = {
"wglGetPixelFormatAttribivARB",
"wglGetGammaTableParametersI3D",
"wglGetExtensionsStringEXT",
"wglCreateDisplayColorTableEXT",
"wglMakeContextCurrentEXT",
"wglCreatePbufferARB",
"wglEnableFrameLockI3D",
"wglGetFrameUsageI3D",
"wglEnableGenlockI3D",
"wglGetSyncValuesOML",
"wglGetPixelFormatAttribivEXT",
"wglCreateBufferRegionARB",
"wglCreatePbufferEXT",
"wglSwapIntervalEXT",
"wglAllocateMemoryNV",
"wglGetDigitalVideoParametersI3D",
"wglGetExtensionsStringARB",
"wglMakeContextCurrentARB",
"wglBindTexImageARB",
"wglCreateImageBufferI3D"
}


global atom
wglCreateBufferRegionARB,wglDeleteBufferRegionARB,wglSaveBufferRegionARB,wglRestoreBufferRegionARB,
wglGetExtensionsStringARB,wglGetPixelFormatAttribivARB,wglGetPixelFormatAttribfvARB,
wglChoosePixelFormatARB,wglMakeContextCurrentARB,wglGetCurrentReadDCARB,
wglCreatePbufferARB,wglGetPbufferDCARB,wglReleasePbufferDCARB,wglDestroyPbufferARB,
wglQueryPbufferARB,wglBindTexImageARB,wglReleaseTexImageARB,wglSetPbufferAttribARB,
wglCreateDisplayColorTableEXT,wglLoadDisplayColorTableEXT,wglBindDisplayColorTableEXT,
wglDestroyDisplayColorTableEXT,wglGetExtensionsStringEXT,
wglMakeContextCurrentEXT,wglGetCurrentReadDCEXT,wglCreatePbufferEXT,
wglGetPbufferDCEXT,wglReleasePbufferDCEXT,wglDestroyPbufferEXT,
wglQueryPbufferEXT,wglGetPixelFormatAttribivEXT,wglGetPixelFormatAttribfvEXT,
wglChoosePixelFormatEXT,wglSwapIntervalEXT,wglGetSwapIntervalEXT,
wglAllocateMemoryNV,wglFreeMemoryNV,wglGetSyncValuesOML,wglGetMscRateOML,
wglSwapBuffersMscOML,wglSwapLayerBuffersMscOML,wglWaitForMscOML,
wglWaitForSbcOML,wglGetDigitalVideoParametersI3D,
wglSetDigitalVideoParametersI3D,wglGetGammaTableParametersI3D,
wglSetGammaTableParametersI3D,wglGetGammaTableI3D,wglSetGammaTableI3D,
wglEnableGenlockI3D,wglDisableGenlockI3D,wglIsEnabledGenlockI3D,
wglGenlockSourceI3D,wglGetGenlockSourceI3D,wglGenlockSourceEdgeI3D,
wglGetGenlockSourceEdgeI3D,wglGenlockSampleRateI3D,
wglGetGenlockSampleRateI3D,wglGenlockSourceDelayI3D,
wglGetGenlockSourceDelayI3D,wglQueryGenlockMaxSourceDelayI3D,
wglCreateImageBufferI3D,wglDestroyImageBufferI3D,
wglAssociateImageBufferEventsI3D,wglReleaseImageBufferEventsI3D,
wglEnableFrameLockI3D,wglDisableFrameLockI3D,wglIsEnabledFrameLockI3D,
wglQueryFrameLockMasterI3D,wglGetFrameUsageI3D,wglBeginFrameTrackingI3D,
wglEndFrameTrackingI3D,wglQueryFrameTrackingI3D



procedure enable_WGL_ARB_pixel_format()
	wglGetPixelFormatAttribivARB = link_glext_func("wglGetPixelFormatAttribivARB",{C_UINT,C_INT,C_INT,C_UINT,C_POINTER,C_POINTER},C_INT)
	wglGetPixelFormatAttribfvARB = link_glext_func("wglGetPixelFormatAttribfvARB",{C_UINT,C_INT,C_INT,C_UINT,C_POINTER,C_POINTER},C_INT)
	wglChoosePixelFormatARB = link_glext_func("wglChoosePixelFormatARB",{C_UINT,C_POINTER,C_POINTER,C_UINT,C_POINTER,C_POINTER},C_INT)
end procedure

procedure enable_WGL_I3D_gamma()
	wglGetGammaTableParametersI3D = link_glext_func("wglGetGammaTableParametersI3D",{C_UINT,C_INT,C_POINTER},C_INT)
	wglSetGammaTableParametersI3D = link_glext_func("wglSetGammaTableParametersI3D",{C_UINT,C_INT,C_POINTER},C_INT)
	wglGetGammaTableI3D = link_glext_func("wglGetGammaTableI3D",{C_UINT,C_INT,C_POINTER,C_POINTER,C_POINTER},C_INT)
	wglSetGammaTableI3D = link_glext_func("wglSetGammaTableI3D",{C_UINT,C_INT,C_POINTER,C_POINTER,C_POINTER},C_INT)
end procedure

procedure enable_WGL_EXT_extensions_string()
	wglGetExtensionsStringEXT = link_glext_func("wglGetExtensionsStringEXT",{},C_POINTER)
end procedure

procedure enable_WGL_EXT_display_color_table()
	wglCreateDisplayColorTableEXT = link_glext_func("wglCreateDisplayColorTableEXT",{GLushort},GLboolean)
	wglLoadDisplayColorTableEXT = link_glext_func("wglLoadDisplayColorTableEXT",{C_POINTER, GLuint},GLboolean)
	wglBindDisplayColorTableEXT = link_glext_func("wglBindDisplayColorTableEXT",{GLushort},GLboolean)
	wglDestroyDisplayColorTableEXT = link_glext_proc("wglDestroyDisplayColorTableEXT",{GLushort})
end procedure

procedure enable_WGL_EXT_make_current_read()
	wglMakeContextCurrentEXT = link_glext_func("wglMakeContextCurrentEXT",{C_UINT,C_UINT, C_UINT},C_INT)
	wglGetCurrentReadDCEXT = link_glext_func("wglGetCurrentReadDCEXT",{},C_UINT)
end procedure

procedure enable_WGL_ARB_pbuffer()
	wglCreatePbufferARB = link_glext_func("wglCreatePbufferARB",{C_UINT,C_INT,C_INT,C_INT,C_POINTER},C_UINT)
	wglGetPbufferDCARB = link_glext_func("wglGetPbufferDCARB",{C_UINT},C_UINT)
	wglReleasePbufferDCARB = link_glext_func("wglReleasePbufferDCARB",{C_UINT,C_UINT},C_INT)
	wglDestroyPbufferARB = link_glext_func("wglDestroyPbufferARB",{C_UINT},C_INT)
	wglQueryPbufferARB = link_glext_func("wglQueryPbufferARB",{C_UINT,C_INT,C_POINTER},C_INT)
end procedure

procedure enable_WGL_I3D_swap_frame_lock()
	wglEnableFrameLockI3D = link_glext_func("wglEnableFrameLockI3D",{},C_INT)
	wglDisableFrameLockI3D = link_glext_func("wglDisableFrameLockI3D",{},C_INT)
	wglIsEnabledFrameLockI3D = link_glext_func("wglIsEnabledFrameLockI3D",{C_POINTER},C_INT)
	wglQueryFrameLockMasterI3D = link_glext_func("wglQueryFrameLockMasterI3D",{C_POINTER},C_INT)
end procedure

procedure enable_WGL_I3D_swap_frame_usage()
	wglGetFrameUsageI3D = link_glext_func("wglGetFrameUsageI3D",{C_POINTER},C_INT)
	wglBeginFrameTrackingI3D = link_glext_func("wglBeginFrameTrackingI3D",{},C_INT)
	wglEndFrameTrackingI3D = link_glext_func("wglEndFrameTrackingI3D",{},C_INT)
	wglQueryFrameTrackingI3D = link_glext_func("wglQueryFrameTrackingI3D",{C_POINTER,C_POINTER,C_POINTER},C_INT)
end procedure

procedure enable_WGL_I3D_genlock()
	wglEnableGenlockI3D = link_glext_func("wglEnableGenlockI3D",{C_UINT},C_INT)
	wglDisableGenlockI3D = link_glext_func("wglDisableGenlockI3D",{C_UINT},C_INT)
	wglIsEnabledGenlockI3D = link_glext_func("wglIsEnabledGenlockI3D",{C_UINT,C_POINTER},C_INT)
	wglGenlockSourceI3D = link_glext_func("wglGenlockSourceI3D",{C_UINT,C_UINT},C_INT)
	wglGetGenlockSourceI3D = link_glext_func("wglGetGenlockSourceI3D",{C_UINT,C_POINTER},C_INT)
	wglGenlockSourceEdgeI3D = link_glext_func("wglGenlockSourceEdgeI3D",{C_UINT,C_UINT},C_INT)
	wglGetGenlockSourceEdgeI3D = link_glext_func("wglGetGenlockSourceEdgeI3D",{C_UINT,C_POINTER},C_INT)
	wglGenlockSampleRateI3D = link_glext_func("wglGenlockSampleRateI3D",{C_UINT,C_UINT},C_INT)
	wglGetGenlockSampleRateI3D = link_glext_func("wglGetGenlockSampleRateI3D",{C_UINT,C_POINTER},C_INT)
	wglGenlockSourceDelayI3D = link_glext_func("wglGenlockSourceDelayI3D",{C_UINT,C_UINT},C_INT)
	wglGetGenlockSourceDelayI3D = link_glext_func("wglGetGenlockSourceDelayI3D",{C_UINT,C_POINTER},C_INT)
	wglQueryGenlockMaxSourceDelayI3D = link_glext_func("wglQueryGenlockMaxSourceDelayI3D",{C_UINT,C_POINTER,C_POINTER},C_INT)
end procedure

procedure enable_WGL_OML_sync_control()
	wglGetSyncValuesOML = link_glext_func("wglGetSyncValuesOML",{C_UINT,C_POINTER,C_POINTER,C_POINTER},C_INT)
	wglGetMscRateOML = link_glext_func("wglGetMscRateOML",{C_UINT,C_POINTER,C_POINTER},C_INT)
	wglSwapBuffersMscOML = link_glext_func("wglSwapBuffersMscOML",{C_UINT,C_INT,C_INT,C_INT},C_INT)
	wglSwapLayerBuffersMscOML = link_glext_func("wglSwapLayerBuffersMscOML",{C_UINT,C_INT,C_INT,C_INT,C_INT},C_INT)
	wglWaitForMscOML = link_glext_func("wglWaitForMscOML",{C_UINT,C_INT,C_INT,C_INT,C_POINTER,C_POINTER,C_POINTER},C_INT)
	wglWaitForSbcOML = link_glext_func("wglWaitForSbcOML",{C_UINT,C_INT,C_POINTER,C_POINTER,C_POINTER},C_INT)
end procedure

procedure enable_WGL_EXT_pixel_format()
	wglGetPixelFormatAttribivEXT = link_glext_func("wglGetPixelFormatAttribivEXT",{C_UINT,C_INT,C_INT,C_UINT,C_POINTER,C_POINTER},C_INT)
	wglGetPixelFormatAttribfvEXT = link_glext_func("wglGetPixelFormatAttribfvEXT",{C_UINT,C_INT,C_INT,C_UINT,C_POINTER,C_POINTER},C_INT)
	wglChoosePixelFormatEXT = link_glext_func("wglChoosePixelFormatEXT",{C_UINT,C_POINTER,C_POINTER,C_UINT,C_POINTER,C_POINTER},C_INT)
end procedure

procedure enable_WGL_ARB_buffer_region()
	wglCreateBufferRegionARB = link_glext_func("wglCreateBufferRegionARB",{C_UINT,C_INT,C_UINT},C_UINT)
	wglDeleteBufferRegionARB = link_glext_proc("wglDeleteBufferRegionARB",{C_UINT})
	wglSaveBufferRegionARB = link_glext_func("wglSaveBufferRegionARB",{C_UINT,C_INT,C_INT,C_INT,C_INT},C_INT)
	wglRestoreBufferRegionARB = link_glext_func("wglRestoreBufferRegionARB",{C_UINT,C_INT,C_INT,C_INT,C_INT,C_INT,C_INT},C_INT)
end procedure

procedure enable_WGL_EXT_pbuffer()
	wglCreatePbufferEXT = link_glext_func("wglCreatePbufferEXT",{C_UINT,C_INT,C_INT,C_INT,C_POINTER},C_UINT)
	wglGetPbufferDCEXT = link_glext_func("wglGetPbufferDCEXT",{C_UINT},C_UINT)
	wglReleasePbufferDCEXT = link_glext_func("wglReleasePbufferDCEXT",{C_UINT,C_UINT},C_INT)
	wglDestroyPbufferEXT = link_glext_func("wglDestroyPbufferEXT",{C_UINT},C_INT)
	wglQueryPbufferEXT = link_glext_func("wglQueryPbufferEXT",{C_UINT,C_INT,C_POINTER},C_INT)
end procedure

procedure enable_WGL_EXT_swap_control()
	wglSwapIntervalEXT = link_glext_func("wglSwapIntervalEXT",{C_INT},C_INT)
	wglGetSwapIntervalEXT = link_glext_func("wglGetSwapIntervalEXT",{},C_INT)
end procedure

procedure enable_WGL_NV_vertex_array_range()
	wglAllocateMemoryNV = link_glext_func("wglAllocateMemoryNV",{GLsizei, GLfloat, GLfloat, GLfloat},C_POINTER)
	wglFreeMemoryNV = link_glext_proc("wglFreeMemoryNV",{C_POINTER})
end procedure

procedure enable_WGL_I3D_digital_video_control()
	wglGetDigitalVideoParametersI3D = link_glext_func("wglGetDigitalVideoParametersI3D",{C_UINT,C_INT,C_POINTER},C_INT)
	wglSetDigitalVideoParametersI3D = link_glext_func("wglSetDigitalVideoParametersI3D",{C_UINT,C_INT,C_POINTER},C_INT)
end procedure

procedure enable_WGL_ARB_extensions_string()
	wglGetExtensionsStringARB = link_glext_func("wglGetExtensionsStringARB",{C_UINT},C_POINTER)
end procedure

procedure enable_WGL_ARB_make_current_read()
	wglMakeContextCurrentARB = link_glext_func("wglMakeContextCurrentARB",{C_UINT,C_UINT, C_UINT},C_INT)
	wglGetCurrentReadDCARB = link_glext_func("wglGetCurrentReadDCARB",{},C_UINT)
end procedure

procedure enable_WGL_ARB_render_texture()
	wglBindTexImageARB = link_glext_func("wglBindTexImageARB",{C_UINT,C_INT},C_INT)
	wglReleaseTexImageARB = link_glext_func("wglReleaseTexImageARB",{C_UINT,C_INT},C_INT)
	wglSetPbufferAttribARB = link_glext_func("wglSetPbufferAttribARB",{C_UINT,C_POINTER},C_INT)
end procedure

procedure enable_WGL_I3D_image_buffer()
	wglCreateImageBufferI3D = link_glext_proc("wglCreateImageBufferI3D",{C_UINT,C_UINT,C_UINT})
	wglDestroyImageBufferI3D = link_glext_func("wglDestroyImageBufferI3D",{C_UINT},C_INT)
	wglAssociateImageBufferEventsI3D = link_glext_func("wglAssociateImageBufferEventsI3D",{C_UINT,C_POINTER,C_POINTER,C_POINTER,C_UINT},C_INT)
	wglReleaseImageBufferEventsI3D = link_glext_func("wglReleaseImageBufferEventsI3D",{C_UINT,C_POINTER,C_UINT},C_INT)
end procedure



procedure wgl_enableExtension_helper(sequence what)
if equal(what,"WGL_ARB_pixel_format") then
	enable_WGL_ARB_pixel_format()
	return
end if
if equal(what,"WGL_I3D_gamma") then
	enable_WGL_I3D_gamma()
	return
end if
if equal(what,"WGL_EXT_extensions_string") then
	enable_WGL_EXT_extensions_string()
	return
end if
if equal(what,"WGL_EXT_display_color_table") then
	enable_WGL_EXT_display_color_table()
	return
end if
if equal(what,"WGL_EXT_make_current_read") then
	enable_WGL_EXT_make_current_read()
	return
end if
if equal(what,"WGL_ARB_pbuffer") then
	enable_WGL_ARB_pbuffer()
	return
end if
if equal(what,"WGL_I3D_swap_frame_lock") then
	enable_WGL_I3D_swap_frame_lock()
	return
end if
if equal(what,"WGL_I3D_swap_frame_usage") then
	enable_WGL_I3D_swap_frame_usage()
	return
end if
if equal(what,"WGL_I3D_genlock") then
	enable_WGL_I3D_genlock()
	return
end if
if equal(what,"WGL_OML_sync_control") then
	enable_WGL_OML_sync_control()
	return
end if
if equal(what,"WGL_EXT_pixel_format") then
	enable_WGL_EXT_pixel_format()
	return
end if
if equal(what,"WGL_ARB_buffer_region") then
	enable_WGL_ARB_buffer_region()
	return
end if
if equal(what,"WGL_EXT_pbuffer") then
	enable_WGL_EXT_pbuffer()
	return
end if
if equal(what,"WGL_EXT_swap_control") then
	enable_WGL_EXT_swap_control()
	return
end if
if equal(what,"WGL_NV_vertex_array_range") then
	enable_WGL_NV_vertex_array_range()
	return
end if
if equal(what,"WGL_I3D_digital_video_control") then
	enable_WGL_I3D_digital_video_control()
	return
end if
if equal(what,"WGL_ARB_extensions_string") then
	enable_WGL_ARB_extensions_string()
	return
end if
if equal(what,"WGL_ARB_make_current_read") then
	enable_WGL_ARB_make_current_read()
	return
end if
if equal(what,"WGL_ARB_render_texture") then
	enable_WGL_ARB_render_texture()
	return
end if
if equal(what,"WGL_I3D_image_buffer") then
	enable_WGL_I3D_image_buffer()
	return
end if
end procedure



global function wgl_getPixelFormatAttribivARB(atom a,integer b,integer c,atom d,atom e,atom f)
	poke4(call_by_ptr__num_params,6)
	poke4(call_by_ptr_params,{a,b,c,d,e,f})
	poke4(call_by_ptr__func_addr,wglGetPixelFormatAttribivARB)
	call(call_by_ptr_code)
	return peek4s(call_by_ptr_retval)
end function

global function wgl_getPixelFormatAttribfvARB(atom a,integer b,integer c,atom d,atom e,atom f)
	poke4(call_by_ptr__num_params,6)
	poke4(call_by_ptr_params,{a,b,c,d,e,f})
	poke4(call_by_ptr__func_addr,wglGetPixelFormatAttribfvARB)
	call(call_by_ptr_code)
	return peek4s(call_by_ptr_retval)
end function

global function wgl_choosePixelFormatARB(atom a,atom b,atom c,atom d,atom e,atom f)
	poke4(call_by_ptr__num_params,6)
	poke4(call_by_ptr_params,{a,b,c,d,e,f})
	poke4(call_by_ptr__func_addr,wglChoosePixelFormatARB)
	call(call_by_ptr_code)
	return peek4s(call_by_ptr_retval)
end function

global function wgl_getExtensionsStringEXT()
	atom a
	integer i
	sequence s

	poke4(call_by_ptr__num_params,0)
	poke4(call_by_ptr__func_addr,wglGetExtensionsStringEXT)
	call(call_by_ptr_code)
	a = peek4u(call_by_ptr_retval)
	
	if a<=0 then
		return {}
	end if
	s = {}
	i = 1
	
	while i do
		i = peek(a)
		a += 1
		if i then
			s &= i
		end if
	end while
	
	return s
end function

global function wgl_getExtensionsStringARB(atom b)
	atom a
	integer i
	sequence s

	poke4(call_by_ptr__num_params,1)
	poke4(call_by_ptr_params,a)
	poke4(call_by_ptr__func_addr,wglGetExtensionsStringARB)
	call(call_by_ptr_code)
	a = peek4u(call_by_ptr_retval)
	
	if a<=0 then
		return {}
	end if
	s = {}
	i = 1
	
	while i do
		i = peek(a)
		a += 1
		if i then
			s &= i
		end if
	end while
	
	return s
end function
		
global function wgl_swapIntervalEXT(integer a)
	poke4(call_by_ptr__num_params,1)
	poke4(call_by_ptr_params,a)
	poke4(call_by_ptr__func_addr,wglSwapIntervalEXT)
	call(call_by_ptr_code)
	return peek4u(call_by_ptr_retval)
end function


global function	wgl_getSwapIntervalEXT()
	poke4(call_by_ptr__num_params,0)
	poke4(call_by_ptr__func_addr,wglGetSwapIntervalEXT)
	call(call_by_ptr_code)
	return peek4u(call_by_ptr_retval)
end function


	
-- Return true (1) if the extension is supported, false (0) otherwise.
global function wgl_supportsExtension(sequence ext)
	--atom lpExtString
	integer p
	
	p = find(ext,wgl_extension_names)
	if p then
		-- If one of the extension's functions is available we
		-- assume the extension is supported.
		poke(gl_vector_buffer,wgl_extension_funcs[p]&0)
		if c_func(wglGetProcAddress,{gl_vector_buffer})>0 then
			return 1
		end if
	end if
	
	return 0
end function


global procedure wgl_enableExtension(object what)
	integer pos
	--atom extString
	
	if sequence(what) then
		pos = find(what,wgl_extension_names)
		if pos<1 then
			return 
		end if
		wgl_enableExtension_helper(what)
	else
	--	if what=100 then	-- EUGL_ALL_AVAILABLE
	--		extString = c_func(glGetString,{GL_EXTENSIONS})
	--		-- TODO: iterate over all supported extensions and enable them.
	--	end if
	end if
end procedure
