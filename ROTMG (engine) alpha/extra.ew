include misc.e
include get.e

global function is_even(integer test_integer)
	
  return (and_bits(test_integer, 1) = 0)

end function

global function point_distance(atom x1,atom y1 , atom x2, atom y2)
    atom x, y
    --x = power(floor(x1) - floor(x2), 2)
    --y = power(floor(y1) - floor(y2), 2)

    x = power(x1 - x2, 2)
    y = power(y1 - y2, 2)

    return sqrt(x + y)
end function


constant HALFPI    = PI/2

global function atan2(atom y, atom x)
	
  if x > 0 then
		
    return arctan(y/x)
	
  elsif x < 0 then
		
    if y < 0 then
			
      return arctan(y/x) - PI
		
    else
			
      return arctan(y/x) + PI
		
    end if
	
  elsif y > 0 then
		
    return HALFPI
	
  elsif y < 0 then
		
    return -(HALFPI)
	
  else
		
    return 0
	
  end if

end function

object junk
junk = {{},{}}
for j = 360 to 0 by -1 do
    junk[1] = append(junk[1], sin(j*PI/180) )
    junk[2] = append(junk[2], cos(j*PI/180) )
end for
constant sin_loTRUE2up = junk[1], cos_loTRUE2up = junk[2]


	--public float getAngleTo(Location l) {
	--	return (float) (180-Math.atan2(l.x - this.x, l.y - this.y)*180/Math.PI);
	--}

global function get_angle_to(atom x, atom y, atom x2, atom y2)
  return (180- atan2(x2 - x ,y2 - y) *180/PI)

end function


--public  float toRotmgAngle(float angle) {
--return (float) ((angle - 90) / (360 / Math.PI / 2));
--}

global function toRotmgAngle(atom angle)
  return ((angle-90) / (360/PI/2) )

end function


global function degtorad(atom angle)
	  return (angle * (PI/180))
end function


global function radtodeg(atom angle)
	  return angle * (180 / PI)
end function


sequence key_buffer
key_buffer={}


global function abs(integer x)
    if x < 0 then
        x = -x
    end if
    return x
end function--abs


global function remove_line(sequence string, integer line)
sequence temp
integer len
len=length(string)
if line=1 then
  return string[2..len]
elsif line=len then
  return string[1..len-1]
else
  temp=string[1..line-1]
  return temp&string[line+1..len]
end if
end function

global function key_check(integer scancode)
  for i=1 to length(key_buffer) do
    if key_buffer[i]=scancode then
      return 1
    end if
  end for
return 0
end function

global procedure key_add(integer scancode)
integer find1
find1=0
  for i=1 to length(key_buffer) do
    if key_buffer[i]=scancode then
      find1=1
      exit
    end if
  end for
if find1=0 then
  key_buffer=append(key_buffer,scancode)
end if
end procedure

global procedure key_remove(integer scancode)
  for i=1 to length(key_buffer) do
     if key_buffer[i]=scancode then
       key_buffer=remove_line(key_buffer,i)
       exit
     end if
  end for
end procedure

global function real(sequence string)
sequence temp
temp=value(string)
return temp[2]
end function

--global function wrap_between(integer v,integer min, integer max)

--	while v<min do
--		v+=max
--	end while
	
--	while v>max do
--		v-=max
--	end while
	
--	return v
--end function

global function wrap_between(integer v,integer min, integer max)
  return v - (max - min) * floor( v / (max - min))
end function




global procedure usleep(integer v)
	c_proc(Sleep,{v})
end procedure

global function get_tick_count()
  return  c_func(GetTickCount,{})
end function

global atom c_start_time
c_start_time=get_tick_count()

global function current_time()
  return  c_func(GetTickCount,{})-c_start_time
end function