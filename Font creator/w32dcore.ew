-- Win32Dib : Fast bitmap manipulation for Win32Lib (24-bit graphics).
-- CORE LIBRARY

-- Copyright (C) 2004 - 2005 Tommy Carlier
-- tommy.carlier@telenet.be
-- http://users.telenet.be/tommycarlier

include win32lib.ew

global constant Win32DibVersion = {0, 5, 3, "17-November-2005"} -- {Major, Minor, Patch, Date}

if Win32LibVersion[1] = 0 and Win32LibVersion[2] < 60 then
    VOID = message_box(sprintf("You need Win32Lib version 0.60 or\na more recent version to use Win32Dib %d.%d.%d.", Win32DibVersion), "Sorry", 0)
    abort(1)
end if

constant xdCreateDIBSection = registerw32Function(gdi32, "CreateDIBSection", {C_INT, C_POINTER, C_INT, C_POINTER, C_INT, C_INT}, C_POINTER)

global constant DibHandle = 1, DibMemory = 2, DibWidth = 3, DibHeight = 4, DibBytesPerLine = 5, DibBytesTotal = 6, DibPadding = 7

global integer clip_x1, clip_y1, clip_x2, clip_y2, clipped, clip_src_outside -- clipping variables to speed up routines
clip_x1 = 0  clip_y1 = 0  clip_x2 = 0  clip_y2 = 0  clipped = 0  clip_src_outside = 0

constant 
	WIN32DIB_ASM = allocate(393),
	ASM_DRAWDIBTODIBALPHA5050 = WIN32DIB_ASM,
	ASM_DRAWDIBTODIBALPHA5050_X = WIN32DIB_ASM + 4,
	ASM_DRAWDIBTODIBALPHA5050_SRCMEMORY = WIN32DIB_ASM + 9,
	ASM_DRAWDIBTODIBALPHA5050_DESTMEMORY = WIN32DIB_ASM + 14,
	ASM_DRAWDIBTODIBALPHA = WIN32DIB_ASM + #2C,
	ASM_DRAWDIBTODIBALPHA_X = WIN32DIB_ASM + 49,
	ASM_DRAWDIBTODIBALPHA_SRCMEMORY = WIN32DIB_ASM + 54,
	ASM_DRAWDIBTODIBALPHA_DESTMEMORY = WIN32DIB_ASM + 59,
	ASM_DRAWDIBTODIBALPHA_ALPHA = WIN32DIB_ASM + 64,
	ASM_DRAWDIBTODIBALPHA_ALPHA2 = WIN32DIB_ASM + 66,
	ASM_DRAWDIBTODIBTRANS = WIN32DIB_ASM + #66,
	ASM_DRAWDIBTODIBTRANS_X = WIN32DIB_ASM + 107,
	ASM_DRAWDIBTODIBTRANS_SRCMEMORY = WIN32DIB_ASM + 112,
	ASM_DRAWDIBTODIBTRANS_DESTMEMORY = WIN32DIB_ASM + 117,
	ASM_DRAWDIBTODIBTRANS_TRANSCOLOR = WIN32DIB_ASM + 122,
	ASM_DRAWDIBTODIBTRANS5050 = WIN32DIB_ASM + #A2,
	ASM_DRAWDIBTODIBTRANS5050_X = WIN32DIB_ASM + 167,
	ASM_DRAWDIBTODIBTRANS5050_SRCMEMORY = WIN32DIB_ASM + 172,
	ASM_DRAWDIBTODIBTRANS5050_DESTMEMORY = WIN32DIB_ASM + 177,
	ASM_DRAWDIBTODIBTRANS5050_TRANSCOLOR = WIN32DIB_ASM + 182,
	ASM_DRAWDIBTODIBTRANSALPHA = WIN32DIB_ASM + #107,
	ASM_DRAWDIBTODIBTRANSALPHA_X = WIN32DIB_ASM + 268,
	ASM_DRAWDIBTODIBTRANSALPHA_SRCMEMORY = WIN32DIB_ASM + 273,
	ASM_DRAWDIBTODIBTRANSALPHA_DESTMEMORY = WIN32DIB_ASM + 278,
	ASM_DRAWDIBTODIBTRANSALPHA_TRANSCOLOR = WIN32DIB_ASM + 283,
	ASM_DRAWDIBTODIBTRANSALPHA_ALPHA = WIN32DIB_ASM + 316,
	ASM_DRAWDIBTODIBTRANSALPHA_ALPHA2 = WIN32DIB_ASM + 318

procedure initDib()
	poke(WIN32DIB_ASM, {
		#56,#57,#51,#B9,#00,#00,#00,#00,#BE,#00,#00,#00,#00,#BF,#00,#00,#00,#00,#66,#31,
		#C0,#66,#31,#DB,#8A,#06,#8A,#1F,#66,#01,#D8,#66,#D1,#E8,#88,#07,#47,#46,#E2,#F0,
		#59,#5F,#5E,#C3,#56,#57,#51,#52,#B9,#00,#00,#00,#00,#BE,#00,#00,#00,#00,#BF,#00,
		#00,#00,#00,#B2,#00,#B6,#00,#66,#31,#C0,#66,#31,#DB,#8A,#06,#F6,#E2,#66,#89,#C3,
		#8A,#07,#F6,#E6,#66,#01,#D8,#66,#C1,#E8,#08,#88,#07,#47,#46,#E2,#E8,#5A,#59,#5F,
		#5E,#C3,#56,#57,#51,#52,#B9,#00,#00,#00,#00,#BE,#00,#00,#00,#00,#BF,#00,#00,#00,
		#00,#BA,#00,#00,#00,#00,#8B,#06,#25,#FF,#FF,#FF,#00,#39,#D0,#74,#0C,#8B,#1F,#81,
		#E3,#00,#00,#00,#FF,#09,#C3,#89,#1F,#47,#47,#47,#46,#46,#46,#E2,#E1,#5A,#59,#5F,
		#5E,#C3,#56,#57,#51,#52,#B9,#00,#00,#00,#00,#BE,#00,#00,#00,#00,#BF,#00,#00,#00,
		#00,#BA,#00,#00,#00,#00,#8B,#06,#25,#FF,#FF,#FF,#00,#39,#D0,#74,#35,#31,#C0,#31,
		#DB,#8A,#06,#8A,#1F,#66,#01,#D8,#66,#D1,#E8,#88,#07,#47,#46,#8A,#06,#8A,#1F,#66,
		#01,#D8,#66,#D1,#E8,#88,#07,#47,#46,#8A,#06,#8A,#1F,#66,#01,#D8,#66,#D1,#E8,#88,
		#07,#47,#46,#E2,#C5,#5A,#59,#5F,#5E,#C3,#47,#47,#47,#46,#46,#46,#E2,#B8,#5A,#59,
		#5F,#5E,#C3,#56,#57,#51,#52,#B9,#00,#00,#00,#00,#BE,#00,#00,#00,#00,#BF,#00,#00,
		#00,#00,#BA,#00,#00,#00,#00,#8B,#06,#25,#FF,#FF,#FF,#00,#39,#D0,#75,#0D,#47,#47,
		#47,#46,#46,#46,#E2,#ED,#5A,#59,#5F,#5E,#C3,#31,#C0,#31,#DB,#B2,#00,#B6,#00,#8A,
		#06,#F6,#E2,#66,#89,#C3,#8A,#07,#F6,#E6,#66,#01,#D8,#66,#C1,#E8,#08,#88,#07,#47,
		#46,#8A,#06,#F6,#E2,#66,#89,#C3,#8A,#07,#F6,#E6,#66,#01,#D8,#66,#C1,#E8,#08,#88,
		#07,#47,#46,#8A,#06,#F6,#E2,#66,#89,#C3,#8A,#07,#F6,#E6,#66,#01,#D8,#66,#C1,#E8,
		#08,#88,#07,#47,#46,#8B,#15,#AA,#97,#5A,#84,#E2,#96})

	poke4(WIN32DIB_ASM + 387, ASM_DRAWDIBTODIBTRANSALPHA_TRANSCOLOR) -- @trans_color
end procedure
initDib()

function finalizeDib(integer errCode, sequence errText, integer controlId, integer lastCleanup)
	--	Finalize Win32Dib: free all allocated memory.
	free(WIN32DIB_ASM)
	return 0
end function
VOID = attachCleanUp(routine_id("finalizeDib"))

global function newDib(integer width, integer height)
	--	Attempts to create a new 24-bit bitmap of the desired width and height.
	--	returns a sequence s of length 7:
	--		s[1] = handle (use it to communicate with Win32Lib controls)
	--		s[2] = pointer to the memory area where you can poke/peek the bitmap
	--		s[3] = width of the bitmap in pixels
	--		s[4] = height of the bitmap in pixels
	--		s[5] = amount of bytes per line
	--		s[6] = total amount of bytes
	--	returns 0 if the bitmap couldn't be created.
	
	--	To put a pixel with coordinates (x, y) on the bitmap:
	--		address = s[DibMemory] + 3 * x + y * s[DibBytesPerLine]
	--		poke(address, color) -- color = a sequence of length 3 {blue, green, red}
	
	--	To get the color of a pixel with coordinates (x, y) from the bitmap:
	--		address = s[DibMemory] + 3 * x + y * s[DibBytesPerLine])
	--		color = peek({address, 3}) -- color = a sequence of length 3 {blue, green, red}
	
	atom bits, bitmapInfo, memSet, dib, videoMemory
	integer padding
	
	memSet = new_memset()
	bitmapInfo = acquire_mem(memSet, SIZEOF_BITMAPINFOHEADER)
    store(bitmapInfo, biSize, SIZEOF_BITMAPINFOHEADER)
    store(bitmapInfo, biWidth, width)
    store(bitmapInfo, biHeight,  -height)
    store(bitmapInfo, biPlanes, 1)
    store(bitmapInfo, biBitCount, 24)
    store(bitmapInfo, biCompression, 0)
    store(bitmapInfo, biSizeImage, 0)
    store(bitmapInfo, biXPelsPerMeter, 0)
    store(bitmapInfo, biYPelsPerMeter, 0)
    store(bitmapInfo, biClrUsed, 0)
    store(bitmapInfo, biClrImportant, 0)
    
    bits = allocate(4)
    poke4(bits, 0)
    
    dib = w32Func(xdCreateDIBSection, {getDC(Screen), bitmapInfo, 0, bits, NULL, 0})
    release_mem(memSet)
    if dib = 0 then return 0 end if
    releaseDC(Screen)
    
    videoMemory = peek4u(bits)
    free(bits)
    
    padding = floor((width * 3 + 3)/4) * 4 - width * 3
    return {dib, videoMemory, width, height, width * 3 + padding, (width * 3 + padding) * height, padding}
end function

global procedure killDib(sequence dib)
	--	Removes a bitmap from memory.
	deleteObject(dib[DibHandle])
end procedure

global function copyDib(sequence dib)
	--	Returns a copy of the bitmap or 0 if the new bitmap couldn't be created
	object new_dib
	
	new_dib = newDib(dib[DibWidth], dib[DibHeight])
	if sequence(new_dib) then
		mem_copy(new_dib[DibMemory], dib[DibMemory], dib[DibBytesTotal])
	end if
	
	return new_dib
end function

global function dibColor(integer red, integer green, integer blue)
	--	Converts an RGB-value to a sequence that can be used in a bitmap
	return {blue, green, red}
end function

global procedure putDibPixel(sequence dib, integer x, integer y, sequence color)
	--	Puts a pixel with the specified color on the bitmap at position (x, y).
	if x >= 0 and x < dib[DibWidth] and y >= 0 and y < dib[DibHeight] then
		poke(dib[DibMemory] + 3 * x + y * dib[DibBytesPerLine], color)
	end if
end procedure

global function getDibPixel(sequence dib, integer x, integer y)
	--	Gets the color of a pixel from the bitmap.
	if x >= 0 and x < dib[DibWidth] and y >= 0 and y < dib[DibHeight] then
		return peek({dib[DibMemory] + 3 * x + y * dib[DibBytesPerLine], 3})
	else
		return 0
	end if
end function

global procedure fastPutDibPixel(sequence dib, integer x, integer y, sequence color)
	--	Puts a pixel with the specified color on the bitmap at position (x, y).
	--	Is much faster than putDibPixel, but doesn't check for boundaries.
	--	Only use this procedure if you're absolutely sure that (x, y) is on the bitmap.
	poke(dib[DibMemory] + y * dib[DibBytesPerLine] + x * 3, color)
end procedure

global function fastGetDibPixel(sequence dib, integer x, integer y)
	--	Gets the color of a pixel from the bitmap.
	--	Is much faster than getDibPixel, but doesn't check for boundaries.
	--	Only use this function if you're absolutely sure that (x, y) is on the bitmap.
	return peek({dib[DibMemory] + y * dib[DibBytesPerLine] + x * 3, 3})
end function

global procedure clearDib(sequence dib, sequence color)
	--	Clears the bitmap with a certain color
	atom memory, dest, max_dest
	integer c, bytes, bytes_per_line
	sequence line
	c = color[1]
	if c = color[2] and c = color[3] then -- gray color, so very fast fill possible
		mem_set(dib[DibMemory], c, dib[DibBytesTotal])
	else
		memory = dib[DibMemory]
		bytes_per_line = dib[DibBytesPerLine]
		line = repeat(0, bytes_per_line)
		for i = 1 to dib[DibWidth] * 3 by 3 do
			line[i..i+2] = color
		end for
		poke(memory, line) -- fill first line
		dest = memory + bytes_per_line
		bytes = bytes_per_line
		max_dest = memory + dib[DibBytesTotal]
		while dest + bytes < max_dest do
			mem_copy(dest, memory, bytes) -- copy block of memory
			dest += bytes
			bytes += bytes
		end while
		bytes = max_dest - dest + 3
		if bytes > 0 then mem_copy(dest, memory, bytes) end if
	end if
end procedure

global function loadDib(sequence fileName)
	--	Loads a bitmap from a BMP-file, returns 0 if the bitmap couldn't be read
	atom bitmap
	sequence size
	object dib
	
	bitmap = loadBitmapFromFile(fileName)
	if bitmap = NULL then return 0 end if
	size = getCtlSize(bitmap)
	dib = newDib(size[1], size[2])
	if sequence(dib) then
		bitBlt(dib[DibHandle], 0, 0, bitmap, 0, 0, size[1], size[2], SrcCopy)
	end if
	deleteObject(bitmap)
	
	return dib
end function

global function saveDib(sequence dib, sequence fileName, integer x1, integer y1, integer x2, integer y2)
	--	Saves a portion ((x1, y1) -> (x2, y2)) of the bitmap to a BMP-file
	integer fn, cx, cy, width, height, bytes
	atom memory
	
	width = dib[DibWidth]
	height = dib[DibHeight]
	
	if x1 < 0 then x1 = 0 elsif x1 >= width then x1 = width - 1 end if -- make sure x1 is within boundaries
	if x2 < 0 then x2 = 0 elsif x2 >= width then x2 = width - 1 end if -- make sure x2 is within boundaries
	if x2 < x1 then -- swap x1 and x2 if x2 < x1
		cx = x2
		x2 = x1
		x1 = cx
	elsif x1 = x2 then -- empty region
		return 1
	end if
	cx = x2 - x1 + 1 -- the width of the region
	
	if y1 < 0 then y1 = 0 elsif y1 >= height then y1 = height - 1 end if -- make sure y1 is within boundaries
	if y2 < 0 then y2 = 0 elsif y2 >= height then y2 = height - 1 end if -- make sure y2 is within boundaries
	if y2 < y1 then -- swap y1 and y2 if y2 < y1
		cy = y2
		y2 = y1
		y1 = cy
	elsif y1 = y2 then -- empty region
		return 1
	end if
	cy = y2 - y1 + 1 -- the height of the region
	
	fn = open(fileName, "wb") -- open the file for writing
	if fn = -1 then return 1 end if
	
	bytes = dib[DibBytesPerLine] -- bytes per line
	
	puts(fn, "BM" & int_to_bytes(54 + cy * bytes)
			 & {0, 0, 0, 0, 54, 0, 0, 0, 40, 0, 0, 0}
			 & int_to_bytes(cx) & int_to_bytes(cy)
			 & {1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 11, 0, 0, 64, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0})
			-- write the bitmap-header

	memory = dib[DibMemory] + 3 * x1 + y2 * bytes -- reading starts at (x1, y2): bottom to top
	cx = floor((cx * 3 + 3) / 4) * 4
	for i = 1 to cy do
		puts(fn, peek({memory, cx}))
		memory -= bytes
	end for
	close(fn) -- close the file
	return 0
end function

global function saveDibGray(sequence dib, sequence fileName, integer x1, integer y1, integer x2, integer y2)
	--	Saves a portion ((x1, y1) -> (x2, y2)) of the bitmap to an 8-bit grayscale BMP-file.
	integer fn, cx, cy, width, height, bytes, index, padding
	atom memory
	sequence line, color
	
	width = dib[DibWidth]
	height = dib[DibHeight]
	
	if x1 < 0 then x1 = 0 elsif x1 >= width then x1 = width - 1 end if -- make sure x1 is within boundaries
	if x2 < 0 then x2 = 0 elsif x2 >= width then x2 = width - 1 end if -- make sure x2 is within boundaries
	if x2 < x1 then -- swap x1 and x2 if x2 < x1
		cx = x2
		x2 = x1
		x1 = cx
	elsif x1 = x2 then -- empty region
		return 1
	end if
	cx = x2 - x1 + 1 -- the width of the region
	
	if y1 < 0 then y1 = 0 elsif y1 >= height then y1 = height - 1 end if -- make sure y1 is within boundaries
	if y2 < 0 then y2 = 0 elsif y2 >= height then y2 = height - 1 end if -- make sure y2 is within boundaries
	if y2 < y1 then -- swap y1 and y2 if y2 < y1
		cy = y2
		y2 = y1
		y1 = cy
	elsif y1 = y2 then -- empty region
		return 1
	end if
	cy = y2 - y1 + 1 -- the height of the region
	
	fn = open(fileName, "wb") -- open the file for writing
	if fn = -1 then return 1 end if
	
	padding = floor((cx + 3)/4) * 4 - cx
	
	puts(fn, "BM" & int_to_bytes(54 + cy * (cx + padding))
			 & {0, 0, 0, 0, 54, 0, 0, 0, 40, 0, 0, 0}
			 & int_to_bytes(cx) & int_to_bytes(cy)
			 & {1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 11, 0, 0, 64, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0})
			-- write the bitmap-header
	for i = 0 to 255 do
		puts(fn, repeat(i, 4))
	end for

	bytes = dib[DibBytesPerLine]
	line = repeat(0, cx + padding)
	cx *= 3
	memory = dib[DibMemory] + 3 * x1 + y2 * bytes -- reading starts at (x1, y2): bottom to top
	for i = 1 to cy do
		index = 1
		for j = memory to memory + cx - 3 by 3 do
			color = peek({j, 3})
			line[index] = floor((color[1] * 114 + color[2] * 587 + color[3] * 299)/1000)
			index += 1
		end for
		puts(fn, line)
		memory -= bytes
	end for
	close(fn) -- close the file
	return 0
end function

global function saveDibReduced(sequence dib, sequence fileName, integer x1, integer y1, integer x2, integer y2)
	--	Saves a portion ((x1, y1) -> (x2, y2)) of the bitmap to an 8-bit BMP-file (uses websafe palette).
	integer fn, cx, cy, width, height, bytes, index, padding
	atom memory
	sequence line, color
	
	width = dib[DibWidth]
	height = dib[DibHeight]
	
	if x1 < 0 then x1 = 0 elsif x1 >= width then x1 = width - 1 end if -- make sure x1 is within boundaries
	if x2 < 0 then x2 = 0 elsif x2 >= width then x2 = width - 1 end if -- make sure x2 is within boundaries
	if x2 < x1 then -- swap x1 and x2 if x2 < x1
		cx = x2
		x2 = x1
		x1 = cx
	elsif x1 = x2 then -- empty region
		return 1
	end if
	cx = x2 - x1 + 1 -- the width of the region
	
	if y1 < 0 then y1 = 0 elsif y1 >= height then y1 = height - 1 end if -- make sure y1 is within boundaries
	if y2 < 0 then y2 = 0 elsif y2 >= height then y2 = height - 1 end if -- make sure y2 is within boundaries
	if y2 < y1 then -- swap y1 and y2 if y2 < y1
		cy = y2
		y2 = y1
		y1 = cy
	elsif y1 = y2 then -- empty region
		return 1
	end if
	cy = y2 - y1 + 1 -- the height of the region
	
	fn = open(fileName, "wb") -- open the file for writing
	if fn = -1 then return 1 end if
	
	padding = floor((cx + 3)/4) * 4 - cx
	
	puts(fn, "BM" & int_to_bytes(54 + cy * (cx + padding))
			 & {0, 0, 0, 0, 54, 0, 0, 0, 40, 0, 0, 0}
			 & int_to_bytes(cx) & int_to_bytes(cy)
			 & {1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 11, 0, 0, 64, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0})
			-- write the bitmap-header
	for i = 0 to 255 by 51 do
		for j = 0 to 255 by 51 do
			for k = 0 to 255 by 51 do
				puts(fn, {i, j, k, 0})
			end for
		end for
	end for
	puts(fn, repeat(0, 156))

	bytes = dib[DibBytesPerLine]
	line = repeat(0, cx + padding)
	cx *= 3
	memory = dib[DibMemory] + 3 * x1 + y2 * bytes -- reading starts at (x1, y2): bottom to top
	for i = 1 to cy do
		index = 1
		for j = memory to memory + cx - 3 by 3 do
			color = peek({j, 3})
			line[index] = (floor(color[1] / 51 + 0.5) * 6 + floor(color[2] / 51 + 0.5)) * 6 + floor(color[3] / 51 + 0.5)
			index += 1
		end for
		puts(fn, line)
		memory -= bytes
	end for
	close(fn) -- close the file
	return 0
end function

global procedure drawDib(integer control, sequence dib, integer controlX, integer controlY, integer dibX1, integer dibY1, integer dibX2, integer dibY2)
	--	Draws a portion ((dibX1, dibY1)-(dibX2, dibY2)) of the bitmap to a control at position (controlX, controlY)
	bitBlt(control, controlX, controlY, dib[DibHandle], dibX1, dibY1, dibX2 - dibX1 + 1, dibY2 - dibY1 + 1, SrcCopy)
end procedure

global procedure copyToDib(sequence dib, integer control, integer dibX, integer dibY, integer controlX1, integer controlY1, integer controlX2, integer controlY2)
	--	Draws a portion ((controlX1, controlY1)-(controlX2, controlY2)) of a control to the bitmap at position (dibX, dibY)
	bitBlt(dib[DibHandle], dibX, dibY, control, controlX1, controlY1, controlX2 - controlX1 + 1, controlY2 - controlY1 + 1, SrcCopy)
end procedure

global procedure clipToSource(integer x1, integer y1, integer x2, integer y2, integer width, integer height)
	integer dummy
	
	clip_src_outside = 0
	
	if x1 >= width then clip_src_outside = 1  return
	elsif x1 < 0 then clip_x1 = 0
	else clip_x1 = x1 end if
	if x2 < 0 then clip_src_outside = 1  return
	elsif x2 >= width then clip_x2 = width - 1
	else clip_x2 = x2 end if

	if clip_x1 = clip_x2 then clip_src_outside = 1  return
	elsif clip_x1 > clip_x2 then
		dummy = clip_x1
		clip_x1 = clip_x2
		clip_x2 = dummy
	end if

	if y1 >= height then clip_src_outside = 1  return
	elsif y1 < 0 then clip_y1 = 0
	else clip_y1 = y1 end if
	if y2 < 0 then clip_src_outside = 1  return
	elsif y2 >= height then clip_y2 = height - 1
	else clip_y2 = y2 end if
	
	if clip_y1 = clip_y2 then clip_src_outside = 1  return
	elsif clip_y1 > clip_y2 then
		dummy = clip_y1
		clip_y1 = clip_y2
		clip_y2 = dummy
	end if
end procedure

global procedure drawDibToDib(sequence dib_dest, sequence dib_src, integer dest_x, integer dest_y, integer src_x1, integer src_y1, integer src_x2, integer src_y2
	, sequence trans_color, integer alpha)
	--	Draws a portion ((src_x1, src_y1)-(src_x2, src_y2)) of a bitmap dib_src to the bitmap dib_dest at position (dest_x, dest_y)
	--	using the color trans_color as a transparent color (trans_color = {} => no transparency)
	--	Alpha is the translucency value: 0 = completely transparent, 255 = completely opaque
	integer src_width, src_height, dest_width, dest_height, portion_width, portion_height
	integer src_bytes_per_line, dest_bytes_per_line
	atom src_memory, dest_memory
	
	if alpha <= 0 then return -- no drawing necessary
	elsif alpha > 255 then alpha = 255
	end if
	
	src_width = dib_src[DibWidth]
	src_height = dib_src[DibHeight]
	dest_width = dib_dest[DibWidth]
	dest_height = dib_dest[DibHeight]
	
	--	1. Clip the source rectangle to the extent of the source bitmap
	if not clipped then
		clipToSource(src_x1, src_y1, src_x2, src_y2, src_width, src_height)
		if clip_src_outside then return end if
	end if
	src_x1 = clip_x1  src_y1 = clip_y1
	src_x2 = clip_x2  src_y2 = clip_y2

	portion_width = src_x2 - src_x1 + 1
	portion_height = src_y2 - src_y1 + 1
	
	--	2. Clip the source rectangle to the extent of the destination bitmap
	if dest_x >= dest_width or dest_x + portion_width < 0 then return end if -- outside destination bitmap
	if dest_x < 0 then src_x1 += -dest_x  portion_width += dest_x  dest_x = 0 end if
	if dest_x + portion_width > dest_width then src_x2 -= portion_width - dest_width + dest_x end if
	
	if dest_y >= dest_height or dest_y + portion_height < 0 then return end if -- outside destination bitmap
	if dest_y < 0 then src_y1 += -dest_y  portion_height += dest_y  dest_y = 0 end if
	if dest_y + portion_height > dest_height then src_y2 -= portion_height - dest_height + dest_y end if
	
	-- 3. Draw the bitmap
	src_bytes_per_line = dib_src[DibBytesPerLine]
	src_memory = dib_src[DibMemory] + src_x1 * 3 + src_y1 * src_bytes_per_line
	dest_bytes_per_line = dib_dest[DibBytesPerLine]
	dest_memory = dib_dest[DibMemory] + dest_x * 3 + dest_y * dest_bytes_per_line
	portion_width = (src_x2 - src_x1 + 1) * 3
	if portion_width <= 0 then return end if
	
	if length(trans_color) then
		if alpha = 255 then
			poke4(ASM_DRAWDIBTODIBTRANS_X, src_x2 - src_x1 + 1)
			poke4(ASM_DRAWDIBTODIBTRANS_TRANSCOLOR, 256 * (256 * trans_color[3] + trans_color[2]) + trans_color[1])
			for y = src_memory to src_memory + (src_y2 - src_y1) * src_bytes_per_line by src_bytes_per_line do
				poke4(ASM_DRAWDIBTODIBTRANS_SRCMEMORY, y)
				poke4(ASM_DRAWDIBTODIBTRANS_DESTMEMORY, dest_memory)
				call(ASM_DRAWDIBTODIBTRANS)
				dest_memory += dest_bytes_per_line
			end for
		elsif alpha = 127 or alpha = 128 then
			poke4(ASM_DRAWDIBTODIBTRANS5050_X, src_x2 - src_x1 + 1)
			poke4(ASM_DRAWDIBTODIBTRANS5050_TRANSCOLOR, 256 * (256 * trans_color[3] + trans_color[2]) + trans_color[1])
			for y = src_memory to src_memory + (src_y2 - src_y1) * src_bytes_per_line by src_bytes_per_line do
				poke4(ASM_DRAWDIBTODIBTRANS5050_SRCMEMORY, y)
				poke4(ASM_DRAWDIBTODIBTRANS5050_DESTMEMORY, dest_memory)
				call(ASM_DRAWDIBTODIBTRANS5050)
				dest_memory += dest_bytes_per_line
			end for
		else
			poke4(ASM_DRAWDIBTODIBTRANSALPHA_X, src_x2 - src_x1 + 1)
			poke4(ASM_DRAWDIBTODIBTRANSALPHA_TRANSCOLOR, 256 * (256 * trans_color[3] + trans_color[2]) + trans_color[1])
			poke(ASM_DRAWDIBTODIBTRANSALPHA_ALPHA, alpha)
			poke(ASM_DRAWDIBTODIBTRANSALPHA_ALPHA2, 256 - alpha)
			for y = src_memory to src_memory + (src_y2 - src_y1) * src_bytes_per_line by src_bytes_per_line do
				poke4(ASM_DRAWDIBTODIBTRANSALPHA_SRCMEMORY, y)
				poke4(ASM_DRAWDIBTODIBTRANSALPHA_DESTMEMORY, dest_memory)
				call(ASM_DRAWDIBTODIBTRANSALPHA)
				dest_memory += dest_bytes_per_line
			end for
		end if
	else
		if alpha = 255 then
			for y = src_memory to src_memory + (src_y2 - src_y1) * src_bytes_per_line by src_bytes_per_line do
				mem_copy(dest_memory, y, portion_width)
				dest_memory += dest_bytes_per_line
			end for
		elsif alpha = 127 or alpha = 128 then
			poke4(ASM_DRAWDIBTODIBALPHA5050_X, portion_width)
			for y = src_memory to src_memory + (src_y2 - src_y1) * src_bytes_per_line by src_bytes_per_line do
				poke4(ASM_DRAWDIBTODIBALPHA5050_SRCMEMORY, y)
				poke4(ASM_DRAWDIBTODIBALPHA5050_DESTMEMORY, dest_memory)
				call(ASM_DRAWDIBTODIBALPHA5050)
				dest_memory += dest_bytes_per_line
			end for
		else
			poke4(ASM_DRAWDIBTODIBALPHA_X, portion_width)
			poke(ASM_DRAWDIBTODIBALPHA_ALPHA, alpha)
			poke(ASM_DRAWDIBTODIBALPHA_ALPHA2, 256 - alpha)
			for y = src_memory to src_memory + (src_y2 - src_y1) * src_bytes_per_line by src_bytes_per_line do
				poke4(ASM_DRAWDIBTODIBALPHA_SRCMEMORY, y)
				poke4(ASM_DRAWDIBTODIBALPHA_DESTMEMORY, dest_memory)
				call(ASM_DRAWDIBTODIBALPHA)
				dest_memory += dest_bytes_per_line
			end for
		end if
	end if
end procedure

global procedure copyDibToDib(sequence dib_dest, sequence dib_source)
	--	Copies bitmap dib_source to dib_dest. Both bitmaps need to have the same size
	mem_copy(dib_dest[DibMemory], dib_source[DibMemory], dib_source[DibBytesTotal])
end procedure

global function extractDib(object src, integer x1, integer y1, integer x2, integer y2)
	--	Extracts a bitmap from the rectangular region (x1, y1)-(x2, y2) from source src
	--	src can be a bitmap (sequence) or a control (integer)
	object dib
	integer width, height
	
	width = x2 - x1 + 1
	height = y2 - y1 + 1
	
	dib = newDib(width, height)
	if atom(dib) then return dib end if
	
	if sequence(src) then drawDibToDib(dib, src, 0, 0, x1, y1, x2, y2, {}, 255)
	else bitBlt(dib[DibHandle], 0, 0, src, x1, y1, width, height, SrcCopy)
	end if
	
	return dib
end function

global procedure tileDibToDib(sequence dest, sequence src, integer dest_x, integer dest_y, integer x1, integer y1, integer x2, integer y2
	, sequence trans_color, integer alpha)
	--	Tiles (a part of) bitmap src to bitmap dest. {dest_x, dest_y} is the coordinate of a point where tiling begins.
	--	trans_color is the transparent color (empty sequence for no transparency), alpha is the translucency (0-255).
	integer portion_width, portion_height, x, width, height
	if x2 > x1 then portion_width = x2 - x1 + 1 elsif x1 > x2 then portion_width = x1 - x2 + 1 else return end if
	if y2 > y1 then portion_height = y2 - y1 + 1 elsif y1 > y2 then portion_height = y1 - y2 + 1 else return end if
	while dest_x > 0 do dest_x -= portion_width end while
	while dest_y > 0 do dest_y -= portion_height end while
	width = dest[DibWidth]
	height = dest[DibHeight]

	clipToSource(x1, y1, x2, y2, src[DibWidth], src[DibHeight])
	clipped = 1
	while dest_y < height do
		x = dest_x
		while x < width do
			drawDibToDib(dest, src, x, dest_y, x1, y1, x2, y2, trans_color, alpha)
			x += portion_width
		end while
		dest_y += portion_height
	end while
	clipped = 0
end procedure
