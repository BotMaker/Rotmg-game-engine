-- Win32Dib : Fast bitmap manipulation for Win32Lib (24-bit graphics).
-- COLOR MANIPULATION LIBRARY

-- Copyright (C) 2004 Tommy Carlier
-- tommy.carlier@telenet.be
-- http://users.telenet.be/tommycarlier

include w32dcore.ew

global procedure applyDibBrightnessToDib(sequence dib_dest, sequence dib_src, integer dest_x, integer dest_y, integer src_x1, integer src_y1, integer src_x2, integer src_y2, integer pct)
	--	applies the brightness of a portion ((src_x1, src_y1)-(src_x2, src_y2)) of a bitmap dib_src to the bitmap dib_dest
	--	at position (dest_x, dest_y). pct is the percentage: 0 = don't apply brightness, 100 = apply full brightness
	integer src_width, src_height, dest_width, dest_height, portion_width, portion_height
	integer src_bytes_per_line, dest_padding, red, green, blue, div, bias
	atom src_memory, dest_memory
	sequence color

	if pct <= 0 then return -- no need to apply brightness
	elsif pct > 100 then pct = 100
	end if
	
	src_width = dib_src[DibWidth]
	src_height = dib_src[DibHeight]
	dest_width = dib_dest[DibWidth]
	dest_height = dib_dest[DibHeight]
	
	--	1. Clip the source rectangle to the extent of the source bitmap
	if not clipped then
		clipToSource(src_x1, src_y1, src_x2, src_y2, src_width, src_height)
		if clip_src_outside then return end if
	end if
	src_x1 = clip_x1  src_y1 = clip_y1
	src_x2 = clip_x2  src_y2 = clip_y2

	portion_width = src_x2 - src_x1 + 1
	portion_height = src_y2 - src_y1 + 1
	
	--	2. Clip the source rectangle to the extent of the destination bitmap
	if dest_x >= dest_width or dest_x + portion_width < 0 then return end if -- outside destination bitmap
	if dest_x < 0 then src_x1 += -dest_x  portion_width += dest_x  dest_x = 0 end if
	if dest_x + portion_width > dest_width then src_x2 -= portion_width - dest_width + dest_x end if
	
	if dest_y >= dest_height or dest_y + portion_height < 0 then return end if -- outside destination bitmap
	if dest_y < 0 then src_y1 += -dest_y  portion_height += dest_y  dest_y = 0 end if
	if dest_y + portion_height > dest_height then src_y2 -= portion_height - dest_height + dest_y end if
	
	-- 3. Draw the bitmap
	src_bytes_per_line = dib_src[DibBytesPerLine]
	src_memory = dib_src[DibMemory] + src_x1 * 3 + src_y1 * src_bytes_per_line
	dest_memory = dib_dest[DibMemory] + dest_x * 3 + dest_y * dib_dest[DibBytesPerLine]
	portion_width = (src_x2 - src_x1) * 3
	dest_padding = dib_dest[DibBytesPerLine] - portion_width - 3
	
	div = floor(50000 / pct)
	bias = floor(256 * pct / 100)
	for y = src_memory to src_memory + (src_y2 - src_y1) * src_bytes_per_line by src_bytes_per_line do
		for x = y to y + portion_width by 3 do
			color = peek({x, 3})
			color = peek({dest_memory, 3}) + floor((color[1] * 114 + color[2] * 587 + color[3] * 299)/div) - bias
			blue = color[1]  if blue < 0 then blue = 0 elsif blue > 255 then blue = 255 end if
			green = color[2]  if green < 0 then green = 0 elsif green > 255 then green = 255 end if
			red = color[3]  if red < 0 then red = 0 elsif red > 255 then red = 255 end if
			poke(dest_memory, {blue, green, red})
			dest_memory += 3
		end for
		dest_memory += dest_padding
	end for
end procedure

global procedure invertDib(sequence dib)
	--	Inverts the pixels of the bitmap
	atom memory
	integer bytesPerLine, width3
	memory = dib[DibMemory]
	bytesPerLine = dib[DibBytesPerLine]
	width3 = dib[DibWidth] * 3
	for i = 1 to dib[DibHeight] do
		poke(memory, 255 - peek({memory, width3}))
		memory += bytesPerLine
	end for
end procedure

global procedure makeDibGray(sequence dib)
	--	Makes the bitmap gray (black & white)
	atom memory
	integer gray, bytes_per_line, width3
	sequence color
	memory = dib[DibMemory]
	bytes_per_line = dib[DibBytesPerLine]
	width3 = dib[DibWidth] * 3 - 3
	for y = memory to memory + dib[DibBytesTotal] - bytes_per_line by bytes_per_line do
		for x = y to y + width3 by 3 do
			color = peek({x, 3})
			gray = floor((color[1] * 114 + color[2] * 587 + color[3] * 299)/1000)
			mem_set(x, gray, 3)
		end for
	end for
end procedure

global procedure replaceDibColor(sequence dib, sequence oldColor, sequence newColor)
	--	Replaces oldColor in the bitmap with newColor
	atom memory
	integer bytes_per_line, width3
	if equal(oldColor, newColor) then return end if -- no replacing necessary
	memory = dib[DibMemory]
	bytes_per_line = dib[DibBytesPerLine]
	width3 = dib[DibWidth] * 3 - 3
	for y = memory to memory + dib[DibBytesTotal] - bytes_per_line by bytes_per_line do
		for x = y to y + width3 by 3 do
			if equal(peek({x, 3}), oldColor) then poke(x, newColor) end if
		end for
	end for
end procedure

global procedure replaceDibColors(sequence dib, sequence oldColors, sequence newColors)
	--	Replaces all the colors in oldColors in the bitmap with the same color in newColors
	atom memory
	integer index, len, bytes_per_line, width3
	sequence oldColors2, newColors2
	len = length(oldColors)
	if len > length(newColors) then len = length(newColors) end if -- take the length of the shortest sequence
	oldColors2 = repeat(0, len)
	newColors2 = repeat(0, len)
	index = 0
	for i = 1 to len do
		if not equal(oldColors[i], newColors[i]) then -- remove colors that don't need replacing
			index += 1
			oldColors2[index] = oldColors[i]
			newColors2[index] = newColors[i]
		end if
	end for
	if index = 0 then return -- no replacing necessary
	elsif index = 1 then replaceDibColor(dib, oldColors[1], newColors[1]) return -- only 1 color: use the faster replaceDibColor
	end if
	oldColors = oldColors2[1..index]
	newColors = newColors2[1..index]
	memory = dib[DibMemory]
	bytes_per_line = dib[DibBytesPerLine]
	width3 = dib[DibWidth] * 3 - 3
	for y = memory to memory + dib[DibBytesTotal] - bytes_per_line by bytes_per_line do
		for x = y to y + width3 by 3 do
			index = find(peek({x, 3}), oldColors)
			if index > 0 then poke(x, newColors[index]) end if
		end for
	end for
end procedure

global procedure adjustDibColors(sequence dib, sequence delta)
	--	Adds delta to each color
	atom memory
	integer red, green, blue, bytes_per_line, width3
	sequence color
	if equal(delta, {0, 0, 0}) then return end if -- no adjusting necessary
	memory = dib[DibMemory]
	bytes_per_line = dib[DibBytesPerLine]
	width3 = dib[DibWidth] * 3 - 3
	for y = memory to memory + dib[DibBytesTotal] - bytes_per_line by bytes_per_line do
		for x = y to y + width3 by 3 do
			color = peek({x, 3}) + delta
			blue = color[1]
			green = color[2]
			red = color[3]
			if blue < 0 then poke(x, 0) elsif blue > 255 then poke(x, 255) else poke(x, blue) end if
			if green < 0 then poke(x + 1, 0) elsif green > 255 then poke(x + 1, 255) else poke(x + 1, green) end if
			if red < 0 then poke(x + 2, 0) elsif red > 255 then poke(x + 2, 255) else poke(x + 2, red) end if
		end for
	end for
end procedure

global procedure colorizeDib(sequence dib, sequence color)
	--	Changes the color of the bitmap to the passed color
	atom memory
	integer red, green, blue, bytes_per_line, width3
	sequence orig_color, new_color, palette, delta
	memory = dib[DibMemory]
	bytes_per_line = dib[DibBytesPerLine]
	width3 = dib[DibWidth] * 3 - 3

	palette = repeat(0, 256) -- first generate a palette from black over color to white
	delta = color / 127
	orig_color = {0, 0, 0}
	for i = 1 to 128 do
		new_color = floor(orig_color)
		blue = new_color[1]
		green = new_color[2]
		red = new_color[3]
		if blue < 0 then new_color[1] = 0 elsif blue > 255 then new_color[1] = 255 end if
		if green < 0 then new_color[2] = 0 elsif green > 255 then new_color[2] = 255 end if
		if red < 0 then new_color[3] = 0 elsif red > 255 then new_color[3] = 255 end if
		palette[i] = new_color
		orig_color += delta
	end for
	delta = (255 - color) / 127
	orig_color = {255, 255, 255}
	for i = 256 to 129 by -1 do
		new_color = floor(orig_color)
		blue = new_color[1]
		green = new_color[2]
		red = new_color[3]
		if blue < 0 then new_color[1] = 0 elsif blue > 255 then new_color[1] = 255 end if
		if green < 0 then new_color[2] = 0 elsif green > 255 then new_color[2] = 255 end if
		if red < 0 then new_color[3] = 0 elsif red > 255 then new_color[3] = 255 end if
		palette[i] = new_color
		orig_color -= delta
	end for
	
	for y = memory to memory + dib[DibBytesTotal] - bytes_per_line by bytes_per_line do
		for x = y to y + width3 by 3 do
			orig_color = peek({x, 3})
			poke(x, palette[floor((orig_color[1] * 114 + orig_color[2] * 587 + orig_color[3] * 299)/1000) + 1])
		end for
	end for
end procedure

global procedure adjustDibBrightness(sequence dib, integer brightness)
	--	Adjusts the brightness of the bitmap: brightness should be between -255 (total black) and 255 (total white)
	atom memory
	integer red, green, blue, bytes_per_line, width3
	sequence color
	if brightness = 0 then return -- adjusting not necessary
	elsif brightness >= 255 then -- total white
		clearDib(dib, {255, 255, 255})
		return
	elsif brightness <= -255 then -- total black
		clearDib(dib, {0, 0, 0})
		return
	end if
	memory = dib[DibMemory]
	bytes_per_line = dib[DibBytesPerLine]
	width3 = dib[DibWidth] * 3 - 3
	for y = memory to memory + dib[DibBytesTotal] - bytes_per_line by bytes_per_line do
		for x = y to y + width3 by 3 do
			color = peek({x, 3}) + brightness
			blue = color[1]
			green = color[2]
			red = color[3]
			if blue < 0 then poke(x, 0) elsif blue > 255 then poke(x, 255) else poke(x, blue) end if
			if green < 0 then poke(x + 1, 0) elsif green > 255 then poke(x + 1, 255) else poke(x + 1, green) end if
			if red < 0 then poke(x + 2, 0) elsif red > 255 then poke(x + 2, 255) else poke(x + 2, red) end if
		end for
	end for
end procedure

global procedure adjustDibContrast(sequence dib, atom contrast)
	--	Adjusts the contrast of the bitmap: contrast should be between -1 and 1
	atom memory
	integer red, green, blue, bytes_per_line, width3
	sequence color
	if contrast = 0 then return -- adjusting not necessary
	elsif contrast < -1 then contrast = 0
	else contrast += 1
	end if
	memory = dib[DibMemory]
	bytes_per_line = dib[DibBytesPerLine]
	width3 = dib[DibWidth] * 3 - 3
	for y = memory to memory + dib[DibBytesTotal] - bytes_per_line by bytes_per_line do
		for x = y to y + width3 by 3 do
			color = floor((peek({x, 3}) - 128) * contrast) + 128
			blue = color[1]
			green = color[2]
			red = color[3]
			if blue < 0 then poke(x, 0) elsif blue > 255 then poke(x, 255) else poke(x, blue) end if
			if green < 0 then poke(x + 1, 0) elsif green > 255 then poke(x + 1, 255) else poke(x + 1, green) end if
			if red < 0 then poke(x + 2, 0) elsif red > 255 then poke(x + 2, 255) else poke(x + 2, red) end if
		end for
	end for
end procedure

global procedure adjustDibBrightnessAndContrast(sequence dib, integer brightness, atom contrast)
	--	Adjusts the brightness and contrast of the bitmap:
	--		brightness should be between -255 (total black) and 255 (total white)
	--		contrast should be between -1 and 1
	atom memory
	integer red, green, blue, bytes_per_line, width3
	sequence color
	if brightness = 0 then
		adjustDibContrast(dib, contrast) -- brightness doesn't need adjusting
		return
	elsif contrast = 0 then
		adjustDibBrightness(dib, brightness) -- contrast doesn't need adjusting
		return
	elsif brightness >= 255 then -- total white
		clearDib(dib, {255, 255, 255})
		return
	elsif brightness <= -255 then -- total black
		clearDib(dib, {0, 0, 0})
		return
	else brightness += 128
	end if
	if contrast < -1 then contrast = 0 else contrast += 1 end if
	memory = dib[DibMemory]
	bytes_per_line = dib[DibBytesPerLine]
	width3 = dib[DibWidth] * 3 - 3
	for y = memory to memory + dib[DibBytesTotal] - bytes_per_line by bytes_per_line do
		for x = y to y + width3 by 3 do
			color = floor((peek({x, 3}) - 128) * contrast) + brightness
			blue = color[1]
			green = color[2]
			red = color[3]
			if blue < 0 then poke(x, 0) elsif blue > 255 then poke(x, 255) else poke(x, blue) end if
			if green < 0 then poke(x + 1, 0) elsif green > 255 then poke(x + 1, 255) else poke(x + 1, green) end if
			if red < 0 then poke(x + 2, 0) elsif red > 255 then poke(x + 2, 255) else poke(x + 2, red) end if
		end for
	end for
end procedure
